
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007688  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007844  08007844  00017844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b4  080078b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078bc  080078bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080078c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  2000000c  080078d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  080078d0  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c9d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003033  00000000  00000000  00041cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00044d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a08  00000000  00000000  00046840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd09  00000000  00000000  00048248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebc2  00000000  00000000  00075f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123511  00000000  00000000  00094b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b8024  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007688  00000000  00000000  001b8078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800782c 	.word	0x0800782c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800782c 	.word	0x0800782c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f001 fadb 	bl	8001ab2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f838 	bl	8000570 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000500:	f000 f898 	bl	8000634 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 fce0 	bl	8000ec8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000508:	f000 f8c4 	bl	8000694 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800050c:	f000 f926 	bl	800075c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000510:	f000 f95c 	bl	80007cc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000514:	f000 f99a 	bl	800084c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000518:	f000 f9d8 	bl	80008cc <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 800051c:	f000 fa2c 	bl	8000978 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000520:	f000 fa68 	bl	80009f4 <MX_SPI3_Init>
  MX_UART4_Init();
 8000524:	f000 fb96 	bl	8000c54 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000528:	f000 fbe0 	bl	8000cec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800052c:	f000 fc2a 	bl	8000d84 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000530:	f000 fc76 	bl	8000e20 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000534:	f000 fcc0 	bl	8000eb8 <MX_USB_OTG_FS_USB_Init>
  MX_TIM3_Init();
 8000538:	f000 fb12 	bl	8000b60 <MX_TIM3_Init>
  MX_TIM2_Init();
 800053c:	f000 fa98 	bl	8000a70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3); // Add PWM Servo Motor
 8000540:	2108      	movs	r1, #8
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <main+0x78>)
 8000544:	f005 fa6a 	bl	8005a1c <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //2ms Pwm - Servo motor arm rotates to 180 degree

	      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 100);
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <main+0x78>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2264      	movs	r2, #100	; 0x64
 800054e:	63da      	str	r2, [r3, #60]	; 0x3c
	      HAL_Delay(3000); // 1000ms
 8000550:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000554:	f001 fb22 	bl	8001b9c <HAL_Delay>
	      // __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 75);
	      // HAL_Delay(5000); // 1000ms

	      //1ms Pwm - Servo motor arm rotates to 0 degree

	      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 50);
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <main+0x78>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2232      	movs	r2, #50	; 0x32
 800055e:	63da      	str	r2, [r3, #60]	; 0x3c
	      HAL_Delay(3000); // 1000ms
 8000560:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000564:	f001 fb1a 	bl	8001b9c <HAL_Delay>
	      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 100);
 8000568:	e7ee      	b.n	8000548 <main+0x54>
 800056a:	bf00      	nop
 800056c:	20000464 	.word	0x20000464

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f007 f94c 	bl	800781c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f003 fc41 	bl	8003e1c <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 fdca 	bl	8001138 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a4:	f003 fc0a 	bl	8003dbc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <SystemClock_Config+0xc0>)
 80005aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <SystemClock_Config+0xc0>)
 80005b0:	f023 0318 	bic.w	r3, r3, #24
 80005b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b8:	2314      	movs	r3, #20
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c8:	2360      	movs	r3, #96	; 0x60
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d0:	2301      	movs	r3, #1
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005d8:	2310      	movs	r3, #16
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fcb9 	bl	8003f64 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005f8:	f000 fd9e 	bl	8001138 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f004 f8cb 	bl	80047b0 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000620:	f000 fd8a 	bl	8001138 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000624:	f004 fea6 	bl	8005374 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000

08000634 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0a6      	sub	sp, #152	; 0x98
 8000638:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2294      	movs	r2, #148	; 0x94
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f007 f8eb 	bl	800781c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000646:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800064a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800064c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000654:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000658:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800065a:	2301      	movs	r3, #1
 800065c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800065e:	2301      	movs	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000662:	2318      	movs	r3, #24
 8000664:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000672:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000676:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fb4a 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000686:	f000 fd57 	bl	8001138 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3798      	adds	r7, #152	; 0x98
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006aa:	4b29      	ldr	r3, [pc, #164]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006ac:	4a29      	ldr	r2, [pc, #164]	; (8000754 <MX_ADC1_Init+0xc0>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b6:	4b26      	ldr	r3, [pc, #152]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006ca:	2204      	movs	r2, #4
 80006cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d4:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006dc:	2201      	movs	r2, #1
 80006de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_ADC1_Init+0xbc>)
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800070a:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_ADC1_Init+0xbc>)
 800070c:	f001 fc0a 	bl	8001f24 <HAL_ADC_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000716:	f000 fd0f 	bl	8001138 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0xc4>)
 800071c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071e:	2306      	movs	r3, #6
 8000720:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000726:	237f      	movs	r3, #127	; 0x7f
 8000728:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072a:	2304      	movs	r3, #4
 800072c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_ADC1_Init+0xbc>)
 8000738:	f001 fd40 	bl	80021bc <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000742:	f000 fcf9 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000278 	.word	0x20000278
 8000754:	50040000 	.word	0x50040000
 8000758:	04300002 	.word	0x04300002

0800075c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 8000762:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <MX_DFSDM1_Init+0x6c>)
 8000764:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 8000768:	2201      	movs	r2, #1
 800076a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 8000774:	2202      	movs	r2, #2
 8000776:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 8000792:	2204      	movs	r2, #4
 8000794:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 800079e:	2201      	movs	r2, #1
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_DFSDM1_Init+0x68>)
 80007b0:	f002 fa12 	bl	8002bd8 <HAL_DFSDM_ChannelInit>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80007ba:	f000 fcbd 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000540 	.word	0x20000540
 80007c8:	40016040 	.word	0x40016040

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_I2C1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_I2C1_Init+0x74>)
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <MX_I2C1_Init+0x7c>)
 80007da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_I2C1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_I2C1_Init+0x74>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000806:	480e      	ldr	r0, [pc, #56]	; (8000840 <MX_I2C1_Init+0x74>)
 8000808:	f002 fcbf 	bl	800318a <HAL_I2C_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 fc91 	bl	8001138 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_I2C1_Init+0x74>)
 800081a:	f002 fd45 	bl	80032a8 <HAL_I2CEx_ConfigAnalogFilter>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000824:	f000 fc88 	bl	8001138 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_I2C1_Init+0x74>)
 800082c:	f002 fd87 	bl	800333e <HAL_I2CEx_ConfigDigitalFilter>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 fc7f 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000e0 	.word	0x200000e0
 8000844:	40005400 	.word	0x40005400
 8000848:	00303d5b 	.word	0x00303d5b

0800084c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <MX_I2C2_Init+0x7c>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000864:	2201      	movs	r2, #1
 8000866:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_I2C2_Init+0x74>)
 8000888:	f002 fc7f 	bl	800318a <HAL_I2C_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000892:	f000 fc51 	bl	8001138 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <MX_I2C2_Init+0x74>)
 800089a:	f002 fd05 	bl	80032a8 <HAL_I2CEx_ConfigAnalogFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a4:	f000 fc48 	bl	8001138 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2C2_Init+0x74>)
 80008ac:	f002 fd47 	bl	800333e <HAL_I2CEx_ConfigDigitalFilter>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fc3f 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000017c 	.word	0x2000017c
 80008c4:	40005800 	.word	0x40005800
 80008c8:	00303d5b 	.word	0x00303d5b

080008cc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 80008e2:	4a24      	ldr	r2, [pc, #144]	; (8000974 <MX_OCTOSPI1_Init+0xa8>)
 80008e4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 80008f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008f8:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 80008fc:	2220      	movs	r2, #32
 80008fe:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000902:	2201      	movs	r2, #1
 8000904:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000914:	2201      	movs	r2, #1
 8000916:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 800092c:	2208      	movs	r2, #8
 800092e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000930:	480f      	ldr	r0, [pc, #60]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000932:	f002 fd51 	bl	80033d8 <HAL_OSPI_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800093c:	f000 fbfc 	bl	8001138 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000948:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800094c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	f241 3288 	movw	r2, #5000	; 0x1388
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <MX_OCTOSPI1_Init+0xa4>)
 8000958:	f002 fdf4 	bl	8003544 <HAL_OSPIM_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000962:	f000 fbe9 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000012c 	.word	0x2000012c
 8000974:	a0001000 	.word	0xa0001000

08000978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_SPI1_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_SPI1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_SPI1_Init+0x74>)
 8000984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_SPI1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_SPI1_Init+0x74>)
 8000992:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000996:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_SPI1_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_SPI1_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_SPI1_Init+0x74>)
 80009a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_SPI1_Init+0x74>)
 80009ae:	2208      	movs	r2, #8
 80009b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_SPI1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_SPI1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_SPI1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_SPI1_Init+0x74>)
 80009c6:	2207      	movs	r2, #7
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_SPI1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_SPI1_Init+0x74>)
 80009d2:	2208      	movs	r2, #8
 80009d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_SPI1_Init+0x74>)
 80009d8:	f004 fec4 	bl	8005764 <HAL_SPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 fba9 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000400 	.word	0x20000400
 80009f0:	40013000 	.word	0x40013000

080009f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <MX_SPI3_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <MX_SPI3_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a12:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a26:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a42:	2207      	movs	r2, #7
 8000a44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_SPI3_Init+0x74>)
 8000a54:	f004 fe86 	bl	8005764 <HAL_SPI_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 fb6b 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000214 	.word	0x20000214
 8000a6c:	40003c00 	.word	0x40003c00

08000a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8000aaa:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000aac:	f240 123f 	movw	r2, #319	; 0x13f
 8000ab0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000aba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000abe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000acc:	4823      	ldr	r0, [pc, #140]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000ace:	f004 feec 	bl	80058aa <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000ad8:	f000 fb2e 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	481c      	ldr	r0, [pc, #112]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000aea:	f005 fad1 	bl	8006090 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000af4:	f000 fb20 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000af8:	4818      	ldr	r0, [pc, #96]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000afa:	f004 ff2d 	bl	8005958 <HAL_TIM_PWM_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b04:	f000 fb18 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	4811      	ldr	r0, [pc, #68]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000b18:	f005 ffe6 	bl	8006ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b22:	f000 fb09 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b26:	2360      	movs	r3, #96	; 0x60
 8000b28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500-1;
 8000b2a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000b2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000b40:	f005 f992 	bl	8005e68 <HAL_TIM_PWM_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000b4a:	f000 faf5 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <MX_TIM2_Init+0xec>)
 8000b50:	f000 fd84 	bl	800165c <HAL_TIM_MspPostInit>

}
 8000b54:	bf00      	nop
 8000b56:	3738      	adds	r7, #56	; 0x38
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000464 	.word	0x20000464

08000b60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	; 0x38
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000b94:	4a2e      	ldr	r2, [pc, #184]	; (8000c50 <MX_TIM3_Init+0xf0>)
 8000b96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320-1;
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000b9a:	f240 123f 	movw	r2, #319	; 0x13f
 8000b9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000ba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bae:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bba:	4824      	ldr	r0, [pc, #144]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000bbc:	f004 fe75 	bl	80058aa <HAL_TIM_Base_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000bc6:	f000 fab7 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481d      	ldr	r0, [pc, #116]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000bd8:	f005 fa5a 	bl	8006090 <HAL_TIM_ConfigClockSource>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000be2:	f000 faa9 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000be6:	4819      	ldr	r0, [pc, #100]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000be8:	f004 feb6 	bl	8005958 <HAL_TIM_PWM_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bf2:	f000 faa1 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000c06:	f005 ff6f 	bl	8006ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c10:	f000 fa92 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c14:	2360      	movs	r3, #96	; 0x60
 8000c16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500-1;
 8000c18:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	220c      	movs	r2, #12
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000c2e:	f005 f91b 	bl	8005e68 <HAL_TIM_PWM_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8000c38:	f000 fa7e 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <MX_TIM3_Init+0xec>)
 8000c3e:	f000 fd0d 	bl	800165c <HAL_TIM_MspPostInit>

}
 8000c42:	bf00      	nop
 8000c44:	3738      	adds	r7, #56	; 0x38
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200001c8 	.word	0x200001c8
 8000c50:	40000400 	.word	0x40000400

08000c54 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c5a:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <MX_UART4_Init+0x94>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000c9e:	f005 ffc9 	bl	8006c34 <HAL_UART_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f000 fa46 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000cb0:	f006 fcc6 	bl	8007640 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000cba:	f000 fa3d 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000cc2:	f006 fcfb 	bl	80076bc <HAL_UARTEx_SetRxFifoThreshold>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ccc:	f000 fa34 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_UART4_Init+0x90>)
 8000cd2:	f006 fc7c 	bl	80075ce <HAL_UARTEx_DisableFifoMode>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000cdc:	f000 fa2c 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000370 	.word	0x20000370
 8000ce8:	40004c00 	.word	0x40004c00

08000cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000cf2:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <MX_USART1_UART_Init+0x94>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d34:	4811      	ldr	r0, [pc, #68]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d36:	f005 ff7d 	bl	8006c34 <HAL_UART_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d40:	f000 f9fa 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d48:	f006 fc7a 	bl	8007640 <HAL_UARTEx_SetTxFifoThreshold>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d52:	f000 f9f1 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d56:	2100      	movs	r1, #0
 8000d58:	4808      	ldr	r0, [pc, #32]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d5a:	f006 fcaf 	bl	80076bc <HAL_UARTEx_SetRxFifoThreshold>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d64:	f000 f9e8 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_USART1_UART_Init+0x90>)
 8000d6a:	f006 fc30 	bl	80075ce <HAL_UARTEx_DisableFifoMode>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d74:	f000 f9e0 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200002e0 	.word	0x200002e0
 8000d80:	40013800 	.word	0x40013800

08000d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000d8a:	4a24      	ldr	r2, [pc, #144]	; (8000e1c <MX_USART2_UART_Init+0x98>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000db0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000db4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4812      	ldr	r0, [pc, #72]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000dd0:	f005 ff30 	bl	8006c34 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000dda:	f000 f9ad 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000de2:	f006 fc2d 	bl	8007640 <HAL_UARTEx_SetTxFifoThreshold>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000dec:	f000 f9a4 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000df4:	f006 fc62 	bl	80076bc <HAL_UARTEx_SetRxFifoThreshold>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000dfe:	f000 f99b 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_USART2_UART_Init+0x94>)
 8000e04:	f006 fbe3 	bl	80075ce <HAL_UARTEx_DisableFifoMode>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000e0e:	f000 f993 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200004b0 	.word	0x200004b0
 8000e1c:	40004400 	.word	0x40004400

08000e20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e26:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <MX_USART3_UART_Init+0x94>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e6a:	f005 fee3 	bl	8006c34 <HAL_UART_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e74:	f000 f960 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e78:	2100      	movs	r1, #0
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e7c:	f006 fbe0 	bl	8007640 <HAL_UARTEx_SetTxFifoThreshold>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e86:	f000 f957 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e8e:	f006 fc15 	bl	80076bc <HAL_UARTEx_SetRxFifoThreshold>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e98:	f000 f94e 	bl	8001138 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_USART3_UART_Init+0x90>)
 8000e9e:	f006 fb96 	bl	80075ce <HAL_UARTEx_DisableFifoMode>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ea8:	f000 f946 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000050 	.word	0x20000050
 8000eb4:	40004800 	.word	0x40004800

08000eb8 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ede:	4b91      	ldr	r3, [pc, #580]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a90      	ldr	r2, [pc, #576]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000ee4:	f043 0310 	orr.w	r3, r3, #16
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b8e      	ldr	r3, [pc, #568]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0310 	and.w	r3, r3, #16
 8000ef2:	61bb      	str	r3, [r7, #24]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b8b      	ldr	r3, [pc, #556]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	4a8a      	ldr	r2, [pc, #552]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f02:	4b88      	ldr	r3, [pc, #544]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0e:	4b85      	ldr	r3, [pc, #532]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4a84      	ldr	r2, [pc, #528]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4b82      	ldr	r3, [pc, #520]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b7f      	ldr	r3, [pc, #508]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	4a7e      	ldr	r2, [pc, #504]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f32:	4b7c      	ldr	r3, [pc, #496]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b79      	ldr	r3, [pc, #484]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a78      	ldr	r2, [pc, #480]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b76      	ldr	r3, [pc, #472]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	4b73      	ldr	r3, [pc, #460]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	4a72      	ldr	r2, [pc, #456]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f62:	4b70      	ldr	r3, [pc, #448]	; (8001124 <MX_GPIO_Init+0x25c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f240 1105 	movw	r1, #261	; 0x105
 8000f74:	486c      	ldr	r0, [pc, #432]	; (8001128 <MX_GPIO_Init+0x260>)
 8000f76:	f002 f8cd 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f248 1118 	movw	r1, #33048	; 0x8118
 8000f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f84:	f002 f8c6 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|SPSGRF_915_SDN_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f248 0104 	movw	r1, #32772	; 0x8004
 8000f8e:	4867      	ldr	r0, [pc, #412]	; (800112c <MX_GPIO_Init+0x264>)
 8000f90:	f002 f8c0 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|ARD_D5_Pin
 8000f94:	2200      	movs	r2, #0
 8000f96:	f247 0130 	movw	r1, #28720	; 0x7030
 8000f9a:	4864      	ldr	r0, [pc, #400]	; (800112c <MX_GPIO_Init+0x264>)
 8000f9c:	f002 f8ba 	bl	8003114 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f242 0183 	movw	r1, #8323	; 0x2083
 8000fa6:	4862      	ldr	r0, [pc, #392]	; (8001130 <MX_GPIO_Init+0x268>)
 8000fa8:	f002 f8b4 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000fb2:	4860      	ldr	r0, [pc, #384]	; (8001134 <MX_GPIO_Init+0x26c>)
 8000fb4:	f002 f8ae 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000fb8:	f240 1305 	movw	r3, #261	; 0x105
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4855      	ldr	r0, [pc, #340]	; (8001128 <MX_GPIO_Init+0x260>)
 8000fd2:	f001 ff0d 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000fd6:	237a      	movs	r3, #122	; 0x7a
 8000fd8:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	484f      	ldr	r0, [pc, #316]	; (8001128 <MX_GPIO_Init+0x260>)
 8000fec:	f001 ff00 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ff0:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	484b      	ldr	r0, [pc, #300]	; (8001134 <MX_GPIO_Init+0x26c>)
 8001008:	f001 fef2 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800100c:	f248 1318 	movw	r3, #33048	; 0x8118
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f001 fee2 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001030:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	483a      	ldr	r0, [pc, #232]	; (800112c <MX_GPIO_Init+0x264>)
 8001042:	f001 fed5 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001046:	f24f 0334 	movw	r3, #61492	; 0xf034
 800104a:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4833      	ldr	r0, [pc, #204]	; (800112c <MX_GPIO_Init+0x264>)
 8001060:	f001 fec6 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001064:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001068:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800106a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	482d      	ldr	r0, [pc, #180]	; (8001130 <MX_GPIO_Init+0x268>)
 800107c:	f001 feb8 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001080:	f242 0383 	movw	r3, #8323	; 0x2083
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4825      	ldr	r0, [pc, #148]	; (8001130 <MX_GPIO_Init+0x268>)
 800109a:	f001 fea9 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800109e:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	481f      	ldr	r0, [pc, #124]	; (8001134 <MX_GPIO_Init+0x26c>)
 80010b8:	f001 fe9a 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80010bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f001 fe8c 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80010d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010ea:	230a      	movs	r3, #10
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f8:	f001 fe7a 	bl	8002df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2017      	movs	r0, #23
 8001102:	f001 fd32 	bl	8002b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001106:	2017      	movs	r0, #23
 8001108:	f001 fd4b 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	2028      	movs	r0, #40	; 0x28
 8001112:	f001 fd2a 	bl	8002b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001116:	2028      	movs	r0, #40	; 0x28
 8001118:	f001 fd43 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

}
 800111c:	bf00      	nop
 800111e:	3730      	adds	r7, #48	; 0x30
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	48001000 	.word	0x48001000
 800112c:	48000400 	.word	0x48000400
 8001130:	48000c00 	.word	0x48000c00
 8001134:	48000800 	.word	0x48000800

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_MspInit+0x44>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6613      	str	r3, [r2, #96]	; 0x60
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_MspInit+0x44>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_MspInit+0x44>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x44>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a15      	ldr	r2, [pc, #84]	; (8001200 <HAL_ADC_MspInit+0x74>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d123      	bne.n	80011f6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_ADC_MspInit+0x78>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_ADC_MspInit+0x78>)
 80011b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_ADC_MspInit+0x78>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_ADC_MspInit+0x78>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_ADC_MspInit+0x78>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_ADC_MspInit+0x78>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80011de:	233f      	movs	r3, #63	; 0x3f
 80011e0:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011e2:	230b      	movs	r3, #11
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_ADC_MspInit+0x7c>)
 80011f2:	f001 fdfd 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	50040000 	.word	0x50040000
 8001204:	40021000 	.word	0x40021000
 8001208:	48000800 	.word	0x48000800

0800120c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0ae      	sub	sp, #184	; 0xb8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2294      	movs	r2, #148	; 0x94
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f006 faf5 	bl	800781c <memset>
  if(DFSDM1_Init == 0)
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d142      	bne.n	80012c0 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800123a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fd62 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001256:	f7ff ff6f 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001264:	6613      	str	r3, [r2, #96]	; 0x60
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800128a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800128e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012a4:	2306      	movs	r3, #6
 80012a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80012b2:	f001 fd9d 	bl	8002df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a02      	ldr	r2, [pc, #8]	; (80012c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80012be:	6013      	str	r3, [r2, #0]
  }

}
 80012c0:	bf00      	nop
 80012c2:	37b8      	adds	r7, #184	; 0xb8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000028 	.word	0x20000028
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48001000 	.word	0x48001000

080012d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0b0      	sub	sp, #192	; 0xc0
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ec:	f107 0318 	add.w	r3, r7, #24
 80012f0:	2294      	movs	r2, #148	; 0x94
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f006 fa91 	bl	800781c <memset>
  if(hi2c->Instance==I2C1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a42      	ldr	r2, [pc, #264]	; (8001408 <HAL_I2C_MspInit+0x134>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d13c      	bne.n	800137e <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001304:	2340      	movs	r3, #64	; 0x40
 8001306:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001308:	2300      	movs	r3, #0
 800130a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130c:	f107 0318 	add.w	r3, r7, #24
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fcff 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800131c:	f7ff ff0c 	bl	8001138 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4b3a      	ldr	r3, [pc, #232]	; (800140c <HAL_I2C_MspInit+0x138>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	4a39      	ldr	r2, [pc, #228]	; (800140c <HAL_I2C_MspInit+0x138>)
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_I2C_MspInit+0x138>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001338:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001340:	2312      	movs	r3, #18
 8001342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001346:	2301      	movs	r3, #1
 8001348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001352:	2304      	movs	r3, #4
 8001354:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800135c:	4619      	mov	r1, r3
 800135e:	482c      	ldr	r0, [pc, #176]	; (8001410 <HAL_I2C_MspInit+0x13c>)
 8001360:	f001 fd46 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_I2C_MspInit+0x138>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	4a28      	ldr	r2, [pc, #160]	; (800140c <HAL_I2C_MspInit+0x138>)
 800136a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136e:	6593      	str	r3, [r2, #88]	; 0x58
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_I2C_MspInit+0x138>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800137c:	e040      	b.n	8001400 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a24      	ldr	r2, [pc, #144]	; (8001414 <HAL_I2C_MspInit+0x140>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d13b      	bne.n	8001400 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800138c:	2300      	movs	r3, #0
 800138e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fcbd 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80013a0:	f7ff feca 	bl	8001138 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_I2C_MspInit+0x138>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	4a18      	ldr	r2, [pc, #96]	; (800140c <HAL_I2C_MspInit+0x138>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_I2C_MspInit+0x138>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80013bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c4:	2312      	movs	r3, #18
 80013c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013d6:	2304      	movs	r3, #4
 80013d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013e0:	4619      	mov	r1, r3
 80013e2:	480b      	ldr	r0, [pc, #44]	; (8001410 <HAL_I2C_MspInit+0x13c>)
 80013e4:	f001 fd04 	bl	8002df0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_I2C_MspInit+0x138>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_I2C_MspInit+0x138>)
 80013ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f2:	6593      	str	r3, [r2, #88]	; 0x58
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_I2C_MspInit+0x138>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
}
 8001400:	bf00      	nop
 8001402:	37c0      	adds	r7, #192	; 0xc0
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40005400 	.word	0x40005400
 800140c:	40021000 	.word	0x40021000
 8001410:	48000400 	.word	0x48000400
 8001414:	40005800 	.word	0x40005800

08001418 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0b0      	sub	sp, #192	; 0xc0
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	2294      	movs	r2, #148	; 0x94
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f006 f9ef 	bl	800781c <memset>
  if(hospi->Instance==OCTOSPI1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <HAL_OSPI_MspInit+0xcc>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d149      	bne.n	80014dc <HAL_OSPI_MspInit+0xc4>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800144c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fc5b 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001464:	f7ff fe68 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_OSPI_MspInit+0xd0>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <HAL_OSPI_MspInit+0xd0>)
 800146e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001472:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_OSPI_MspInit+0xd0>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_OSPI_MspInit+0xd0>)
 8001482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001484:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <HAL_OSPI_MspInit+0xd0>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6513      	str	r3, [r2, #80]	; 0x50
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_OSPI_MspInit+0xd0>)
 800148e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_OSPI_MspInit+0xd0>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <HAL_OSPI_MspInit+0xd0>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_OSPI_MspInit+0xd0>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80014b0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80014b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80014ca:	230a      	movs	r3, #10
 80014cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_OSPI_MspInit+0xd4>)
 80014d8:	f001 fc8a 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	37c0      	adds	r7, #192	; 0xc0
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	a0001000 	.word	0xa0001000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48001000 	.word	0x48001000

080014f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2f      	ldr	r2, [pc, #188]	; (80015cc <HAL_SPI_MspInit+0xdc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d129      	bne.n	8001566 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 8001518:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800151c:	6613      	str	r3, [r2, #96]	; 0x60
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001542:	23e0      	movs	r3, #224	; 0xe0
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001552:	2305      	movs	r3, #5
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f001 fc46 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001564:	e02d      	b.n	80015c2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <HAL_SPI_MspInit+0xe4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d128      	bne.n	80015c2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 8001576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157a:	6593      	str	r3, [r2, #88]	; 0x58
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_SPI_MspInit+0xe0>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80015a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4806      	ldr	r0, [pc, #24]	; (80015d8 <HAL_SPI_MspInit+0xe8>)
 80015be:	f001 fc17 	bl	8002df0 <HAL_GPIO_Init>
}
 80015c2:	bf00      	nop
 80015c4:	3730      	adds	r7, #48	; 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40013000 	.word	0x40013000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40003c00 	.word	0x40003c00
 80015d8:	48000800 	.word	0x48000800

080015dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d114      	bne.n	8001618 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_TIM_Base_MspInit+0x78>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_TIM_Base_MspInit+0x78>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_TIM_Base_MspInit+0x78>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	201c      	movs	r0, #28
 800160c:	f001 faad 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001610:	201c      	movs	r0, #28
 8001612:	f001 fac6 	bl	8002ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001616:	e018      	b.n	800164a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_TIM_Base_MspInit+0x7c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d113      	bne.n	800164a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_TIM_Base_MspInit+0x78>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <HAL_TIM_Base_MspInit+0x78>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_TIM_Base_MspInit+0x78>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	201d      	movs	r0, #29
 8001640:	f001 fa93 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001644:	201d      	movs	r0, #29
 8001646:	f001 faac 	bl	8002ba2 <HAL_NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	40000400 	.word	0x40000400

0800165c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167c:	d11d      	bne.n	80016ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a20      	ldr	r2, [pc, #128]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001696:	2304      	movs	r3, #4
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016a6:	2301      	movs	r3, #1
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b4:	f001 fb9c 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016b8:	e020      	b.n	80016fc <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <HAL_TIM_MspPostInit+0xac>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d11b      	bne.n	80016fc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 80016dc:	2302      	movs	r3, #2
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ec:	2302      	movs	r3, #2
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_TIM_MspPostInit+0xb0>)
 80016f8:	f001 fb7a 	bl	8002df0 <HAL_GPIO_Init>
}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	40000400 	.word	0x40000400
 800170c:	48000400 	.word	0x48000400

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b0b4      	sub	sp, #208	; 0xd0
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172c:	2294      	movs	r2, #148	; 0x94
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f006 f873 	bl	800781c <memset>
  if(huart->Instance==UART4)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a83      	ldr	r2, [pc, #524]	; (8001948 <HAL_UART_MspInit+0x238>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d13c      	bne.n	80017ba <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001740:	2308      	movs	r3, #8
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001744:	2300      	movs	r3, #0
 8001746:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fae1 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001758:	f7ff fcee 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800175c:	4b7b      	ldr	r3, [pc, #492]	; (800194c <HAL_UART_MspInit+0x23c>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a7a      	ldr	r2, [pc, #488]	; (800194c <HAL_UART_MspInit+0x23c>)
 8001762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
 8001768:	4b78      	ldr	r3, [pc, #480]	; (800194c <HAL_UART_MspInit+0x23c>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b75      	ldr	r3, [pc, #468]	; (800194c <HAL_UART_MspInit+0x23c>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001778:	4a74      	ldr	r2, [pc, #464]	; (800194c <HAL_UART_MspInit+0x23c>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001780:	4b72      	ldr	r3, [pc, #456]	; (800194c <HAL_UART_MspInit+0x23c>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	623b      	str	r3, [r7, #32]
 800178a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800178c:	2303      	movs	r3, #3
 800178e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017a4:	2308      	movs	r3, #8
 80017a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b4:	f001 fb1c 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017b8:	e0c2      	b.n	8001940 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a64      	ldr	r2, [pc, #400]	; (8001950 <HAL_UART_MspInit+0x240>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d13b      	bne.n	800183c <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017c8:	2300      	movs	r3, #0
 80017ca:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 fa9f 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80017dc:	f7ff fcac 	bl	8001138 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e0:	4b5a      	ldr	r3, [pc, #360]	; (800194c <HAL_UART_MspInit+0x23c>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	4a59      	ldr	r2, [pc, #356]	; (800194c <HAL_UART_MspInit+0x23c>)
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ea:	6613      	str	r3, [r2, #96]	; 0x60
 80017ec:	4b57      	ldr	r3, [pc, #348]	; (800194c <HAL_UART_MspInit+0x23c>)
 80017ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	4b54      	ldr	r3, [pc, #336]	; (800194c <HAL_UART_MspInit+0x23c>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	4a53      	ldr	r2, [pc, #332]	; (800194c <HAL_UART_MspInit+0x23c>)
 80017fe:	f043 0302 	orr.w	r3, r3, #2
 8001802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001804:	4b51      	ldr	r3, [pc, #324]	; (800194c <HAL_UART_MspInit+0x23c>)
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001810:	23c0      	movs	r3, #192	; 0xc0
 8001812:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001828:	2307      	movs	r3, #7
 800182a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001832:	4619      	mov	r1, r3
 8001834:	4847      	ldr	r0, [pc, #284]	; (8001954 <HAL_UART_MspInit+0x244>)
 8001836:	f001 fadb 	bl	8002df0 <HAL_GPIO_Init>
}
 800183a:	e081      	b.n	8001940 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a45      	ldr	r2, [pc, #276]	; (8001958 <HAL_UART_MspInit+0x248>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d13b      	bne.n	80018be <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001846:	2302      	movs	r3, #2
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800184a:	2300      	movs	r3, #0
 800184c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fa5e 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_UART_MspInit+0x152>
      Error_Handler();
 800185e:	f7ff fc6b 	bl	8001138 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001862:	4b3a      	ldr	r3, [pc, #232]	; (800194c <HAL_UART_MspInit+0x23c>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	4a39      	ldr	r2, [pc, #228]	; (800194c <HAL_UART_MspInit+0x23c>)
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_UART_MspInit+0x23c>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_UART_MspInit+0x23c>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a33      	ldr	r2, [pc, #204]	; (800194c <HAL_UART_MspInit+0x23c>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <HAL_UART_MspInit+0x23c>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001892:	2378      	movs	r3, #120	; 0x78
 8001894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018aa:	2307      	movs	r3, #7
 80018ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018b4:	4619      	mov	r1, r3
 80018b6:	4829      	ldr	r0, [pc, #164]	; (800195c <HAL_UART_MspInit+0x24c>)
 80018b8:	f001 fa9a 	bl	8002df0 <HAL_GPIO_Init>
}
 80018bc:	e040      	b.n	8001940 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a27      	ldr	r2, [pc, #156]	; (8001960 <HAL_UART_MspInit+0x250>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d13b      	bne.n	8001940 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018c8:	2304      	movs	r3, #4
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d4:	4618      	mov	r0, r3
 80018d6:	f003 fa1d 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80018e0:	f7ff fc2a 	bl	8001138 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_UART_MspInit+0x23c>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	4a18      	ldr	r2, [pc, #96]	; (800194c <HAL_UART_MspInit+0x23c>)
 80018ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ee:	6593      	str	r3, [r2, #88]	; 0x58
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_UART_MspInit+0x23c>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_UART_MspInit+0x23c>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <HAL_UART_MspInit+0x23c>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_UART_MspInit+0x23c>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001914:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800192e:	2307      	movs	r3, #7
 8001930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001934:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001938:	4619      	mov	r1, r3
 800193a:	4808      	ldr	r0, [pc, #32]	; (800195c <HAL_UART_MspInit+0x24c>)
 800193c:	f001 fa58 	bl	8002df0 <HAL_GPIO_Init>
}
 8001940:	bf00      	nop
 8001942:	37d0      	adds	r7, #208	; 0xd0
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40004c00 	.word	0x40004c00
 800194c:	40021000 	.word	0x40021000
 8001950:	40013800 	.word	0x40013800
 8001954:	48000400 	.word	0x48000400
 8001958:	40004400 	.word	0x40004400
 800195c:	48000c00 	.word	0x48000c00
 8001960:	40004800 	.word	0x40004800

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <NMI_Handler+0x4>

0800196a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <MemManage_Handler+0x4>

08001976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <UsageFault_Handler+0x4>

08001982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b0:	f000 f8d4 	bl	8001b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80019bc:	2020      	movs	r0, #32
 80019be:	f001 fbc1 	bl	8003144 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80019c2:	2040      	movs	r0, #64	; 0x40
 80019c4:	f001 fbbe 	bl	8003144 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D11_Pin);
 80019c8:	2080      	movs	r0, #128	; 0x80
 80019ca:	f001 fbbb 	bl	8003144 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ISM43362_RST_Pin);
 80019ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019d2:	f001 fbb7 	bl	8003144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM2_IRQHandler+0x10>)
 80019e2:	f004 f921 	bl	8005c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000464 	.word	0x20000464

080019f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <TIM3_IRQHandler+0x10>)
 80019f6:	f004 f917 	bl	8005c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200001c8 	.word	0x200001c8

08001a04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_CLK_Pin);
 8001a08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a0c:	f001 fb9a 	bl	8003144 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_NCS_Pin);
 8001a10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a14:	f001 fb96 	bl	8003144 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OQUADSPI_BK1_IO0_Pin);
 8001a18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a1c:	f001 fb92 	bl	8003144 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001a20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a24:	f001 fb8e 	bl	8003144 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO2_Pin);
 8001a28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a2c:	f001 fb8a 	bl	8003144 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO3_Pin);
 8001a30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a34:	f001 fb86 	bl	8003144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a64:	f7ff ffea 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a68:	480c      	ldr	r0, [pc, #48]	; (8001a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a6a:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <LoopForever+0xe>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a80:	4c0a      	ldr	r4, [pc, #40]	; (8001aac <LoopForever+0x16>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f005 fea1 	bl	80077d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a92:	f7fe fd2f 	bl	80004f4 <main>

08001a96 <LoopForever>:

LoopForever:
    b LoopForever
 8001a96:	e7fe      	b.n	8001a96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a98:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001aa4:	080078c4 	.word	0x080078c4
  ldr r2, =_sbss
 8001aa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001aac:	2000057c 	.word	0x2000057c

08001ab0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_IRQHandler>

08001ab2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f001 f849 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 f80e 	bl	8001ae4 <HAL_InitTick>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	71fb      	strb	r3, [r7, #7]
 8001ad2:	e001      	b.n	8001ad8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ad4:	f7ff fb36 	bl	8001144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_InitTick+0x6c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d023      	beq.n	8001b40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_InitTick+0x70>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_InitTick+0x6c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 f855 	bl	8002bbe <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10f      	bne.n	8001b3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d809      	bhi.n	8001b34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f001 f81f 	bl	8002b6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_InitTick+0x74>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e007      	b.n	8001b44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e004      	b.n	8001b44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e001      	b.n	8001b44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_IncTick+0x24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_IncTick+0x24>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	20000578 	.word	0x20000578

08001b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_GetTick+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000578 	.word	0x20000578

08001b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	f7ff ffee 	bl	8001b84 <HAL_GetTick>
 8001ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d005      	beq.n	8001bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_Delay+0x44>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc2:	bf00      	nop
 8001bc4:	f7ff ffde 	bl	8001b84 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d8f7      	bhi.n	8001bc4 <HAL_Delay+0x28>
  {
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008

08001be4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3360      	adds	r3, #96	; 0x60
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <LL_ADC_SetOffset+0x44>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c84:	bf00      	nop
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	03fff000 	.word	0x03fff000

08001c94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3360      	adds	r3, #96	; 0x60
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3360      	adds	r3, #96	; 0x60
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	615a      	str	r2, [r3, #20]
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3330      	adds	r3, #48	; 0x30
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	211f      	movs	r1, #31
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	401a      	ands	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	0e9b      	lsrs	r3, r3, #26
 8001d54:	f003 011f 	and.w	r1, r3, #31
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	431a      	orrs	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d68:	bf00      	nop
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3314      	adds	r3, #20
 8001d84:	461a      	mov	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	0e5b      	lsrs	r3, r3, #25
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	4413      	add	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	0d1b      	lsrs	r3, r3, #20
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	2107      	movs	r1, #7
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	401a      	ands	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	0d1b      	lsrs	r3, r3, #20
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	431a      	orrs	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0318 	and.w	r3, r3, #24
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df0:	40d9      	lsrs	r1, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	400b      	ands	r3, r1
 8001df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	0007ffff 	.word	0x0007ffff

08001e14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6093      	str	r3, [r2, #8]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e4c:	d101      	bne.n	8001e52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e9c:	d101      	bne.n	8001ea2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <LL_ADC_IsEnabled+0x18>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_ADC_IsEnabled+0x1a>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d101      	bne.n	8001eee <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d101      	bne.n	8001f14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e12f      	b.n	800219e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d109      	bne.n	8001f60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff f91d 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff67 	bl	8001e38 <LL_ADC_IsDeepPowerDownEnabled>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff4d 	bl	8001e14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff82 	bl	8001e88 <LL_ADC_IsInternalRegulatorEnabled>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d115      	bne.n	8001fb6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff66 	bl	8001e60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f94:	4b84      	ldr	r3, [pc, #528]	; (80021a8 <HAL_ADC_Init+0x284>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	4a84      	ldr	r2, [pc, #528]	; (80021ac <HAL_ADC_Init+0x288>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa8:	e002      	b.n	8001fb0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f9      	bne.n	8001faa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff64 	bl	8001e88 <LL_ADC_IsInternalRegulatorEnabled>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10d      	bne.n	8001fe2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f043 0210 	orr.w	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff75 	bl	8001ed6 <LL_ADC_REG_IsConversionOngoing>
 8001fec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 80c8 	bne.w	800218c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 80c4 	bne.w	800218c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800200c:	f043 0202 	orr.w	r2, r3, #2
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff49 	bl	8001eb0 <LL_ADC_IsEnabled>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10b      	bne.n	800203c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002024:	4862      	ldr	r0, [pc, #392]	; (80021b0 <HAL_ADC_Init+0x28c>)
 8002026:	f7ff ff43 	bl	8001eb0 <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4619      	mov	r1, r3
 8002036:	485f      	ldr	r0, [pc, #380]	; (80021b4 <HAL_ADC_Init+0x290>)
 8002038:	f7ff fdd4 	bl	8001be4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7e5b      	ldrb	r3, [r3, #25]
 8002040:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002046:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800204c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002052:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d106      	bne.n	8002078 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	3b01      	subs	r3, #1
 8002070:	045b      	lsls	r3, r3, #17
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_ADC_Init+0x294>)
 800209c:	4013      	ands	r3, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	69b9      	ldr	r1, [r7, #24]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff12 	bl	8001ed6 <LL_ADC_REG_IsConversionOngoing>
 80020b2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff1f 	bl	8001efc <LL_ADC_INJ_IsConversionOngoing>
 80020be:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d140      	bne.n	8002148 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d13d      	bne.n	8002148 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	7e1b      	ldrb	r3, [r3, #24]
 80020d4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020d6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020de:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ee:	f023 0306 	bic.w	r3, r3, #6
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002102:	2b01      	cmp	r3, #1
 8002104:	d118      	bne.n	8002138 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002128:	430a      	orrs	r2, r1
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	e007      	b.n	8002148 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10c      	bne.n	800216a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f023 010f 	bic.w	r1, r3, #15
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	1e5a      	subs	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
 8002168:	e007      	b.n	800217a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 020f 	bic.w	r2, r2, #15
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	; 0x58
 800218a:	e007      	b.n	800219c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f043 0210 	orr.w	r2, r3, #16
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800219c:	7ffb      	ldrb	r3, [r7, #31]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000000 	.word	0x20000000
 80021ac:	053e2d63 	.word	0x053e2d63
 80021b0:	50040000 	.word	0x50040000
 80021b4:	50040300 	.word	0x50040300
 80021b8:	fff0c007 	.word	0xfff0c007

080021bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b0b6      	sub	sp, #216	; 0xd8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x22>
 80021da:	2302      	movs	r3, #2
 80021dc:	e3d5      	b.n	800298a <HAL_ADC_ConfigChannel+0x7ce>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fe73 	bl	8001ed6 <LL_ADC_REG_IsConversionOngoing>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 83ba 	bne.w	800296c <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d824      	bhi.n	800224a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	3b02      	subs	r3, #2
 8002206:	2b03      	cmp	r3, #3
 8002208:	d81b      	bhi.n	8002242 <HAL_ADC_ConfigChannel+0x86>
 800220a:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <HAL_ADC_ConfigChannel+0x54>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002221 	.word	0x08002221
 8002214:	08002229 	.word	0x08002229
 8002218:	08002231 	.word	0x08002231
 800221c:	08002239 	.word	0x08002239
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	220c      	movs	r2, #12
 8002224:	605a      	str	r2, [r3, #4]
          break;
 8002226:	e011      	b.n	800224c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2212      	movs	r2, #18
 800222c:	605a      	str	r2, [r3, #4]
          break;
 800222e:	e00d      	b.n	800224c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2218      	movs	r2, #24
 8002234:	605a      	str	r2, [r3, #4]
          break;
 8002236:	e009      	b.n	800224c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223e:	605a      	str	r2, [r3, #4]
          break;
 8002240:	e004      	b.n	800224c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2206      	movs	r2, #6
 8002246:	605a      	str	r2, [r3, #4]
          break;
 8002248:	e000      	b.n	800224c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800224a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	f7ff fd5f 	bl	8001d1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fe37 	bl	8001ed6 <LL_ADC_REG_IsConversionOngoing>
 8002268:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fe43 	bl	8001efc <LL_ADC_INJ_IsConversionOngoing>
 8002276:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800227a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 81c1 	bne.w	8002606 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 81bc 	bne.w	8002606 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002296:	d10f      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2200      	movs	r2, #0
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7ff fd66 	bl	8001d74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fd20 	bl	8001cf6 <LL_ADC_SetSamplingTimeCommonConfig>
 80022b6:	e00e      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6819      	ldr	r1, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	461a      	mov	r2, r3
 80022c6:	f7ff fd55 	bl	8001d74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fd10 	bl	8001cf6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	08db      	lsrs	r3, r3, #3
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d00a      	beq.n	800230e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6919      	ldr	r1, [r3, #16]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002308:	f7ff fca0 	bl	8001c4c <LL_ADC_SetOffset>
 800230c:	e17b      	b.n	8002606 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fcbd 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <HAL_ADC_ConfigChannel+0x17e>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fcb2 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	0e9b      	lsrs	r3, r3, #26
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	e01e      	b.n	8002378 <HAL_ADC_ConfigChannel+0x1bc>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fca7 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002358:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800235c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e004      	b.n	8002376 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800236c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x1d4>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	e018      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x206>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e004      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80023b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023bc:	fab3 f383 	clz	r3, r3
 80023c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d106      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fc76 	bl	8001cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fc5a 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x244>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2101      	movs	r1, #1
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fc4f 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	f003 021f 	and.w	r2, r3, #31
 80023fe:	e01e      	b.n	800243e <HAL_ADC_ConfigChannel+0x282>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fc44 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800241e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e004      	b.n	800243c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x29a>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	e018      	b.n	8002488 <HAL_ADC_ConfigChannel+0x2cc>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800246a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800246e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002472:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e004      	b.n	8002488 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800247e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002488:	429a      	cmp	r2, r3
 800248a:	d106      	bne.n	800249a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2200      	movs	r2, #0
 8002492:	2101      	movs	r1, #1
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fc13 	bl	8001cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2102      	movs	r1, #2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fbf7 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x30a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2102      	movs	r1, #2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fbec 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	f003 021f 	and.w	r2, r3, #31
 80024c4:	e01e      	b.n	8002504 <HAL_ADC_ConfigChannel+0x348>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2102      	movs	r1, #2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fbe1 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e004      	b.n	8002502 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80024f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_ADC_ConfigChannel+0x360>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	e016      	b.n	800254a <HAL_ADC_ConfigChannel+0x38e>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800252e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e004      	b.n	800254a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800254a:	429a      	cmp	r2, r3
 800254c:	d106      	bne.n	800255c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2200      	movs	r2, #0
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fbb2 	bl	8001cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2103      	movs	r1, #3
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fb96 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x3cc>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2103      	movs	r1, #3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fb8b 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	f003 021f 	and.w	r2, r3, #31
 8002586:	e017      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x3fc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2103      	movs	r1, #3
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fb80 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80025aa:	2320      	movs	r3, #32
 80025ac:	e003      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80025ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x414>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	e011      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x438>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80025e8:	2320      	movs	r3, #32
 80025ea:	e003      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80025ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d106      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2200      	movs	r2, #0
 80025fe:	2103      	movs	r1, #3
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fb5d 	bl	8001cc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fc50 	bl	8001eb0 <LL_ADC_IsEnabled>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 8140 	bne.w	8002898 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	461a      	mov	r2, r3
 8002626:	f7ff fbd1 	bl	8001dcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4a8f      	ldr	r2, [pc, #572]	; (800286c <HAL_ADC_ConfigChannel+0x6b0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	f040 8131 	bne.w	8002898 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <HAL_ADC_ConfigChannel+0x4a2>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	0e9b      	lsrs	r3, r3, #26
 800264c:	3301      	adds	r3, #1
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2b09      	cmp	r3, #9
 8002654:	bf94      	ite	ls
 8002656:	2301      	movls	r3, #1
 8002658:	2300      	movhi	r3, #0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	e019      	b.n	8002692 <HAL_ADC_ConfigChannel+0x4d6>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800266c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800266e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002676:	2320      	movs	r3, #32
 8002678:	e003      	b.n	8002682 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800267a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	3301      	adds	r3, #1
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2b09      	cmp	r3, #9
 800268a:	bf94      	ite	ls
 800268c:	2301      	movls	r3, #1
 800268e:	2300      	movhi	r3, #0
 8002690:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002692:	2b00      	cmp	r3, #0
 8002694:	d079      	beq.n	800278a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x4f6>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0e9b      	lsrs	r3, r3, #26
 80026a8:	3301      	adds	r3, #1
 80026aa:	069b      	lsls	r3, r3, #26
 80026ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026b0:	e015      	b.n	80026de <HAL_ADC_ConfigChannel+0x522>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	069b      	lsls	r3, r3, #26
 80026da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x542>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	3301      	adds	r3, #1
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2101      	movs	r1, #1
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	e017      	b.n	800272e <HAL_ADC_ConfigChannel+0x572>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800270c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002716:	2320      	movs	r3, #32
 8002718:	e003      	b.n	8002722 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800271a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2101      	movs	r1, #1
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	ea42 0103 	orr.w	r1, r2, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x598>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	3301      	adds	r3, #1
 8002746:	f003 021f 	and.w	r2, r3, #31
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	051b      	lsls	r3, r3, #20
 8002752:	e018      	b.n	8002786 <HAL_ADC_ConfigChannel+0x5ca>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	e003      	b.n	8002778 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	3301      	adds	r3, #1
 800277a:	f003 021f 	and.w	r2, r3, #31
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002786:	430b      	orrs	r3, r1
 8002788:	e081      	b.n	800288e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x5ea>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e9b      	lsrs	r3, r3, #26
 800279c:	3301      	adds	r3, #1
 800279e:	069b      	lsls	r3, r3, #26
 80027a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a4:	e015      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x616>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80027be:	2320      	movs	r3, #32
 80027c0:	e003      	b.n	80027ca <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	069b      	lsls	r3, r3, #26
 80027ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x636>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	3301      	adds	r3, #1
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	e017      	b.n	8002822 <HAL_ADC_ConfigChannel+0x666>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	61fb      	str	r3, [r7, #28]
  return result;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e003      	b.n	8002816 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3301      	adds	r3, #1
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	ea42 0103 	orr.w	r1, r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10d      	bne.n	800284e <HAL_ADC_ConfigChannel+0x692>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	3301      	adds	r3, #1
 800283a:	f003 021f 	and.w	r2, r3, #31
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	3b1e      	subs	r3, #30
 8002846:	051b      	lsls	r3, r3, #20
 8002848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800284c:	e01e      	b.n	800288c <HAL_ADC_ConfigChannel+0x6d0>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	613b      	str	r3, [r7, #16]
  return result;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d104      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e006      	b.n	8002878 <HAL_ADC_ConfigChannel+0x6bc>
 800286a:	bf00      	nop
 800286c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	3301      	adds	r3, #1
 800287a:	f003 021f 	and.w	r2, r3, #31
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	3b1e      	subs	r3, #30
 8002886:	051b      	lsls	r3, r3, #20
 8002888:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800288c:	430b      	orrs	r3, r1
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	6892      	ldr	r2, [r2, #8]
 8002892:	4619      	mov	r1, r3
 8002894:	f7ff fa6e 	bl	8001d74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_ADC_ConfigChannel+0x7d8>)
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d06c      	beq.n	800297e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028a4:	483c      	ldr	r0, [pc, #240]	; (8002998 <HAL_ADC_ConfigChannel+0x7dc>)
 80028a6:	f7ff f9c3 	bl	8001c30 <LL_ADC_GetCommonPathInternalCh>
 80028aa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3a      	ldr	r2, [pc, #232]	; (800299c <HAL_ADC_ConfigChannel+0x7e0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d127      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d121      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a35      	ldr	r2, [pc, #212]	; (80029a0 <HAL_ADC_ConfigChannel+0x7e4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d157      	bne.n	800297e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028d6:	4619      	mov	r1, r3
 80028d8:	482f      	ldr	r0, [pc, #188]	; (8002998 <HAL_ADC_ConfigChannel+0x7dc>)
 80028da:	f7ff f996 	bl	8001c0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_ADC_ConfigChannel+0x7e8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	099b      	lsrs	r3, r3, #6
 80028e4:	4a30      	ldr	r2, [pc, #192]	; (80029a8 <HAL_ADC_ConfigChannel+0x7ec>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	099b      	lsrs	r3, r3, #6
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028f8:	e002      	b.n	8002900 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f9      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002906:	e03a      	b.n	800297e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a27      	ldr	r2, [pc, #156]	; (80029ac <HAL_ADC_ConfigChannel+0x7f0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d113      	bne.n	800293a <HAL_ADC_ConfigChannel+0x77e>
 8002912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d12a      	bne.n	800297e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800292c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002930:	4619      	mov	r1, r3
 8002932:	4819      	ldr	r0, [pc, #100]	; (8002998 <HAL_ADC_ConfigChannel+0x7dc>)
 8002934:	f7ff f969 	bl	8001c0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002938:	e021      	b.n	800297e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d11c      	bne.n	800297e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d116      	bne.n	800297e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d111      	bne.n	800297e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800295a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800295e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002962:	4619      	mov	r1, r3
 8002964:	480c      	ldr	r0, [pc, #48]	; (8002998 <HAL_ADC_ConfigChannel+0x7dc>)
 8002966:	f7ff f950 	bl	8001c0a <LL_ADC_SetCommonPathInternalCh>
 800296a:	e008      	b.n	800297e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002986:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800298a:	4618      	mov	r0, r3
 800298c:	37d8      	adds	r7, #216	; 0xd8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	80080000 	.word	0x80080000
 8002998:	50040300 	.word	0x50040300
 800299c:	c7520000 	.word	0xc7520000
 80029a0:	50040000 	.word	0x50040000
 80029a4:	20000000 	.word	0x20000000
 80029a8:	053e2d63 	.word	0x053e2d63
 80029ac:	cb840000 	.word	0xcb840000
 80029b0:	80000001 	.word	0x80000001

080029b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d0:	4013      	ands	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e6:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	60d3      	str	r3, [r2, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <__NVIC_GetPriorityGrouping+0x18>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0307 	and.w	r3, r3, #7
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0b      	blt.n	8002a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	4907      	ldr	r1, [pc, #28]	; (8002a50 <__NVIC_EnableIRQ+0x38>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2001      	movs	r0, #1
 8002a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	; (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
         );
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7ff ff8e 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff29 	bl	80029b4 <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b7c:	f7ff ff3e 	bl	80029fc <__NVIC_GetPriorityGrouping>
 8002b80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff ff8e 	bl	8002aa8 <NVIC_EncodePriority>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff5d 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff31 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffa2 	bl	8002b10 <SysTick_Config>
 8002bcc:	4603      	mov	r3, r0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0ac      	b.n	8002d44 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f8b2 	bl	8002d58 <DFSDM_GetChannelFromInstance>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4a55      	ldr	r2, [pc, #340]	; (8002d4c <HAL_DFSDM_ChannelInit+0x174>)
 8002bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e09f      	b.n	8002d44 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7fe fb01 	bl	800120c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002c0a:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_DFSDM_ChannelInit+0x178>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <HAL_DFSDM_ChannelInit+0x178>)
 8002c12:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002c14:	4b4e      	ldr	r3, [pc, #312]	; (8002d50 <HAL_DFSDM_ChannelInit+0x178>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d125      	bne.n	8002c68 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002c1c:	4b4d      	ldr	r3, [pc, #308]	; (8002d54 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a4c      	ldr	r2, [pc, #304]	; (8002d54 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c26:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002c28:	4b4a      	ldr	r3, [pc, #296]	; (8002d54 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4948      	ldr	r1, [pc, #288]	; (8002d54 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a46      	ldr	r2, [pc, #280]	; (8002d54 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c3c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002c40:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	791b      	ldrb	r3, [r3, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d108      	bne.n	8002c5c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002c4a:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	493f      	ldr	r1, [pc, #252]	; (8002d54 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002c5c:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a3c      	ldr	r2, [pc, #240]	; (8002d54 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c66:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002c76:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6819      	ldr	r1, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c86:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c8c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 020f 	bic.w	r2, r2, #15
 8002ca4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002ccc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f002 0207 	and.w	r2, r2, #7
 8002cf8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d24:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f810 	bl	8002d58 <DFSDM_GetChannelFromInstance>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4904      	ldr	r1, [pc, #16]	; (8002d4c <HAL_DFSDM_ChannelInit+0x174>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000030 	.word	0x20000030
 8002d50:	2000002c 	.word	0x2000002c
 8002d54:	40016000 	.word	0x40016000

08002d58 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <DFSDM_GetChannelFromInstance+0x7c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d102      	bne.n	8002d6e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e02b      	b.n	8002dc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <DFSDM_GetChannelFromInstance+0x80>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d102      	bne.n	8002d7c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002d76:	2301      	movs	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e024      	b.n	8002dc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <DFSDM_GetChannelFromInstance+0x84>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d102      	bne.n	8002d8a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002d84:	2302      	movs	r3, #2
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e01d      	b.n	8002dc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <DFSDM_GetChannelFromInstance+0x88>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d102      	bne.n	8002d98 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002d92:	2304      	movs	r3, #4
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	e016      	b.n	8002dc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <DFSDM_GetChannelFromInstance+0x8c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d102      	bne.n	8002da6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002da0:	2305      	movs	r3, #5
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e00f      	b.n	8002dc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <DFSDM_GetChannelFromInstance+0x90>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d102      	bne.n	8002db4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002dae:	2306      	movs	r3, #6
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e008      	b.n	8002dc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <DFSDM_GetChannelFromInstance+0x94>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d102      	bne.n	8002dc2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002dbc:	2307      	movs	r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e001      	b.n	8002dc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40016000 	.word	0x40016000
 8002dd8:	40016020 	.word	0x40016020
 8002ddc:	40016040 	.word	0x40016040
 8002de0:	40016080 	.word	0x40016080
 8002de4:	400160a0 	.word	0x400160a0
 8002de8:	400160c0 	.word	0x400160c0
 8002dec:	400160e0 	.word	0x400160e0

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfe:	e166      	b.n	80030ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8158 	beq.w	80030c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d005      	beq.n	8002e30 <HAL_GPIO_Init+0x40>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d130      	bne.n	8002e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e66:	2201      	movs	r2, #1
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 0201 	and.w	r2, r3, #1
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d017      	beq.n	8002ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d123      	bne.n	8002f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	6939      	ldr	r1, [r7, #16]
 8002f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0203 	and.w	r2, r3, #3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80b2 	beq.w	80030c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_GPIO_Init+0x2fc>)
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	4a60      	ldr	r2, [pc, #384]	; (80030ec <HAL_GPIO_Init+0x2fc>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6613      	str	r3, [r2, #96]	; 0x60
 8002f70:	4b5e      	ldr	r3, [pc, #376]	; (80030ec <HAL_GPIO_Init+0x2fc>)
 8002f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f7c:	4a5c      	ldr	r2, [pc, #368]	; (80030f0 <HAL_GPIO_Init+0x300>)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	220f      	movs	r2, #15
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fa6:	d02b      	beq.n	8003000 <HAL_GPIO_Init+0x210>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a52      	ldr	r2, [pc, #328]	; (80030f4 <HAL_GPIO_Init+0x304>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d025      	beq.n	8002ffc <HAL_GPIO_Init+0x20c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a51      	ldr	r2, [pc, #324]	; (80030f8 <HAL_GPIO_Init+0x308>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d01f      	beq.n	8002ff8 <HAL_GPIO_Init+0x208>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a50      	ldr	r2, [pc, #320]	; (80030fc <HAL_GPIO_Init+0x30c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d019      	beq.n	8002ff4 <HAL_GPIO_Init+0x204>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a4f      	ldr	r2, [pc, #316]	; (8003100 <HAL_GPIO_Init+0x310>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <HAL_GPIO_Init+0x200>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a4e      	ldr	r2, [pc, #312]	; (8003104 <HAL_GPIO_Init+0x314>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00d      	beq.n	8002fec <HAL_GPIO_Init+0x1fc>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a4d      	ldr	r2, [pc, #308]	; (8003108 <HAL_GPIO_Init+0x318>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <HAL_GPIO_Init+0x1f8>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a4c      	ldr	r2, [pc, #304]	; (800310c <HAL_GPIO_Init+0x31c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_GPIO_Init+0x1f4>
 8002fe0:	2307      	movs	r3, #7
 8002fe2:	e00e      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	e00c      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002fe8:	2306      	movs	r3, #6
 8002fea:	e00a      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002fec:	2305      	movs	r3, #5
 8002fee:	e008      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	e006      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e004      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e002      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_GPIO_Init+0x212>
 8003000:	2300      	movs	r3, #0
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	f002 0203 	and.w	r2, r2, #3
 8003008:	0092      	lsls	r2, r2, #2
 800300a:	4093      	lsls	r3, r2
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003012:	4937      	ldr	r1, [pc, #220]	; (80030f0 <HAL_GPIO_Init+0x300>)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3302      	adds	r3, #2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003020:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <HAL_GPIO_Init+0x320>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003044:	4a32      	ldr	r2, [pc, #200]	; (8003110 <HAL_GPIO_Init+0x320>)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800304a:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_GPIO_Init+0x320>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	43db      	mvns	r3, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4013      	ands	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800306e:	4a28      	ldr	r2, [pc, #160]	; (8003110 <HAL_GPIO_Init+0x320>)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003074:	4b26      	ldr	r3, [pc, #152]	; (8003110 <HAL_GPIO_Init+0x320>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003098:	4a1d      	ldr	r2, [pc, #116]	; (8003110 <HAL_GPIO_Init+0x320>)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800309e:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_GPIO_Init+0x320>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030c2:	4a13      	ldr	r2, [pc, #76]	; (8003110 <HAL_GPIO_Init+0x320>)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	3301      	adds	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f47f ae91 	bne.w	8002e00 <HAL_GPIO_Init+0x10>
  }
}
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40010000 	.word	0x40010000
 80030f4:	48000400 	.word	0x48000400
 80030f8:	48000800 	.word	0x48000800
 80030fc:	48000c00 	.word	0x48000c00
 8003100:	48001000 	.word	0x48001000
 8003104:	48001400 	.word	0x48001400
 8003108:	48001800 	.word	0x48001800
 800310c:	48001c00 	.word	0x48001c00
 8003110:	40010400 	.word	0x40010400

08003114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]
 8003120:	4613      	mov	r3, r2
 8003122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003124:	787b      	ldrb	r3, [r7, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800312a:	887a      	ldrh	r2, [r7, #2]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003130:	e002      	b.n	8003138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003132:	887a      	ldrh	r2, [r7, #2]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d006      	beq.n	8003168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800315a:	4a05      	ldr	r2, [pc, #20]	; (8003170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f806 	bl	8003174 <HAL_GPIO_EXTI_Callback>
  }
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40010400 	.word	0x40010400

08003174 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e081      	b.n	80032a0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d106      	bne.n	80031b6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fe f88f 	bl	80012d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2224      	movs	r2, #36	; 0x24
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	e006      	b.n	8003212 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003210:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d104      	bne.n	8003224 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003222:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003236:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003246:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69d9      	ldr	r1, [r3, #28]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1a      	ldr	r2, [r3, #32]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d138      	bne.n	8003330 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e032      	b.n	8003332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800333e:	b480      	push	{r7}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b20      	cmp	r3, #32
 8003352:	d139      	bne.n	80033c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800335e:	2302      	movs	r3, #2
 8003360:	e033      	b.n	80033ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2224      	movs	r2, #36	; 0x24
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0201 	bic.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003390:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af02      	add	r7, sp, #8
 80033de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80033e4:	f7fe fbce 	bl	8001b84 <HAL_GetTick>
 80033e8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	e08f      	b.n	8003516 <HAL_OSPI_Init+0x13e>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	2b00      	cmp	r3, #0
 8003402:	f040 8088 	bne.w	8003516 <HAL_OSPI_Init+0x13e>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe f806 	bl	8001418 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800340c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f887 	bl	8003524 <HAL_OSPI_SetTimeout>

     /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1, (OCTOSPI_DCR1_MTYP | OCTOSPI_DCR1_DEVSIZE | OCTOSPI_DCR1_CSHT |
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	4b40      	ldr	r3, [pc, #256]	; (8003520 <HAL_OSPI_Init+0x148>)
 800341e:	4013      	ands	r3, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68d1      	ldr	r1, [r2, #12]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6912      	ldr	r2, [r2, #16]
 8003428:	3a01      	subs	r2, #1
 800342a:	0412      	lsls	r2, r2, #16
 800342c:	4311      	orrs	r1, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6952      	ldr	r2, [r2, #20]
 8003432:	3a01      	subs	r2, #1
 8003434:	0212      	lsls	r2, r2, #8
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	69d2      	ldr	r2, [r2, #28]
 800343c:	4311      	orrs	r1, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	430b      	orrs	r3, r1
 8003444:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	0412      	lsls	r2, r2, #16
 8003450:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	3b01      	subs	r3, #1
 8003462:	021a      	lsls	r2, r3, #8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2200      	movs	r2, #0
 8003476:	2120      	movs	r1, #32
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fbb7 	bl	8003bec <OSPI_WaitFlagStateUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d146      	bne.n	8003516 <HAL_OSPI_Init+0x13e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	1e5a      	subs	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034be:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0201 	orr.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d107      	bne.n	80034fe <HAL_OSPI_Init+0x126>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0202 	orr.w	r2, r2, #2
 80034fc:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003506:	d103      	bne.n	8003510 <HAL_OSPI_Init+0x138>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
 800350e:	e002      	b.n	8003516 <HAL_OSPI_Init+0x13e>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	f8e0f8fc 	.word	0xf8e0f8fc

08003524 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b092      	sub	sp, #72	; 0x48
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a08      	ldr	r2, [pc, #32]	; (8003584 <HAL_OSPIM_Config+0x40>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d105      	bne.n	8003572 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003570:	e004      	b.n	800357c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003572:	2301      	movs	r3, #1
 8003574:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800357c:	2300      	movs	r3, #0
 800357e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003582:	e01f      	b.n	80035c4 <HAL_OSPIM_Config+0x80>
 8003584:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003588:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800358c:	3301      	adds	r3, #1
 800358e:	b2d8      	uxtb	r0, r3
 8003590:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003594:	f107 0114 	add.w	r1, r7, #20
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	4619      	mov	r1, r3
 80035a4:	f000 fb5a 	bl	8003c5c <OSPIM_GetConfig>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2208      	movs	r2, #8
 80035b8:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80035ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035be:	3301      	adds	r3, #1
 80035c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80035c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d9dd      	bls.n	8003588 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80035cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 82fe 	bne.w	8003bd2 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80035d6:	4bcd      	ldr	r3, [pc, #820]	; (800390c <HAL_OSPIM_Config+0x3c8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80035e2:	4bca      	ldr	r3, [pc, #808]	; (800390c <HAL_OSPIM_Config+0x3c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4ac9      	ldr	r2, [pc, #804]	; (800390c <HAL_OSPIM_Config+0x3c8>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80035ee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80035fa:	4bc5      	ldr	r3, [pc, #788]	; (8003910 <HAL_OSPIM_Config+0x3cc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003606:	4bc2      	ldr	r3, [pc, #776]	; (8003910 <HAL_OSPIM_Config+0x3cc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4ac1      	ldr	r2, [pc, #772]	; (8003910 <HAL_OSPIM_Config+0x3cc>)
 800360c:	f023 0301 	bic.w	r3, r3, #1
 8003610:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003612:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800361e:	49bd      	ldr	r1, [pc, #756]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 8003620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800362e:	4413      	add	r3, r2
 8003630:	3b2c      	subs	r3, #44	; 0x2c
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3b01      	subs	r3, #1
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	48b5      	ldr	r0, [pc, #724]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 800363e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800364c:	4413      	add	r3, r2
 800364e:	3b2c      	subs	r3, #44	; 0x2c
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3b01      	subs	r3, #1
 8003654:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4403      	add	r3, r0
 800365c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800365e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800366c:	4413      	add	r3, r2
 800366e:	3b34      	subs	r3, #52	; 0x34
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80ac 	beq.w	80037d0 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003678:	49a6      	ldr	r1, [pc, #664]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 800367a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003688:	4413      	add	r3, r2
 800368a:	3b34      	subs	r3, #52	; 0x34
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3b01      	subs	r3, #1
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	489f      	ldr	r0, [pc, #636]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 8003698:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036a6:	4413      	add	r3, r2
 80036a8:	3b34      	subs	r3, #52	; 0x34
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	f021 0201 	bic.w	r2, r1, #1
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4403      	add	r3, r0
 80036b6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80036b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036c6:	4413      	add	r3, r2
 80036c8:	3b30      	subs	r3, #48	; 0x30
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01f      	beq.n	8003710 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80036d0:	4990      	ldr	r1, [pc, #576]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 80036d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036e0:	4413      	add	r3, r2
 80036e2:	3b30      	subs	r3, #48	; 0x30
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	4889      	ldr	r0, [pc, #548]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 80036f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036fe:	4413      	add	r3, r2
 8003700:	3b30      	subs	r3, #48	; 0x30
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3b01      	subs	r3, #1
 8003706:	f021 0210 	bic.w	r2, r1, #16
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4403      	add	r3, r0
 800370e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800371e:	4413      	add	r3, r2
 8003720:	3b28      	subs	r3, #40	; 0x28
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d023      	beq.n	8003770 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003728:	497a      	ldr	r1, [pc, #488]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 800372a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003738:	4413      	add	r3, r2
 800373a:	3b28      	subs	r3, #40	; 0x28
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3b01      	subs	r3, #1
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	4872      	ldr	r0, [pc, #456]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 800374c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800375a:	4413      	add	r3, r2
 800375c:	3b28      	subs	r3, #40	; 0x28
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3b01      	subs	r3, #1
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4403      	add	r3, r0
 800376e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800377e:	4413      	add	r3, r2
 8003780:	3b24      	subs	r3, #36	; 0x24
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d023      	beq.n	80037d0 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003788:	4962      	ldr	r1, [pc, #392]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 800378a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003798:	4413      	add	r3, r2
 800379a:	3b24      	subs	r3, #36	; 0x24
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3b01      	subs	r3, #1
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	485a      	ldr	r0, [pc, #360]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 80037ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037ba:	4413      	add	r3, r2
 80037bc:	3b24      	subs	r3, #36	; 0x24
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4403      	add	r3, r0
 80037ce:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037e4:	4413      	add	r3, r2
 80037e6:	3b34      	subs	r3, #52	; 0x34
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4299      	cmp	r1, r3
 80037ec:	d03c      	beq.n	8003868 <HAL_OSPIM_Config+0x324>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003802:	4413      	add	r3, r2
 8003804:	3b30      	subs	r3, #48	; 0x30
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4299      	cmp	r1, r3
 800380a:	d02d      	beq.n	8003868 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6899      	ldr	r1, [r3, #8]
 8003810:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003820:	4413      	add	r3, r2
 8003822:	3b2c      	subs	r3, #44	; 0x2c
 8003824:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003826:	4299      	cmp	r1, r3
 8003828:	d01e      	beq.n	8003868 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	68d9      	ldr	r1, [r3, #12]
 800382e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800383e:	4413      	add	r3, r2
 8003840:	3b28      	subs	r3, #40	; 0x28
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4299      	cmp	r1, r3
 8003846:	d00f      	beq.n	8003868 <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	6919      	ldr	r1, [r3, #16]
 800384c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800385c:	4413      	add	r3, r2
 800385e:	3b24      	subs	r3, #36	; 0x24
 8003860:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003862:	4299      	cmp	r1, r3
 8003864:	f040 80e0 	bne.w	8003a28 <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003868:	492a      	ldr	r1, [pc, #168]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 800386a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800387a:	4413      	add	r3, r2
 800387c:	3b34      	subs	r3, #52	; 0x34
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3b01      	subs	r3, #1
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	4822      	ldr	r0, [pc, #136]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 800388a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800389a:	4413      	add	r3, r2
 800389c:	3b34      	subs	r3, #52	; 0x34
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	f021 0201 	bic.w	r2, r1, #1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4403      	add	r3, r0
 80038aa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80038ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038bc:	4413      	add	r3, r2
 80038be:	3b30      	subs	r3, #48	; 0x30
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d028      	beq.n	8003918 <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80038c6:	4913      	ldr	r1, [pc, #76]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 80038c8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038d8:	4413      	add	r3, r2
 80038da:	3b30      	subs	r3, #48	; 0x30
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3b01      	subs	r3, #1
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	480b      	ldr	r0, [pc, #44]	; (8003914 <HAL_OSPIM_Config+0x3d0>)
 80038e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038f8:	4413      	add	r3, r2
 80038fa:	3b30      	subs	r3, #48	; 0x30
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3b01      	subs	r3, #1
 8003900:	f021 0210 	bic.w	r2, r1, #16
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4403      	add	r3, r0
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	e005      	b.n	8003918 <HAL_OSPIM_Config+0x3d4>
 800390c:	a0001000 	.word	0xa0001000
 8003910:	a0001400 	.word	0xa0001400
 8003914:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003918:	49b1      	ldr	r1, [pc, #708]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 800391a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800392a:	4413      	add	r3, r2
 800392c:	3b2c      	subs	r3, #44	; 0x2c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3b01      	subs	r3, #1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	48a9      	ldr	r0, [pc, #676]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 800393a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800394a:	4413      	add	r3, r2
 800394c:	3b2c      	subs	r3, #44	; 0x2c
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3b01      	subs	r3, #1
 8003952:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4403      	add	r3, r0
 800395a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800395c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800396c:	4413      	add	r3, r2
 800396e:	3b28      	subs	r3, #40	; 0x28
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d025      	beq.n	80039c2 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003976:	499a      	ldr	r1, [pc, #616]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003978:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003988:	4413      	add	r3, r2
 800398a:	3b28      	subs	r3, #40	; 0x28
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3b01      	subs	r3, #1
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	6859      	ldr	r1, [r3, #4]
 800399a:	4891      	ldr	r0, [pc, #580]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 800399c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80039ac:	4413      	add	r3, r2
 80039ae:	3b28      	subs	r3, #40	; 0x28
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4403      	add	r3, r0
 80039c0:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80039c2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80039d2:	4413      	add	r3, r2
 80039d4:	3b24      	subs	r3, #36	; 0x24
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d025      	beq.n	8003a28 <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80039dc:	4980      	ldr	r1, [pc, #512]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 80039de:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80039ee:	4413      	add	r3, r2
 80039f0:	3b24      	subs	r3, #36	; 0x24
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	4877      	ldr	r0, [pc, #476]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003a02:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a12:	4413      	add	r3, r2
 8003a14:	3b24      	subs	r3, #36	; 0x24
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4403      	add	r3, r0
 8003a26:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003a28:	4a6d      	ldr	r2, [pc, #436]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3c:	025b      	lsls	r3, r3, #9
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	4967      	ldr	r1, [pc, #412]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003a52:	4a63      	ldr	r2, [pc, #396]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f023 0203 	bic.w	r2, r3, #3
 8003a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	495d      	ldr	r1, [pc, #372]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d014      	beq.n	8003aae <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003a84:	4a56      	ldr	r2, [pc, #344]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a98:	015b      	lsls	r3, r3, #5
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	4950      	ldr	r1, [pc, #320]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	f042 0210 	orr.w	r2, r2, #16
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d019      	beq.n	8003aee <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003aba:	4a49      	ldr	r2, [pc, #292]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad2:	049b      	lsls	r3, r3, #18
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	4942      	ldr	r1, [pc, #264]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	e01c      	b.n	8003b28 <HAL_OSPIM_Config+0x5e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003af6:	4a3a      	ldr	r2, [pc, #232]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0e:	069b      	lsls	r3, r3, #26
 8003b10:	431a      	orrs	r2, r3
 8003b12:	4933      	ldr	r1, [pc, #204]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d019      	beq.n	8003b68 <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003b34:	4a2a      	ldr	r2, [pc, #168]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4c:	049b      	lsls	r3, r3, #18
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	4923      	ldr	r1, [pc, #140]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	e01c      	b.n	8003ba2 <HAL_OSPIM_Config+0x65e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d018      	beq.n	8003ba2 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b88:	069b      	lsls	r3, r3, #26
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	4914      	ldr	r1, [pc, #80]	; (8003be0 <HAL_OSPIM_Config+0x69c>)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003ba2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003bae:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <HAL_OSPIM_Config+0x6a0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <HAL_OSPIM_Config+0x6a0>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003bba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_OSPIM_Config+0x6a4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a07      	ldr	r2, [pc, #28]	; (8003be8 <HAL_OSPIM_Config+0x6a4>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003bd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3748      	adds	r7, #72	; 0x48
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	50061c00 	.word	0x50061c00
 8003be4:	a0001000 	.word	0xa0001000
 8003be8:	a0001400 	.word	0xa0001400

08003bec <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003bfc:	e01a      	b.n	8003c34 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d016      	beq.n	8003c34 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7fd ffbd 	bl	8001b84 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c22:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	f043 0201 	orr.w	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e00e      	b.n	8003c52 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6a1a      	ldr	r2, [r3, #32]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf14      	ite	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	2300      	moveq	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d1d6      	bne.n	8003bfe <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <OSPIM_GetConfig+0x26>
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d802      	bhi.n	8003c82 <OSPIM_GetConfig+0x26>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	75fb      	strb	r3, [r7, #23]
 8003c86:	e08e      	b.n	8003da6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d101      	bne.n	8003cb0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003cac:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <OSPIM_GetConfig+0x158>)
 8003cae:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e074      	b.n	8003da0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003cb6:	4a40      	ldr	r2, [pc, #256]	; (8003db8 <OSPIM_GetConfig+0x15c>)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4053      	eors	r3, r2
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4053      	eors	r3, r2
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d103      	bne.n	8003d02 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4053      	eors	r3, r2
 8003d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d018      	beq.n	8003d5e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4053      	eors	r3, r2
 8003d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d111      	bne.n	8003d5e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3301      	adds	r3, #1
 8003d48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	e005      	b.n	8003d5e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3301      	adds	r3, #1
 8003d56:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d018      	beq.n	8003d9a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4053      	eors	r3, r2
 8003d6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d111      	bne.n	8003d9a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
 8003d84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	611a      	str	r2, [r3, #16]
 8003d8c:	e005      	b.n	8003d9a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3301      	adds	r3, #1
 8003d92:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d987      	bls.n	8003cb6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	04040222 	.word	0x04040222
 8003db8:	50061c00 	.word	0x50061c00

08003dbc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dca:	6013      	str	r3, [r2, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40007000 	.word	0x40007000

08003ddc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003de0:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dec:	d102      	bne.n	8003df4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003df2:	e00b      	b.n	8003e0c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e02:	d102      	bne.n	8003e0a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e08:	e000      	b.n	8003e0c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003e0a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40007000 	.word	0x40007000

08003e1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d141      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e2a:	4b4b      	ldr	r3, [pc, #300]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e36:	d131      	bne.n	8003e9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e38:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3e:	4a46      	ldr	r2, [pc, #280]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e48:	4b43      	ldr	r3, [pc, #268]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e50:	4a41      	ldr	r2, [pc, #260]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e58:	4b40      	ldr	r3, [pc, #256]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2232      	movs	r2, #50	; 0x32
 8003e5e:	fb02 f303 	mul.w	r3, r2, r3
 8003e62:	4a3f      	ldr	r2, [pc, #252]	; (8003f60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e64:	fba2 2303 	umull	r2, r3, r2, r3
 8003e68:	0c9b      	lsrs	r3, r3, #18
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e6e:	e002      	b.n	8003e76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e76:	4b38      	ldr	r3, [pc, #224]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e82:	d102      	bne.n	8003e8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f2      	bne.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e8a:	4b33      	ldr	r3, [pc, #204]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e96:	d158      	bne.n	8003f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e057      	b.n	8003f4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e9c:	4b2e      	ldr	r3, [pc, #184]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea2:	4a2d      	ldr	r2, [pc, #180]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003eac:	e04d      	b.n	8003f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb4:	d141      	bne.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eb6:	4b28      	ldr	r3, [pc, #160]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec2:	d131      	bne.n	8003f28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec4:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eca:	4a23      	ldr	r2, [pc, #140]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ed4:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003edc:	4a1e      	ldr	r2, [pc, #120]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2232      	movs	r2, #50	; 0x32
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	0c9b      	lsrs	r3, r3, #18
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003efa:	e002      	b.n	8003f02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d102      	bne.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f2      	bne.n	8003efc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f22:	d112      	bne.n	8003f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e011      	b.n	8003f4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f38:	e007      	b.n	8003f4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f42:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f48:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	40007000 	.word	0x40007000
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	431bde83 	.word	0x431bde83

08003f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d102      	bne.n	8003f78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f000 bc16 	b.w	80047a4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f78:	4ba0      	ldr	r3, [pc, #640]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f82:	4b9e      	ldr	r3, [pc, #632]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80e4 	beq.w	8004162 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x4c>
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	f040 808b 	bne.w	80040be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	f040 8087 	bne.w	80040be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fb0:	4b92      	ldr	r3, [pc, #584]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x64>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e3ed      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	4b8b      	ldr	r3, [pc, #556]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x7e>
 8003fd8:	4b88      	ldr	r3, [pc, #544]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe0:	e005      	b.n	8003fee <HAL_RCC_OscConfig+0x8a>
 8003fe2:	4b86      	ldr	r3, [pc, #536]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8003fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d223      	bcs.n	800403a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fdca 	bl	8004b90 <RCC_SetFlashLatencyFromMSIRange>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e3ce      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004006:	4b7d      	ldr	r3, [pc, #500]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a7c      	ldr	r2, [pc, #496]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 800400c:	f043 0308 	orr.w	r3, r3, #8
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	4b7a      	ldr	r3, [pc, #488]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4977      	ldr	r1, [pc, #476]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004020:	4313      	orrs	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004024:	4b75      	ldr	r3, [pc, #468]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	4972      	ldr	r1, [pc, #456]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
 8004038:	e025      	b.n	8004086 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800403a:	4b70      	ldr	r3, [pc, #448]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a6f      	ldr	r2, [pc, #444]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004040:	f043 0308 	orr.w	r3, r3, #8
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b6d      	ldr	r3, [pc, #436]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	496a      	ldr	r1, [pc, #424]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004058:	4b68      	ldr	r3, [pc, #416]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	4965      	ldr	r1, [pc, #404]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004068:	4313      	orrs	r3, r2
 800406a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fd8a 	bl	8004b90 <RCC_SetFlashLatencyFromMSIRange>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e38e      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004086:	f000 fcbf 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b5b      	ldr	r3, [pc, #364]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	495a      	ldr	r1, [pc, #360]	; (8004200 <HAL_RCC_OscConfig+0x29c>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	4a58      	ldr	r2, [pc, #352]	; (8004204 <HAL_RCC_OscConfig+0x2a0>)
 80040a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040a6:	4b58      	ldr	r3, [pc, #352]	; (8004208 <HAL_RCC_OscConfig+0x2a4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fd fd1a 	bl	8001ae4 <HAL_InitTick>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d052      	beq.n	8004160 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	e372      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d032      	beq.n	800412c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040c6:	4b4d      	ldr	r3, [pc, #308]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a4c      	ldr	r2, [pc, #304]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040d2:	f7fd fd57 	bl	8001b84 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040da:	f7fd fd53 	bl	8001b84 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e35b      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040ec:	4b43      	ldr	r3, [pc, #268]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040f8:	4b40      	ldr	r3, [pc, #256]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a3f      	ldr	r2, [pc, #252]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80040fe:	f043 0308 	orr.w	r3, r3, #8
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	493a      	ldr	r1, [pc, #232]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004116:	4b39      	ldr	r3, [pc, #228]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	4935      	ldr	r1, [pc, #212]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004126:	4313      	orrs	r3, r2
 8004128:	604b      	str	r3, [r1, #4]
 800412a:	e01a      	b.n	8004162 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a32      	ldr	r2, [pc, #200]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004138:	f7fd fd24 	bl	8001b84 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004140:	f7fd fd20 	bl	8001b84 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e328      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004152:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x1dc>
 800415e:	e000      	b.n	8004162 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004160:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d073      	beq.n	8004256 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d005      	beq.n	8004180 <HAL_RCC_OscConfig+0x21c>
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b0c      	cmp	r3, #12
 8004178:	d10e      	bne.n	8004198 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d10b      	bne.n	8004198 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d063      	beq.n	8004254 <HAL_RCC_OscConfig+0x2f0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d15f      	bne.n	8004254 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e305      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x24c>
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a15      	ldr	r2, [pc, #84]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e01d      	b.n	80041ec <HAL_RCC_OscConfig+0x288>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x270>
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a0f      	ldr	r2, [pc, #60]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0x288>
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a08      	ldr	r2, [pc, #32]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80041da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a05      	ldr	r2, [pc, #20]	; (80041fc <HAL_RCC_OscConfig+0x298>)
 80041e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01b      	beq.n	800422c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fd fcc6 	bl	8001b84 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041fa:	e010      	b.n	800421e <HAL_RCC_OscConfig+0x2ba>
 80041fc:	40021000 	.word	0x40021000
 8004200:	08007844 	.word	0x08007844
 8004204:	20000000 	.word	0x20000000
 8004208:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800420c:	f7fd fcba 	bl	8001b84 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e2c2      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421e:	4baf      	ldr	r3, [pc, #700]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x2a8>
 800422a:	e014      	b.n	8004256 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd fcaa 	bl	8001b84 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004234:	f7fd fca6 	bl	8001b84 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e2ae      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004246:	4ba5      	ldr	r3, [pc, #660]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x2d0>
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d060      	beq.n	8004324 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d005      	beq.n	8004274 <HAL_RCC_OscConfig+0x310>
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b0c      	cmp	r3, #12
 800426c:	d119      	bne.n	80042a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d116      	bne.n	80042a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004274:	4b99      	ldr	r3, [pc, #612]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_OscConfig+0x328>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e28b      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428c:	4b93      	ldr	r3, [pc, #588]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	4990      	ldr	r1, [pc, #576]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a0:	e040      	b.n	8004324 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d023      	beq.n	80042f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042aa:	4b8c      	ldr	r3, [pc, #560]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a8b      	ldr	r2, [pc, #556]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80042b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b6:	f7fd fc65 	bl	8001b84 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042be:	f7fd fc61 	bl	8001b84 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e269      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d0:	4b82      	ldr	r3, [pc, #520]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042dc:	4b7f      	ldr	r3, [pc, #508]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	061b      	lsls	r3, r3, #24
 80042ea:	497c      	ldr	r1, [pc, #496]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
 80042f0:	e018      	b.n	8004324 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042f2:	4b7a      	ldr	r3, [pc, #488]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a79      	ldr	r2, [pc, #484]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80042f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fd fc41 	bl	8001b84 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004306:	f7fd fc3d 	bl	8001b84 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e245      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004318:	4b70      	ldr	r3, [pc, #448]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d03c      	beq.n	80043aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01c      	beq.n	8004372 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004338:	4b68      	ldr	r3, [pc, #416]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800433a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433e:	4a67      	ldr	r2, [pc, #412]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004348:	f7fd fc1c 	bl	8001b84 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004350:	f7fd fc18 	bl	8001b84 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e220      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004362:	4b5e      	ldr	r3, [pc, #376]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ef      	beq.n	8004350 <HAL_RCC_OscConfig+0x3ec>
 8004370:	e01b      	b.n	80043aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004372:	4b5a      	ldr	r3, [pc, #360]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004378:	4a58      	ldr	r2, [pc, #352]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7fd fbff 	bl	8001b84 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800438a:	f7fd fbfb 	bl	8001b84 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e203      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800439c:	4b4f      	ldr	r3, [pc, #316]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800439e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1ef      	bne.n	800438a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0304 	and.w	r3, r3, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80a6 	beq.w	8004504 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b8:	2300      	movs	r3, #0
 80043ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043bc:	4b47      	ldr	r3, [pc, #284]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80043be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10d      	bne.n	80043e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c8:	4b44      	ldr	r3, [pc, #272]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	4a43      	ldr	r2, [pc, #268]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80043ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6593      	str	r3, [r2, #88]	; 0x58
 80043d4:	4b41      	ldr	r3, [pc, #260]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e0:	2301      	movs	r3, #1
 80043e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e4:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <HAL_RCC_OscConfig+0x57c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d118      	bne.n	8004422 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f0:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <HAL_RCC_OscConfig+0x57c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a3a      	ldr	r2, [pc, #232]	; (80044e0 <HAL_RCC_OscConfig+0x57c>)
 80043f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fc:	f7fd fbc2 	bl	8001b84 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004404:	f7fd fbbe 	bl	8001b84 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e1c6      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004416:	4b32      	ldr	r3, [pc, #200]	; (80044e0 <HAL_RCC_OscConfig+0x57c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d108      	bne.n	800443c <HAL_RCC_OscConfig+0x4d8>
 800442a:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	4a2a      	ldr	r2, [pc, #168]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800443a:	e024      	b.n	8004486 <HAL_RCC_OscConfig+0x522>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b05      	cmp	r3, #5
 8004442:	d110      	bne.n	8004466 <HAL_RCC_OscConfig+0x502>
 8004444:	4b25      	ldr	r3, [pc, #148]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	4a24      	ldr	r2, [pc, #144]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800444c:	f043 0304 	orr.w	r3, r3, #4
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004454:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	4a20      	ldr	r2, [pc, #128]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004464:	e00f      	b.n	8004486 <HAL_RCC_OscConfig+0x522>
 8004466:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004476:	4b19      	ldr	r3, [pc, #100]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	4a17      	ldr	r2, [pc, #92]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 800447e:	f023 0304 	bic.w	r3, r3, #4
 8004482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d016      	beq.n	80044bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448e:	f7fd fb79 	bl	8001b84 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004494:	e00a      	b.n	80044ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fd fb75 	bl	8001b84 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e17b      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCC_OscConfig+0x578>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0ed      	beq.n	8004496 <HAL_RCC_OscConfig+0x532>
 80044ba:	e01a      	b.n	80044f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fd fb62 	bl	8001b84 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c2:	e00f      	b.n	80044e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fd fb5e 	bl	8001b84 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d906      	bls.n	80044e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e164      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e4:	4ba8      	ldr	r3, [pc, #672]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e8      	bne.n	80044c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f2:	7ffb      	ldrb	r3, [r7, #31]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f8:	4ba3      	ldr	r3, [pc, #652]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	4aa2      	ldr	r2, [pc, #648]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80044fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004502:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d03c      	beq.n	800458a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01c      	beq.n	8004552 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004518:	4b9b      	ldr	r3, [pc, #620]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 800451a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800451e:	4a9a      	ldr	r2, [pc, #616]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fd fb2c 	bl	8001b84 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004530:	f7fd fb28 	bl	8001b84 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e130      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004542:	4b91      	ldr	r3, [pc, #580]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ef      	beq.n	8004530 <HAL_RCC_OscConfig+0x5cc>
 8004550:	e01b      	b.n	800458a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004552:	4b8d      	ldr	r3, [pc, #564]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004554:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004558:	4a8b      	ldr	r2, [pc, #556]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fd fb0f 	bl	8001b84 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800456a:	f7fd fb0b 	bl	8001b84 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e113      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800457c:	4b82      	ldr	r3, [pc, #520]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 800457e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ef      	bne.n	800456a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8107 	beq.w	80047a2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	2b02      	cmp	r3, #2
 800459a:	f040 80cb 	bne.w	8004734 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800459e:	4b7a      	ldr	r3, [pc, #488]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f003 0203 	and.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d12c      	bne.n	800460c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	3b01      	subs	r3, #1
 80045be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d123      	bne.n	800460c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d11b      	bne.n	800460c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d113      	bne.n	800460c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	3b01      	subs	r3, #1
 80045f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d109      	bne.n	800460c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	3b01      	subs	r3, #1
 8004606:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d06d      	beq.n	80046e8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d068      	beq.n	80046e4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004612:	4b5d      	ldr	r3, [pc, #372]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800461e:	4b5a      	ldr	r3, [pc, #360]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e0ba      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800462e:	4b56      	ldr	r3, [pc, #344]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a55      	ldr	r2, [pc, #340]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004638:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800463a:	f7fd faa3 	bl	8001b84 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004642:	f7fd fa9f 	bl	8001b84 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e0a7      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004654:	4b4c      	ldr	r3, [pc, #304]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004660:	4b49      	ldr	r3, [pc, #292]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	4b49      	ldr	r3, [pc, #292]	; (800478c <HAL_RCC_OscConfig+0x828>)
 8004666:	4013      	ands	r3, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004670:	3a01      	subs	r2, #1
 8004672:	0112      	lsls	r2, r2, #4
 8004674:	4311      	orrs	r1, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800467a:	0212      	lsls	r2, r2, #8
 800467c:	4311      	orrs	r1, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004682:	0852      	lsrs	r2, r2, #1
 8004684:	3a01      	subs	r2, #1
 8004686:	0552      	lsls	r2, r2, #21
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800468e:	0852      	lsrs	r2, r2, #1
 8004690:	3a01      	subs	r2, #1
 8004692:	0652      	lsls	r2, r2, #25
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800469a:	06d2      	lsls	r2, r2, #27
 800469c:	430a      	orrs	r2, r1
 800469e:	493a      	ldr	r1, [pc, #232]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046a4:	4b38      	ldr	r3, [pc, #224]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a37      	ldr	r2, [pc, #220]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80046aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046b0:	4b35      	ldr	r3, [pc, #212]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a34      	ldr	r2, [pc, #208]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80046b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046bc:	f7fd fa62 	bl	8001b84 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fd fa5e 	bl	8001b84 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e066      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d6:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046e2:	e05e      	b.n	80047a2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e05d      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e8:	4b27      	ldr	r3, [pc, #156]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d156      	bne.n	80047a2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046f4:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a23      	ldr	r2, [pc, #140]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 80046fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004700:	4b21      	ldr	r3, [pc, #132]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a20      	ldr	r2, [pc, #128]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800470a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800470c:	f7fd fa3a 	bl	8001b84 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004714:	f7fd fa36 	bl	8001b84 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e03e      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	4b18      	ldr	r3, [pc, #96]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x7b0>
 8004732:	e036      	b.n	80047a2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d031      	beq.n	800479e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a12      	ldr	r2, [pc, #72]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004744:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004752:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4a0c      	ldr	r2, [pc, #48]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004758:	f023 0303 	bic.w	r3, r3, #3
 800475c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800475e:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	4a09      	ldr	r2, [pc, #36]	; (8004788 <HAL_RCC_OscConfig+0x824>)
 8004764:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd fa09 	bl	8001b84 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004774:	e00c      	b.n	8004790 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004776:	f7fd fa05 	bl	8001b84 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d905      	bls.n	8004790 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e00d      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
 8004788:	40021000 	.word	0x40021000
 800478c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_RCC_OscConfig+0x848>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ec      	bne.n	8004776 <HAL_RCC_OscConfig+0x812>
 800479c:	e001      	b.n	80047a2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3720      	adds	r7, #32
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021000 	.word	0x40021000

080047b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e10f      	b.n	80049e8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047c8:	4b89      	ldr	r3, [pc, #548]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d910      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d6:	4b86      	ldr	r3, [pc, #536]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 020f 	bic.w	r2, r3, #15
 80047de:	4984      	ldr	r1, [pc, #528]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b82      	ldr	r3, [pc, #520]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0f7      	b.n	80049e8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8089 	beq.w	8004918 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d133      	bne.n	8004876 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480e:	4b79      	ldr	r3, [pc, #484]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e0e4      	b.n	80049e8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800481e:	f000 fa11 	bl	8004c44 <RCC_GetSysClockFreqFromPLLSource>
 8004822:	4603      	mov	r3, r0
 8004824:	4a74      	ldr	r2, [pc, #464]	; (80049f8 <HAL_RCC_ClockConfig+0x248>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d955      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800482a:	4b72      	ldr	r3, [pc, #456]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004836:	4b6f      	ldr	r3, [pc, #444]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483e:	4a6d      	ldr	r2, [pc, #436]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004844:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e044      	b.n	80048d6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d03e      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x126>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d13a      	bne.n	80048d6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004860:	4b64      	ldr	r3, [pc, #400]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004868:	4a62      	ldr	r2, [pc, #392]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 800486a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e02f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d107      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487e:	4b5d      	ldr	r3, [pc, #372]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d115      	bne.n	80048b6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e0ac      	b.n	80049e8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004896:	4b57      	ldr	r3, [pc, #348]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e0a0      	b.n	80049e8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a6:	4b53      	ldr	r3, [pc, #332]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e098      	b.n	80049e8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80048b6:	f000 f8a7 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80048ba:	4603      	mov	r3, r0
 80048bc:	4a4e      	ldr	r2, [pc, #312]	; (80049f8 <HAL_RCC_ClockConfig+0x248>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d909      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048c2:	4b4c      	ldr	r3, [pc, #304]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ca:	4a4a      	ldr	r2, [pc, #296]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80048d2:	2380      	movs	r3, #128	; 0x80
 80048d4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4944      	ldr	r1, [pc, #272]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e8:	f7fd f94c 	bl	8001b84 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	f7fd f948 	bl	8001b84 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e070      	b.n	80049e8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 020c 	and.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	429a      	cmp	r2, r3
 8004916:	d1eb      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d009      	beq.n	8004938 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004924:	4b33      	ldr	r3, [pc, #204]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4930      	ldr	r1, [pc, #192]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
 8004936:	e008      	b.n	800494a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d105      	bne.n	800494a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800493e:	4b2d      	ldr	r3, [pc, #180]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004948:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800494a:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d210      	bcs.n	800497a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004958:	4b25      	ldr	r3, [pc, #148]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f023 020f 	bic.w	r2, r3, #15
 8004960:	4923      	ldr	r1, [pc, #140]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	4313      	orrs	r3, r2
 8004966:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <HAL_RCC_ClockConfig+0x240>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d001      	beq.n	800497a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e036      	b.n	80049e8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004986:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4918      	ldr	r1, [pc, #96]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 8004994:	4313      	orrs	r3, r2
 8004996:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d009      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049a4:	4b13      	ldr	r3, [pc, #76]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4910      	ldr	r1, [pc, #64]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049b8:	f000 f826 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80049bc:	4602      	mov	r2, r0
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <HAL_RCC_ClockConfig+0x244>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	091b      	lsrs	r3, r3, #4
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	490c      	ldr	r1, [pc, #48]	; (80049fc <HAL_RCC_ClockConfig+0x24c>)
 80049ca:	5ccb      	ldrb	r3, [r1, r3]
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
 80049d4:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <HAL_RCC_ClockConfig+0x250>)
 80049d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <HAL_RCC_ClockConfig+0x254>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fd f881 	bl	8001ae4 <HAL_InitTick>
 80049e2:	4603      	mov	r3, r0
 80049e4:	73fb      	strb	r3, [r7, #15]

  return status;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40022000 	.word	0x40022000
 80049f4:	40021000 	.word	0x40021000
 80049f8:	04c4b400 	.word	0x04c4b400
 80049fc:	08007844 	.word	0x08007844
 8004a00:	20000000 	.word	0x20000000
 8004a04:	20000004 	.word	0x20000004

08004a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b089      	sub	sp, #36	; 0x24
 8004a0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a16:	4b3e      	ldr	r3, [pc, #248]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a20:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x34>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d121      	bne.n	8004a7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d11e      	bne.n	8004a7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a48:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4e:	0a1b      	lsrs	r3, r3, #8
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	e005      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a58:	4b2d      	ldr	r3, [pc, #180]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a64:	4a2b      	ldr	r2, [pc, #172]	; (8004b14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10d      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d102      	bne.n	8004a86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a80:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	e004      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d101      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a8c:	4b23      	ldr	r3, [pc, #140]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x114>)
 8004a8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	2b0c      	cmp	r3, #12
 8004a94:	d134      	bne.n	8004b00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a96:	4b1e      	ldr	r3, [pc, #120]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_GetSysClockFreq+0xa6>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d003      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xac>
 8004aac:	e005      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aae:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ab0:	617b      	str	r3, [r7, #20]
      break;
 8004ab2:	e005      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ab6:	617b      	str	r3, [r7, #20]
      break;
 8004ab8:	e002      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	617b      	str	r3, [r7, #20]
      break;
 8004abe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ac0:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	3301      	adds	r3, #1
 8004acc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	fb02 f203 	mul.w	r2, r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ae6:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	0e5b      	lsrs	r3, r3, #25
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	3301      	adds	r3, #1
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b00:	69bb      	ldr	r3, [r7, #24]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3724      	adds	r7, #36	; 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
 8004b14:	0800785c 	.word	0x0800785c
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	007a1200 	.word	0x007a1200

08004b20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b03      	ldr	r3, [pc, #12]	; (8004b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000000 	.word	0x20000000

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b3c:	f7ff fff0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4904      	ldr	r1, [pc, #16]	; (8004b60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	08007854 	.word	0x08007854

08004b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b68:	f7ff ffda 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	0adb      	lsrs	r3, r3, #11
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	4904      	ldr	r1, [pc, #16]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	08007854 	.word	0x08007854

08004b90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b9c:	4b27      	ldr	r3, [pc, #156]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ba8:	f7ff f918 	bl	8003ddc <HAL_PWREx_GetVoltageRange>
 8004bac:	6178      	str	r0, [r7, #20]
 8004bae:	e014      	b.n	8004bda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bb0:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb4:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bba:	6593      	str	r3, [r2, #88]	; 0x58
 8004bbc:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bc8:	f7ff f908 	bl	8003ddc <HAL_PWREx_GetVoltageRange>
 8004bcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bce:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be0:	d10b      	bne.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b80      	cmp	r3, #128	; 0x80
 8004be6:	d913      	bls.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2ba0      	cmp	r3, #160	; 0xa0
 8004bec:	d902      	bls.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bee:	2302      	movs	r3, #2
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e00d      	b.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	613b      	str	r3, [r7, #16]
 8004bf8:	e00a      	b.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8004bfe:	d902      	bls.n	8004c06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004c00:	2302      	movs	r3, #2
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	e004      	b.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b70      	cmp	r3, #112	; 0x70
 8004c0a:	d101      	bne.n	8004c10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f023 020f 	bic.w	r2, r3, #15
 8004c18:	4909      	ldr	r1, [pc, #36]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d001      	beq.n	8004c32 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40022000 	.word	0x40022000

08004c44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004c4e:	4b2d      	ldr	r3, [pc, #180]	; (8004d04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d118      	bne.n	8004c8c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c5a:	4b2a      	ldr	r3, [pc, #168]	; (8004d04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d107      	bne.n	8004c76 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c66:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6c:	0a1b      	lsrs	r3, r3, #8
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	e005      	b.n	8004c82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c76:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	091b      	lsrs	r3, r3, #4
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c82:	4a21      	ldr	r2, [pc, #132]	; (8004d08 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c8a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d003      	beq.n	8004ca4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d003      	beq.n	8004caa <RCC_GetSysClockFreqFromPLLSource+0x66>
 8004ca2:	e005      	b.n	8004cb0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004ca4:	4b19      	ldr	r3, [pc, #100]	; (8004d0c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004ca6:	613b      	str	r3, [r7, #16]
    break;
 8004ca8:	e005      	b.n	8004cb6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004caa:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004cac:	613b      	str	r3, [r7, #16]
    break;
 8004cae:	e002      	b.n	8004cb6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	613b      	str	r3, [r7, #16]
    break;
 8004cb4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cb6:	4b13      	ldr	r3, [pc, #76]	; (8004d04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	0a1b      	lsrs	r3, r3, #8
 8004cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	fb02 f203 	mul.w	r2, r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cdc:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	0e5b      	lsrs	r3, r3, #25
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004cf6:	683b      	ldr	r3, [r7, #0]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40021000 	.word	0x40021000
 8004d08:	0800785c 	.word	0x0800785c
 8004d0c:	00f42400 	.word	0x00f42400
 8004d10:	007a1200 	.word	0x007a1200

08004d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d20:	2300      	movs	r3, #0
 8004d22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d040      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d34:	2b80      	cmp	r3, #128	; 0x80
 8004d36:	d02a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d825      	bhi.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d3c:	2b60      	cmp	r3, #96	; 0x60
 8004d3e:	d026      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004d40:	2b60      	cmp	r3, #96	; 0x60
 8004d42:	d821      	bhi.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d006      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d81d      	bhi.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d010      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004d54:	e018      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d56:	4b89      	ldr	r3, [pc, #548]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	4a88      	ldr	r2, [pc, #544]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d60:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d62:	e015      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	2100      	movs	r1, #0
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fb12 	bl	8005394 <RCCEx_PLLSAI1_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d74:	e00c      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3320      	adds	r3, #32
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fbfd 	bl	800557c <RCCEx_PLLSAI2_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d86:	e003      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	74fb      	strb	r3, [r7, #19]
      break;
 8004d8c:	e000      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d96:	4b79      	ldr	r3, [pc, #484]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d9c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da4:	4975      	ldr	r1, [pc, #468]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004dac:	e001      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	7cfb      	ldrb	r3, [r7, #19]
 8004db0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d047      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc6:	d030      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dcc:	d82a      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd2:	d02a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd8:	d824      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dde:	d008      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de4:	d81e      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dee:	d010      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004df0:	e018      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004df2:	4b62      	ldr	r3, [pc, #392]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	4a61      	ldr	r2, [pc, #388]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dfe:	e015      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fac4 	bl	8005394 <RCCEx_PLLSAI1_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e10:	e00c      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3320      	adds	r3, #32
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fbaf 	bl	800557c <RCCEx_PLLSAI2_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e22:	e003      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	74fb      	strb	r3, [r7, #19]
      break;
 8004e28:	e000      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10b      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e32:	4b52      	ldr	r3, [pc, #328]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	494e      	ldr	r1, [pc, #312]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004e48:	e001      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 809f 	beq.w	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e60:	4b46      	ldr	r3, [pc, #280]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e76:	4b41      	ldr	r3, [pc, #260]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7a:	4a40      	ldr	r2, [pc, #256]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e80:	6593      	str	r3, [r2, #88]	; 0x58
 8004e82:	4b3e      	ldr	r3, [pc, #248]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e92:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e9e:	f7fc fe71 	bl	8001b84 <HAL_GetTick>
 8004ea2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ea4:	e009      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea6:	f7fc fe6d 	bl	8001b84 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d902      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	74fb      	strb	r3, [r7, #19]
        break;
 8004eb8:	e005      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eba:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0ef      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004ec6:	7cfb      	ldrb	r3, [r7, #19]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d15b      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01f      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d019      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ef6:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	4a1f      	ldr	r2, [pc, #124]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f16:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d016      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fc fe2c 	bl	8001b84 <HAL_GetTick>
 8004f2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f30:	f7fc fe28 	bl	8001b84 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d902      	bls.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	74fb      	strb	r3, [r7, #19]
            break;
 8004f46:	e006      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ec      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10c      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5c:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	4903      	ldr	r1, [pc, #12]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	74bb      	strb	r3, [r7, #18]
 8004f7a:	e005      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f88:	7c7b      	ldrb	r3, [r7, #17]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d105      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8e:	4ba0      	ldr	r3, [pc, #640]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	4a9f      	ldr	r2, [pc, #636]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fa6:	4b9a      	ldr	r3, [pc, #616]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	f023 0203 	bic.w	r2, r3, #3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb4:	4996      	ldr	r1, [pc, #600]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fc8:	4b91      	ldr	r3, [pc, #580]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	f023 020c 	bic.w	r2, r3, #12
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	498e      	ldr	r1, [pc, #568]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fea:	4b89      	ldr	r3, [pc, #548]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff8:	4985      	ldr	r1, [pc, #532]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800500c:	4b80      	ldr	r3, [pc, #512]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005012:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501a:	497d      	ldr	r1, [pc, #500]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800502e:	4b78      	ldr	r3, [pc, #480]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503c:	4974      	ldr	r1, [pc, #464]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005050:	4b6f      	ldr	r3, [pc, #444]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505e:	496c      	ldr	r1, [pc, #432]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005072:	4b67      	ldr	r3, [pc, #412]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005080:	4963      	ldr	r1, [pc, #396]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005094:	4b5e      	ldr	r3, [pc, #376]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050a2:	495b      	ldr	r1, [pc, #364]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050b6:	4b56      	ldr	r3, [pc, #344]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c4:	4952      	ldr	r1, [pc, #328]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050d8:	4b4d      	ldr	r3, [pc, #308]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	494a      	ldr	r1, [pc, #296]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050fa:	4b45      	ldr	r3, [pc, #276]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005108:	4941      	ldr	r1, [pc, #260]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800511c:	4b3c      	ldr	r3, [pc, #240]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800511e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512a:	4939      	ldr	r1, [pc, #228]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d028      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800513e:	4b34      	ldr	r3, [pc, #208]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514c:	4930      	ldr	r1, [pc, #192]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800515c:	d106      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800515e:	4b2c      	ldr	r3, [pc, #176]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005168:	60d3      	str	r3, [r2, #12]
 800516a:	e011      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005174:	d10c      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3304      	adds	r3, #4
 800517a:	2101      	movs	r1, #1
 800517c:	4618      	mov	r0, r3
 800517e:	f000 f909 	bl	8005394 <RCCEx_PLLSAI1_Config>
 8005182:	4603      	mov	r3, r0
 8005184:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005186:	7cfb      	ldrb	r3, [r7, #19]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d04d      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051a4:	d108      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80051a6:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051ac:	4a18      	ldr	r2, [pc, #96]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80051b6:	e012      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80051b8:	4b15      	ldr	r3, [pc, #84]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051be:	4a14      	ldr	r2, [pc, #80]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80051c8:	4b11      	ldr	r3, [pc, #68]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051d6:	490e      	ldr	r1, [pc, #56]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051e6:	d106      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051f2:	60d3      	str	r3, [r2, #12]
 80051f4:	e020      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051fe:	d109      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005200:	4b03      	ldr	r3, [pc, #12]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a02      	ldr	r2, [pc, #8]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520a:	60d3      	str	r3, [r2, #12]
 800520c:	e014      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800521c:	d10c      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	2101      	movs	r1, #1
 8005224:	4618      	mov	r0, r3
 8005226:	f000 f8b5 	bl	8005394 <RCCEx_PLLSAI1_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800522e:	7cfb      	ldrb	r3, [r7, #19]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005234:	7cfb      	ldrb	r3, [r7, #19]
 8005236:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d028      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005244:	4b4a      	ldr	r3, [pc, #296]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005252:	4947      	ldr	r1, [pc, #284]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005262:	d106      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005264:	4b42      	ldr	r3, [pc, #264]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4a41      	ldr	r2, [pc, #260]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800526a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800526e:	60d3      	str	r3, [r2, #12]
 8005270:	e011      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005276:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800527a:	d10c      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	2101      	movs	r1, #1
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f886 	bl	8005394 <RCCEx_PLLSAI1_Config>
 8005288:	4603      	mov	r3, r0
 800528a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01e      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052a2:	4b33      	ldr	r3, [pc, #204]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b2:	492f      	ldr	r1, [pc, #188]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	2102      	movs	r1, #2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f861 	bl	8005394 <RCCEx_PLLSAI1_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052ec:	4b20      	ldr	r3, [pc, #128]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052f2:	f023 0204 	bic.w	r2, r3, #4
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fc:	491c      	ldr	r1, [pc, #112]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005312:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005316:	f023 0218 	bic.w	r2, r3, #24
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	4913      	ldr	r1, [pc, #76]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d017      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005334:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800533a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005344:	490a      	ldr	r1, [pc, #40]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005356:	d105      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a04      	ldr	r2, [pc, #16]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005362:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005364:	7cbb      	ldrb	r3, [r7, #18]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000

08005374 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800537e:	f043 0304 	orr.w	r3, r3, #4
 8005382:	6013      	str	r3, [r2, #0]
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40021000 	.word	0x40021000

08005394 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053a2:	4b72      	ldr	r3, [pc, #456]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00e      	beq.n	80053cc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053ae:	4b6f      	ldr	r3, [pc, #444]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0203 	and.w	r2, r3, #3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d103      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
       ||
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d142      	bne.n	800544c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
 80053ca:	e03f      	b.n	800544c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d018      	beq.n	8005406 <RCCEx_PLLSAI1_Config+0x72>
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d825      	bhi.n	8005424 <RCCEx_PLLSAI1_Config+0x90>
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d002      	beq.n	80053e2 <RCCEx_PLLSAI1_Config+0x4e>
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d009      	beq.n	80053f4 <RCCEx_PLLSAI1_Config+0x60>
 80053e0:	e020      	b.n	8005424 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053e2:	4b62      	ldr	r3, [pc, #392]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d11d      	bne.n	800542a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f2:	e01a      	b.n	800542a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053f4:	4b5d      	ldr	r3, [pc, #372]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d116      	bne.n	800542e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005404:	e013      	b.n	800542e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005406:	4b59      	ldr	r3, [pc, #356]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005412:	4b56      	ldr	r3, [pc, #344]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005422:	e006      	b.n	8005432 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
      break;
 8005428:	e004      	b.n	8005434 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800542a:	bf00      	nop
 800542c:	e002      	b.n	8005434 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800542e:	bf00      	nop
 8005430:	e000      	b.n	8005434 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005432:	bf00      	nop
    }

    if(status == HAL_OK)
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d108      	bne.n	800544c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800543a:	4b4c      	ldr	r3, [pc, #304]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f023 0203 	bic.w	r2, r3, #3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4949      	ldr	r1, [pc, #292]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005448:	4313      	orrs	r3, r2
 800544a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f040 8086 	bne.w	8005560 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005454:	4b45      	ldr	r3, [pc, #276]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a44      	ldr	r2, [pc, #272]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 800545a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800545e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005460:	f7fc fb90 	bl	8001b84 <HAL_GetTick>
 8005464:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005466:	e009      	b.n	800547c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005468:	f7fc fb8c 	bl	8001b84 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d902      	bls.n	800547c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	73fb      	strb	r3, [r7, #15]
        break;
 800547a:	e005      	b.n	8005488 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800547c:	4b3b      	ldr	r3, [pc, #236]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1ef      	bne.n	8005468 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d168      	bne.n	8005560 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d113      	bne.n	80054bc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005494:	4b35      	ldr	r3, [pc, #212]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	4b35      	ldr	r3, [pc, #212]	; (8005570 <RCCEx_PLLSAI1_Config+0x1dc>)
 800549a:	4013      	ands	r3, r2
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6892      	ldr	r2, [r2, #8]
 80054a0:	0211      	lsls	r1, r2, #8
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68d2      	ldr	r2, [r2, #12]
 80054a6:	06d2      	lsls	r2, r2, #27
 80054a8:	4311      	orrs	r1, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6852      	ldr	r2, [r2, #4]
 80054ae:	3a01      	subs	r2, #1
 80054b0:	0112      	lsls	r2, r2, #4
 80054b2:	430a      	orrs	r2, r1
 80054b4:	492d      	ldr	r1, [pc, #180]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	610b      	str	r3, [r1, #16]
 80054ba:	e02d      	b.n	8005518 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d115      	bne.n	80054ee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054c2:	4b2a      	ldr	r3, [pc, #168]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	4b2b      	ldr	r3, [pc, #172]	; (8005574 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6892      	ldr	r2, [r2, #8]
 80054ce:	0211      	lsls	r1, r2, #8
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6912      	ldr	r2, [r2, #16]
 80054d4:	0852      	lsrs	r2, r2, #1
 80054d6:	3a01      	subs	r2, #1
 80054d8:	0552      	lsls	r2, r2, #21
 80054da:	4311      	orrs	r1, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6852      	ldr	r2, [r2, #4]
 80054e0:	3a01      	subs	r2, #1
 80054e2:	0112      	lsls	r2, r2, #4
 80054e4:	430a      	orrs	r2, r1
 80054e6:	4921      	ldr	r1, [pc, #132]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	610b      	str	r3, [r1, #16]
 80054ec:	e014      	b.n	8005518 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054ee:	4b1f      	ldr	r3, [pc, #124]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	4b21      	ldr	r3, [pc, #132]	; (8005578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6892      	ldr	r2, [r2, #8]
 80054fa:	0211      	lsls	r1, r2, #8
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6952      	ldr	r2, [r2, #20]
 8005500:	0852      	lsrs	r2, r2, #1
 8005502:	3a01      	subs	r2, #1
 8005504:	0652      	lsls	r2, r2, #25
 8005506:	4311      	orrs	r1, r2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6852      	ldr	r2, [r2, #4]
 800550c:	3a01      	subs	r2, #1
 800550e:	0112      	lsls	r2, r2, #4
 8005510:	430a      	orrs	r2, r1
 8005512:	4916      	ldr	r1, [pc, #88]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005514:	4313      	orrs	r3, r2
 8005516:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005518:	4b14      	ldr	r3, [pc, #80]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a13      	ldr	r2, [pc, #76]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 800551e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005522:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005524:	f7fc fb2e 	bl	8001b84 <HAL_GetTick>
 8005528:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800552a:	e009      	b.n	8005540 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800552c:	f7fc fb2a 	bl	8001b84 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d902      	bls.n	8005540 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	73fb      	strb	r3, [r7, #15]
          break;
 800553e:	e005      	b.n	800554c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0ef      	beq.n	800552c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	4904      	ldr	r1, [pc, #16]	; (800556c <RCCEx_PLLSAI1_Config+0x1d8>)
 800555c:	4313      	orrs	r3, r2
 800555e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005560:	7bfb      	ldrb	r3, [r7, #15]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000
 8005570:	07ff800f 	.word	0x07ff800f
 8005574:	ff9f800f 	.word	0xff9f800f
 8005578:	f9ff800f 	.word	0xf9ff800f

0800557c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800558a:	4b72      	ldr	r3, [pc, #456]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00e      	beq.n	80055b4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005596:	4b6f      	ldr	r3, [pc, #444]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f003 0203 	and.w	r2, r3, #3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d103      	bne.n	80055ae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
       ||
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d142      	bne.n	8005634 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
 80055b2:	e03f      	b.n	8005634 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d018      	beq.n	80055ee <RCCEx_PLLSAI2_Config+0x72>
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d825      	bhi.n	800560c <RCCEx_PLLSAI2_Config+0x90>
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d002      	beq.n	80055ca <RCCEx_PLLSAI2_Config+0x4e>
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d009      	beq.n	80055dc <RCCEx_PLLSAI2_Config+0x60>
 80055c8:	e020      	b.n	800560c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055ca:	4b62      	ldr	r3, [pc, #392]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d11d      	bne.n	8005612 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055da:	e01a      	b.n	8005612 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055dc:	4b5d      	ldr	r3, [pc, #372]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d116      	bne.n	8005616 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ec:	e013      	b.n	8005616 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055ee:	4b59      	ldr	r3, [pc, #356]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10f      	bne.n	800561a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055fa:	4b56      	ldr	r3, [pc, #344]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800560a:	e006      	b.n	800561a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	73fb      	strb	r3, [r7, #15]
      break;
 8005610:	e004      	b.n	800561c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005612:	bf00      	nop
 8005614:	e002      	b.n	800561c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005616:	bf00      	nop
 8005618:	e000      	b.n	800561c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800561a:	bf00      	nop
    }

    if(status == HAL_OK)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d108      	bne.n	8005634 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005622:	4b4c      	ldr	r3, [pc, #304]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f023 0203 	bic.w	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4949      	ldr	r1, [pc, #292]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005630:	4313      	orrs	r3, r2
 8005632:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f040 8086 	bne.w	8005748 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800563c:	4b45      	ldr	r3, [pc, #276]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a44      	ldr	r2, [pc, #272]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005648:	f7fc fa9c 	bl	8001b84 <HAL_GetTick>
 800564c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800564e:	e009      	b.n	8005664 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005650:	f7fc fa98 	bl	8001b84 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d902      	bls.n	8005664 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	73fb      	strb	r3, [r7, #15]
        break;
 8005662:	e005      	b.n	8005670 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005664:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1ef      	bne.n	8005650 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d168      	bne.n	8005748 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d113      	bne.n	80056a4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800567c:	4b35      	ldr	r3, [pc, #212]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	4b35      	ldr	r3, [pc, #212]	; (8005758 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005682:	4013      	ands	r3, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6892      	ldr	r2, [r2, #8]
 8005688:	0211      	lsls	r1, r2, #8
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68d2      	ldr	r2, [r2, #12]
 800568e:	06d2      	lsls	r2, r2, #27
 8005690:	4311      	orrs	r1, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6852      	ldr	r2, [r2, #4]
 8005696:	3a01      	subs	r2, #1
 8005698:	0112      	lsls	r2, r2, #4
 800569a:	430a      	orrs	r2, r1
 800569c:	492d      	ldr	r1, [pc, #180]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	614b      	str	r3, [r1, #20]
 80056a2:	e02d      	b.n	8005700 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d115      	bne.n	80056d6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056aa:	4b2a      	ldr	r3, [pc, #168]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	4b2b      	ldr	r3, [pc, #172]	; (800575c <RCCEx_PLLSAI2_Config+0x1e0>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6892      	ldr	r2, [r2, #8]
 80056b6:	0211      	lsls	r1, r2, #8
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6912      	ldr	r2, [r2, #16]
 80056bc:	0852      	lsrs	r2, r2, #1
 80056be:	3a01      	subs	r2, #1
 80056c0:	0552      	lsls	r2, r2, #21
 80056c2:	4311      	orrs	r1, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6852      	ldr	r2, [r2, #4]
 80056c8:	3a01      	subs	r2, #1
 80056ca:	0112      	lsls	r2, r2, #4
 80056cc:	430a      	orrs	r2, r1
 80056ce:	4921      	ldr	r1, [pc, #132]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	614b      	str	r3, [r1, #20]
 80056d4:	e014      	b.n	8005700 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056d6:	4b1f      	ldr	r3, [pc, #124]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	4b21      	ldr	r3, [pc, #132]	; (8005760 <RCCEx_PLLSAI2_Config+0x1e4>)
 80056dc:	4013      	ands	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6892      	ldr	r2, [r2, #8]
 80056e2:	0211      	lsls	r1, r2, #8
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6952      	ldr	r2, [r2, #20]
 80056e8:	0852      	lsrs	r2, r2, #1
 80056ea:	3a01      	subs	r2, #1
 80056ec:	0652      	lsls	r2, r2, #25
 80056ee:	4311      	orrs	r1, r2
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6852      	ldr	r2, [r2, #4]
 80056f4:	3a01      	subs	r2, #1
 80056f6:	0112      	lsls	r2, r2, #4
 80056f8:	430a      	orrs	r2, r1
 80056fa:	4916      	ldr	r1, [pc, #88]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005700:	4b14      	ldr	r3, [pc, #80]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a13      	ldr	r2, [pc, #76]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570c:	f7fc fa3a 	bl	8001b84 <HAL_GetTick>
 8005710:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005712:	e009      	b.n	8005728 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005714:	f7fc fa36 	bl	8001b84 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d902      	bls.n	8005728 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	73fb      	strb	r3, [r7, #15]
          break;
 8005726:	e005      	b.n	8005734 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0ef      	beq.n	8005714 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	4904      	ldr	r1, [pc, #16]	; (8005754 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005744:	4313      	orrs	r3, r2
 8005746:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005748:	7bfb      	ldrb	r3, [r7, #15]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40021000 	.word	0x40021000
 8005758:	07ff800f 	.word	0x07ff800f
 800575c:	ff9f800f 	.word	0xff9f800f
 8005760:	f9ff800f 	.word	0xf9ff800f

08005764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e095      	b.n	80058a2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b00      	cmp	r3, #0
 800577c:	d108      	bne.n	8005790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005786:	d009      	beq.n	800579c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	61da      	str	r2, [r3, #28]
 800578e:	e005      	b.n	800579c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fb fe9a 	bl	80014f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057dc:	d902      	bls.n	80057e4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	e002      	b.n	80057ea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80057f2:	d007      	beq.n	8005804 <HAL_SPI_Init+0xa0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057fc:	d002      	beq.n	8005804 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005846:	ea42 0103 	orr.w	r1, r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	0c1b      	lsrs	r3, r3, #16
 8005860:	f003 0204 	and.w	r2, r3, #4
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005880:	ea42 0103 	orr.w	r1, r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e049      	b.n	8005950 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7fb fe83 	bl	80015dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3304      	adds	r3, #4
 80058e6:	4619      	mov	r1, r3
 80058e8:	4610      	mov	r0, r2
 80058ea:	f000 fccd 	bl	8006288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e049      	b.n	80059fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f841 	bl	8005a06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f000 fc76 	bl	8006288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a0e:	bf00      	nop
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
	...

08005a1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <HAL_TIM_PWM_Start+0x24>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	bf14      	ite	ne
 8005a38:	2301      	movne	r3, #1
 8005a3a:	2300      	moveq	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	e03c      	b.n	8005aba <HAL_TIM_PWM_Start+0x9e>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d109      	bne.n	8005a5a <HAL_TIM_PWM_Start+0x3e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	bf14      	ite	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	2300      	moveq	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	e02f      	b.n	8005aba <HAL_TIM_PWM_Start+0x9e>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d109      	bne.n	8005a74 <HAL_TIM_PWM_Start+0x58>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	bf14      	ite	ne
 8005a6c:	2301      	movne	r3, #1
 8005a6e:	2300      	moveq	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	e022      	b.n	8005aba <HAL_TIM_PWM_Start+0x9e>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	d109      	bne.n	8005a8e <HAL_TIM_PWM_Start+0x72>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	bf14      	ite	ne
 8005a86:	2301      	movne	r3, #1
 8005a88:	2300      	moveq	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	e015      	b.n	8005aba <HAL_TIM_PWM_Start+0x9e>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d109      	bne.n	8005aa8 <HAL_TIM_PWM_Start+0x8c>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	e008      	b.n	8005aba <HAL_TIM_PWM_Start+0x9e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	bf14      	ite	ne
 8005ab4:	2301      	movne	r3, #1
 8005ab6:	2300      	moveq	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e09c      	b.n	8005bfc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_PWM_Start+0xb6>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad0:	e023      	b.n	8005b1a <HAL_TIM_PWM_Start+0xfe>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0xc6>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae0:	e01b      	b.n	8005b1a <HAL_TIM_PWM_Start+0xfe>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d104      	bne.n	8005af2 <HAL_TIM_PWM_Start+0xd6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af0:	e013      	b.n	8005b1a <HAL_TIM_PWM_Start+0xfe>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_PWM_Start+0xe6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b00:	e00b      	b.n	8005b1a <HAL_TIM_PWM_Start+0xfe>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_PWM_Start+0xf6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b10:	e003      	b.n	8005b1a <HAL_TIM_PWM_Start+0xfe>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 ffba 	bl	8006a9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a35      	ldr	r2, [pc, #212]	; (8005c04 <HAL_TIM_PWM_Start+0x1e8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x13e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a34      	ldr	r2, [pc, #208]	; (8005c08 <HAL_TIM_PWM_Start+0x1ec>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00e      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x13e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a32      	ldr	r2, [pc, #200]	; (8005c0c <HAL_TIM_PWM_Start+0x1f0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d009      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x13e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a31      	ldr	r2, [pc, #196]	; (8005c10 <HAL_TIM_PWM_Start+0x1f4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d004      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x13e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2f      	ldr	r2, [pc, #188]	; (8005c14 <HAL_TIM_PWM_Start+0x1f8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_PWM_Start+0x142>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <HAL_TIM_PWM_Start+0x144>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a22      	ldr	r2, [pc, #136]	; (8005c04 <HAL_TIM_PWM_Start+0x1e8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d01d      	beq.n	8005bba <HAL_TIM_PWM_Start+0x19e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b86:	d018      	beq.n	8005bba <HAL_TIM_PWM_Start+0x19e>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <HAL_TIM_PWM_Start+0x1fc>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_TIM_PWM_Start+0x19e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <HAL_TIM_PWM_Start+0x200>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIM_PWM_Start+0x19e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <HAL_TIM_PWM_Start+0x204>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIM_PWM_Start+0x19e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <HAL_TIM_PWM_Start+0x1ec>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIM_PWM_Start+0x19e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <HAL_TIM_PWM_Start+0x1f0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d115      	bne.n	8005be6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <HAL_TIM_PWM_Start+0x208>)
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b06      	cmp	r3, #6
 8005bca:	d015      	beq.n	8005bf8 <HAL_TIM_PWM_Start+0x1dc>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd2:	d011      	beq.n	8005bf8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be4:	e008      	b.n	8005bf8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0201 	orr.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	e000      	b.n	8005bfa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40013400 	.word	0x40013400
 8005c0c:	40014000 	.word	0x40014000
 8005c10:	40014400 	.word	0x40014400
 8005c14:	40014800 	.word	0x40014800
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40000c00 	.word	0x40000c00
 8005c24:	00010007 	.word	0x00010007

08005c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d122      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d11b      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0202 	mvn.w	r2, #2
 8005c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 faed 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005c70:	e005      	b.n	8005c7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fadf 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 faf0 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d122      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d11b      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0204 	mvn.w	r2, #4
 8005ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2202      	movs	r2, #2
 8005cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fac3 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005cc4:	e005      	b.n	8005cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fab5 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fac6 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d122      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d11b      	bne.n	8005d2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0208 	mvn.w	r2, #8
 8005cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2204      	movs	r2, #4
 8005d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa99 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005d18:	e005      	b.n	8005d26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fa8b 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fa9c 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b10      	cmp	r3, #16
 8005d38:	d122      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b10      	cmp	r3, #16
 8005d46:	d11b      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0210 	mvn.w	r2, #16
 8005d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2208      	movs	r2, #8
 8005d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa6f 	bl	800624a <HAL_TIM_IC_CaptureCallback>
 8005d6c:	e005      	b.n	8005d7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fa61 	bl	8006236 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fa72 	bl	800625e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d10e      	bne.n	8005dac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d107      	bne.n	8005dac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0201 	mvn.w	r2, #1
 8005da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa3b 	bl	8006222 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db6:	2b80      	cmp	r3, #128	; 0x80
 8005db8:	d10e      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d107      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 ff1a 	bl	8006c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de6:	d10e      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df2:	2b80      	cmp	r3, #128	; 0x80
 8005df4:	d107      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 ff0d 	bl	8006c20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	d10e      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d107      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fa20 	bl	8006272 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d10e      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d107      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0220 	mvn.w	r2, #32
 8005e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fecd 	bl	8006bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e0ff      	b.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b14      	cmp	r3, #20
 8005e92:	f200 80f0 	bhi.w	8006076 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08006077 	.word	0x08006077
 8005ea4:	08006077 	.word	0x08006077
 8005ea8:	08006077 	.word	0x08006077
 8005eac:	08005f31 	.word	0x08005f31
 8005eb0:	08006077 	.word	0x08006077
 8005eb4:	08006077 	.word	0x08006077
 8005eb8:	08006077 	.word	0x08006077
 8005ebc:	08005f73 	.word	0x08005f73
 8005ec0:	08006077 	.word	0x08006077
 8005ec4:	08006077 	.word	0x08006077
 8005ec8:	08006077 	.word	0x08006077
 8005ecc:	08005fb3 	.word	0x08005fb3
 8005ed0:	08006077 	.word	0x08006077
 8005ed4:	08006077 	.word	0x08006077
 8005ed8:	08006077 	.word	0x08006077
 8005edc:	08005ff5 	.word	0x08005ff5
 8005ee0:	08006077 	.word	0x08006077
 8005ee4:	08006077 	.word	0x08006077
 8005ee8:	08006077 	.word	0x08006077
 8005eec:	08006035 	.word	0x08006035
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fa60 	bl	80063bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0208 	orr.w	r2, r2, #8
 8005f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0204 	bic.w	r2, r2, #4
 8005f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6999      	ldr	r1, [r3, #24]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	619a      	str	r2, [r3, #24]
      break;
 8005f2e:	e0a5      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fad0 	bl	80064dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6999      	ldr	r1, [r3, #24]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	021a      	lsls	r2, r3, #8
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	619a      	str	r2, [r3, #24]
      break;
 8005f70:	e084      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fb39 	bl	80065f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0208 	orr.w	r2, r2, #8
 8005f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0204 	bic.w	r2, r2, #4
 8005f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69d9      	ldr	r1, [r3, #28]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	61da      	str	r2, [r3, #28]
      break;
 8005fb0:	e064      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fba1 	bl	8006700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69d9      	ldr	r1, [r3, #28]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	021a      	lsls	r2, r3, #8
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	61da      	str	r2, [r3, #28]
      break;
 8005ff2:	e043      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fbea 	bl	80067d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0208 	orr.w	r2, r2, #8
 800600e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0204 	bic.w	r2, r2, #4
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006032:	e023      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fc2e 	bl	800689c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800604e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	021a      	lsls	r2, r3, #8
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006074:	e002      	b.n	800607c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
      break;
 800607a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop

08006090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_TIM_ConfigClockSource+0x1c>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e0b6      	b.n	800621a <HAL_TIM_ConfigClockSource+0x18a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e8:	d03e      	beq.n	8006168 <HAL_TIM_ConfigClockSource+0xd8>
 80060ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ee:	f200 8087 	bhi.w	8006200 <HAL_TIM_ConfigClockSource+0x170>
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	f000 8086 	beq.w	8006206 <HAL_TIM_ConfigClockSource+0x176>
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fe:	d87f      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x170>
 8006100:	2b70      	cmp	r3, #112	; 0x70
 8006102:	d01a      	beq.n	800613a <HAL_TIM_ConfigClockSource+0xaa>
 8006104:	2b70      	cmp	r3, #112	; 0x70
 8006106:	d87b      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x170>
 8006108:	2b60      	cmp	r3, #96	; 0x60
 800610a:	d050      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x11e>
 800610c:	2b60      	cmp	r3, #96	; 0x60
 800610e:	d877      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x170>
 8006110:	2b50      	cmp	r3, #80	; 0x50
 8006112:	d03c      	beq.n	800618e <HAL_TIM_ConfigClockSource+0xfe>
 8006114:	2b50      	cmp	r3, #80	; 0x50
 8006116:	d873      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x170>
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d058      	beq.n	80061ce <HAL_TIM_ConfigClockSource+0x13e>
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	d86f      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x170>
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d064      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x15e>
 8006124:	2b30      	cmp	r3, #48	; 0x30
 8006126:	d86b      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x170>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d060      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x15e>
 800612c:	2b20      	cmp	r3, #32
 800612e:	d867      	bhi.n	8006200 <HAL_TIM_ConfigClockSource+0x170>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d05c      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x15e>
 8006134:	2b10      	cmp	r3, #16
 8006136:	d05a      	beq.n	80061ee <HAL_TIM_ConfigClockSource+0x15e>
 8006138:	e062      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6899      	ldr	r1, [r3, #8]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f000 fc87 	bl	8006a5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800615c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	609a      	str	r2, [r3, #8]
      break;
 8006166:	e04f      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	6899      	ldr	r1, [r3, #8]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f000 fc70 	bl	8006a5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800618a:	609a      	str	r2, [r3, #8]
      break;
 800618c:	e03c      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6859      	ldr	r1, [r3, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	461a      	mov	r2, r3
 800619c:	f000 fbe4 	bl	8006968 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2150      	movs	r1, #80	; 0x50
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fc3d 	bl	8006a26 <TIM_ITRx_SetConfig>
      break;
 80061ac:	e02c      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6859      	ldr	r1, [r3, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f000 fc03 	bl	80069c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2160      	movs	r1, #96	; 0x60
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fc2d 	bl	8006a26 <TIM_ITRx_SetConfig>
      break;
 80061cc:	e01c      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6859      	ldr	r1, [r3, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	461a      	mov	r2, r3
 80061dc:	f000 fbc4 	bl	8006968 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2140      	movs	r1, #64	; 0x40
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fc1d 	bl	8006a26 <TIM_ITRx_SetConfig>
      break;
 80061ec:	e00c      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f000 fc14 	bl	8006a26 <TIM_ITRx_SetConfig>
      break;
 80061fe:	e003      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
      break;
 8006204:	e000      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006206:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006218:	7bfb      	ldrb	r3, [r7, #15]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a40      	ldr	r2, [pc, #256]	; (800639c <TIM_Base_SetConfig+0x114>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d013      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d00f      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a3d      	ldr	r2, [pc, #244]	; (80063a0 <TIM_Base_SetConfig+0x118>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a3c      	ldr	r2, [pc, #240]	; (80063a4 <TIM_Base_SetConfig+0x11c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d007      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a3b      	ldr	r2, [pc, #236]	; (80063a8 <TIM_Base_SetConfig+0x120>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_Base_SetConfig+0x40>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a3a      	ldr	r2, [pc, #232]	; (80063ac <TIM_Base_SetConfig+0x124>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d108      	bne.n	80062da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a2f      	ldr	r2, [pc, #188]	; (800639c <TIM_Base_SetConfig+0x114>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d01f      	beq.n	8006322 <TIM_Base_SetConfig+0x9a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e8:	d01b      	beq.n	8006322 <TIM_Base_SetConfig+0x9a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2c      	ldr	r2, [pc, #176]	; (80063a0 <TIM_Base_SetConfig+0x118>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d017      	beq.n	8006322 <TIM_Base_SetConfig+0x9a>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2b      	ldr	r2, [pc, #172]	; (80063a4 <TIM_Base_SetConfig+0x11c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d013      	beq.n	8006322 <TIM_Base_SetConfig+0x9a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a2a      	ldr	r2, [pc, #168]	; (80063a8 <TIM_Base_SetConfig+0x120>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00f      	beq.n	8006322 <TIM_Base_SetConfig+0x9a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a29      	ldr	r2, [pc, #164]	; (80063ac <TIM_Base_SetConfig+0x124>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00b      	beq.n	8006322 <TIM_Base_SetConfig+0x9a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a28      	ldr	r2, [pc, #160]	; (80063b0 <TIM_Base_SetConfig+0x128>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d007      	beq.n	8006322 <TIM_Base_SetConfig+0x9a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a27      	ldr	r2, [pc, #156]	; (80063b4 <TIM_Base_SetConfig+0x12c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d003      	beq.n	8006322 <TIM_Base_SetConfig+0x9a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a26      	ldr	r2, [pc, #152]	; (80063b8 <TIM_Base_SetConfig+0x130>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d108      	bne.n	8006334 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a10      	ldr	r2, [pc, #64]	; (800639c <TIM_Base_SetConfig+0x114>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00f      	beq.n	8006380 <TIM_Base_SetConfig+0xf8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a12      	ldr	r2, [pc, #72]	; (80063ac <TIM_Base_SetConfig+0x124>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00b      	beq.n	8006380 <TIM_Base_SetConfig+0xf8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a11      	ldr	r2, [pc, #68]	; (80063b0 <TIM_Base_SetConfig+0x128>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_Base_SetConfig+0xf8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a10      	ldr	r2, [pc, #64]	; (80063b4 <TIM_Base_SetConfig+0x12c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_Base_SetConfig+0xf8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a0f      	ldr	r2, [pc, #60]	; (80063b8 <TIM_Base_SetConfig+0x130>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d103      	bne.n	8006388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	615a      	str	r2, [r3, #20]
}
 800638e:	bf00      	nop
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40012c00 	.word	0x40012c00
 80063a0:	40000400 	.word	0x40000400
 80063a4:	40000800 	.word	0x40000800
 80063a8:	40000c00 	.word	0x40000c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800

080063bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f023 0201 	bic.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0303 	bic.w	r3, r3, #3
 80063f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f023 0302 	bic.w	r3, r3, #2
 8006408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a2c      	ldr	r2, [pc, #176]	; (80064c8 <TIM_OC1_SetConfig+0x10c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00f      	beq.n	800643c <TIM_OC1_SetConfig+0x80>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a2b      	ldr	r2, [pc, #172]	; (80064cc <TIM_OC1_SetConfig+0x110>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00b      	beq.n	800643c <TIM_OC1_SetConfig+0x80>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a2a      	ldr	r2, [pc, #168]	; (80064d0 <TIM_OC1_SetConfig+0x114>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d007      	beq.n	800643c <TIM_OC1_SetConfig+0x80>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a29      	ldr	r2, [pc, #164]	; (80064d4 <TIM_OC1_SetConfig+0x118>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_OC1_SetConfig+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a28      	ldr	r2, [pc, #160]	; (80064d8 <TIM_OC1_SetConfig+0x11c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d10c      	bne.n	8006456 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 0308 	bic.w	r3, r3, #8
 8006442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f023 0304 	bic.w	r3, r3, #4
 8006454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a1b      	ldr	r2, [pc, #108]	; (80064c8 <TIM_OC1_SetConfig+0x10c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00f      	beq.n	800647e <TIM_OC1_SetConfig+0xc2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <TIM_OC1_SetConfig+0x110>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00b      	beq.n	800647e <TIM_OC1_SetConfig+0xc2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <TIM_OC1_SetConfig+0x114>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d007      	beq.n	800647e <TIM_OC1_SetConfig+0xc2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a18      	ldr	r2, [pc, #96]	; (80064d4 <TIM_OC1_SetConfig+0x118>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d003      	beq.n	800647e <TIM_OC1_SetConfig+0xc2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a17      	ldr	r2, [pc, #92]	; (80064d8 <TIM_OC1_SetConfig+0x11c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d111      	bne.n	80064a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800648c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	621a      	str	r2, [r3, #32]
}
 80064bc:	bf00      	nop
 80064be:	371c      	adds	r7, #28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	40012c00 	.word	0x40012c00
 80064cc:	40013400 	.word	0x40013400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800

080064dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f023 0210 	bic.w	r2, r3, #16
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f023 0320 	bic.w	r3, r3, #32
 800652a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a28      	ldr	r2, [pc, #160]	; (80065dc <TIM_OC2_SetConfig+0x100>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_OC2_SetConfig+0x6c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a27      	ldr	r2, [pc, #156]	; (80065e0 <TIM_OC2_SetConfig+0x104>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d10d      	bne.n	8006564 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800654e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a1d      	ldr	r2, [pc, #116]	; (80065dc <TIM_OC2_SetConfig+0x100>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00f      	beq.n	800658c <TIM_OC2_SetConfig+0xb0>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a1c      	ldr	r2, [pc, #112]	; (80065e0 <TIM_OC2_SetConfig+0x104>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00b      	beq.n	800658c <TIM_OC2_SetConfig+0xb0>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a1b      	ldr	r2, [pc, #108]	; (80065e4 <TIM_OC2_SetConfig+0x108>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d007      	beq.n	800658c <TIM_OC2_SetConfig+0xb0>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a1a      	ldr	r2, [pc, #104]	; (80065e8 <TIM_OC2_SetConfig+0x10c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_OC2_SetConfig+0xb0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a19      	ldr	r2, [pc, #100]	; (80065ec <TIM_OC2_SetConfig+0x110>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d113      	bne.n	80065b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800659a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40013400 	.word	0x40013400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800

080065f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800661e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800663c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a27      	ldr	r2, [pc, #156]	; (80066ec <TIM_OC3_SetConfig+0xfc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_OC3_SetConfig+0x6a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a26      	ldr	r2, [pc, #152]	; (80066f0 <TIM_OC3_SetConfig+0x100>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10d      	bne.n	8006676 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <TIM_OC3_SetConfig+0xfc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00f      	beq.n	800669e <TIM_OC3_SetConfig+0xae>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <TIM_OC3_SetConfig+0x100>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00b      	beq.n	800669e <TIM_OC3_SetConfig+0xae>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <TIM_OC3_SetConfig+0x104>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d007      	beq.n	800669e <TIM_OC3_SetConfig+0xae>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <TIM_OC3_SetConfig+0x108>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_OC3_SetConfig+0xae>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a18      	ldr	r2, [pc, #96]	; (80066fc <TIM_OC3_SetConfig+0x10c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d113      	bne.n	80066c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	011b      	lsls	r3, r3, #4
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	621a      	str	r2, [r3, #32]
}
 80066e0:	bf00      	nop
 80066e2:	371c      	adds	r7, #28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	40012c00 	.word	0x40012c00
 80066f0:	40013400 	.word	0x40013400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800

08006700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800672e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800674e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	031b      	lsls	r3, r3, #12
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a18      	ldr	r2, [pc, #96]	; (80067c0 <TIM_OC4_SetConfig+0xc0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00f      	beq.n	8006784 <TIM_OC4_SetConfig+0x84>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a17      	ldr	r2, [pc, #92]	; (80067c4 <TIM_OC4_SetConfig+0xc4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00b      	beq.n	8006784 <TIM_OC4_SetConfig+0x84>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <TIM_OC4_SetConfig+0xc8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d007      	beq.n	8006784 <TIM_OC4_SetConfig+0x84>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a15      	ldr	r2, [pc, #84]	; (80067cc <TIM_OC4_SetConfig+0xcc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_OC4_SetConfig+0x84>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a14      	ldr	r2, [pc, #80]	; (80067d0 <TIM_OC4_SetConfig+0xd0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d109      	bne.n	8006798 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800678a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	019b      	lsls	r3, r3, #6
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40013400 	.word	0x40013400
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800

080067d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006818:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	041b      	lsls	r3, r3, #16
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a17      	ldr	r2, [pc, #92]	; (8006888 <TIM_OC5_SetConfig+0xb4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00f      	beq.n	800684e <TIM_OC5_SetConfig+0x7a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a16      	ldr	r2, [pc, #88]	; (800688c <TIM_OC5_SetConfig+0xb8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00b      	beq.n	800684e <TIM_OC5_SetConfig+0x7a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a15      	ldr	r2, [pc, #84]	; (8006890 <TIM_OC5_SetConfig+0xbc>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d007      	beq.n	800684e <TIM_OC5_SetConfig+0x7a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a14      	ldr	r2, [pc, #80]	; (8006894 <TIM_OC5_SetConfig+0xc0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d003      	beq.n	800684e <TIM_OC5_SetConfig+0x7a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a13      	ldr	r2, [pc, #76]	; (8006898 <TIM_OC5_SetConfig+0xc4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d109      	bne.n	8006862 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006854:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	021b      	lsls	r3, r3, #8
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	621a      	str	r2, [r3, #32]
}
 800687c:	bf00      	nop
 800687e:	371c      	adds	r7, #28
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	40012c00 	.word	0x40012c00
 800688c:	40013400 	.word	0x40013400
 8006890:	40014000 	.word	0x40014000
 8006894:	40014400 	.word	0x40014400
 8006898:	40014800 	.word	0x40014800

0800689c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	051b      	lsls	r3, r3, #20
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a18      	ldr	r2, [pc, #96]	; (8006954 <TIM_OC6_SetConfig+0xb8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00f      	beq.n	8006918 <TIM_OC6_SetConfig+0x7c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a17      	ldr	r2, [pc, #92]	; (8006958 <TIM_OC6_SetConfig+0xbc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00b      	beq.n	8006918 <TIM_OC6_SetConfig+0x7c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a16      	ldr	r2, [pc, #88]	; (800695c <TIM_OC6_SetConfig+0xc0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d007      	beq.n	8006918 <TIM_OC6_SetConfig+0x7c>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a15      	ldr	r2, [pc, #84]	; (8006960 <TIM_OC6_SetConfig+0xc4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_OC6_SetConfig+0x7c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a14      	ldr	r2, [pc, #80]	; (8006964 <TIM_OC6_SetConfig+0xc8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d109      	bne.n	800692c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800691e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	029b      	lsls	r3, r3, #10
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	621a      	str	r2, [r3, #32]
}
 8006946:	bf00      	nop
 8006948:	371c      	adds	r7, #28
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40012c00 	.word	0x40012c00
 8006958:	40013400 	.word	0x40013400
 800695c:	40014000 	.word	0x40014000
 8006960:	40014400 	.word	0x40014400
 8006964:	40014800 	.word	0x40014800

08006968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0201 	bic.w	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f023 030a 	bic.w	r3, r3, #10
 80069a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b087      	sub	sp, #28
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f023 0210 	bic.w	r2, r3, #16
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	031b      	lsls	r3, r3, #12
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f043 0307 	orr.w	r3, r3, #7
 8006a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	609a      	str	r2, [r3, #8]
}
 8006a50:	bf00      	nop
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	021a      	lsls	r2, r3, #8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	609a      	str	r2, [r3, #8]
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2201      	movs	r2, #1
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a1a      	ldr	r2, [r3, #32]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	43db      	mvns	r3, r3
 8006abe:	401a      	ands	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a1a      	ldr	r2, [r3, #32]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	6879      	ldr	r1, [r7, #4]
 8006ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
	...

08006ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e068      	b.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a2e      	ldr	r2, [pc, #184]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a2d      	ldr	r2, [pc, #180]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d108      	bne.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01d      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b72:	d018      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a1a      	ldr	r2, [pc, #104]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a18      	ldr	r2, [pc, #96]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a13      	ldr	r2, [pc, #76]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a14      	ldr	r2, [pc, #80]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40013400 	.word	0x40013400
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40014000 	.word	0x40014000

08006bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e042      	b.n	8006ccc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d106      	bne.n	8006c5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7fa fd59 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2224      	movs	r2, #36	; 0x24
 8006c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0201 	bic.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f82c 	bl	8006cd4 <UART_SetConfig>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d101      	bne.n	8006c86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e022      	b.n	8006ccc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fae8 	bl	8007264 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fb6f 	bl	80073a8 <UART_CheckIdleState>
 8006cca:	4603      	mov	r3, r0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd4:	b5b0      	push	{r4, r5, r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4bb1      	ldr	r3, [pc, #708]	; (8006fc4 <UART_SetConfig+0x2f0>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6812      	ldr	r2, [r2, #0]
 8006d06:	69f9      	ldr	r1, [r7, #28]
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4aa6      	ldr	r2, [pc, #664]	; (8006fc8 <UART_SetConfig+0x2f4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d46:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	69f9      	ldr	r1, [r7, #28]
 8006d50:	430b      	orrs	r3, r1
 8006d52:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	f023 010f 	bic.w	r1, r3, #15
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a97      	ldr	r2, [pc, #604]	; (8006fcc <UART_SetConfig+0x2f8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d120      	bne.n	8006db6 <UART_SetConfig+0xe2>
 8006d74:	4b96      	ldr	r3, [pc, #600]	; (8006fd0 <UART_SetConfig+0x2fc>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d816      	bhi.n	8006db0 <UART_SetConfig+0xdc>
 8006d82:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <UART_SetConfig+0xb4>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006d99 	.word	0x08006d99
 8006d8c:	08006da5 	.word	0x08006da5
 8006d90:	08006d9f 	.word	0x08006d9f
 8006d94:	08006dab 	.word	0x08006dab
 8006d98:	2301      	movs	r3, #1
 8006d9a:	76fb      	strb	r3, [r7, #27]
 8006d9c:	e0e7      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	76fb      	strb	r3, [r7, #27]
 8006da2:	e0e4      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006da4:	2304      	movs	r3, #4
 8006da6:	76fb      	strb	r3, [r7, #27]
 8006da8:	e0e1      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006daa:	2308      	movs	r3, #8
 8006dac:	76fb      	strb	r3, [r7, #27]
 8006dae:	e0de      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006db0:	2310      	movs	r3, #16
 8006db2:	76fb      	strb	r3, [r7, #27]
 8006db4:	e0db      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a86      	ldr	r2, [pc, #536]	; (8006fd4 <UART_SetConfig+0x300>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d132      	bne.n	8006e26 <UART_SetConfig+0x152>
 8006dc0:	4b83      	ldr	r3, [pc, #524]	; (8006fd0 <UART_SetConfig+0x2fc>)
 8006dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc6:	f003 030c 	and.w	r3, r3, #12
 8006dca:	2b0c      	cmp	r3, #12
 8006dcc:	d828      	bhi.n	8006e20 <UART_SetConfig+0x14c>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <UART_SetConfig+0x100>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006e09 	.word	0x08006e09
 8006dd8:	08006e21 	.word	0x08006e21
 8006ddc:	08006e21 	.word	0x08006e21
 8006de0:	08006e21 	.word	0x08006e21
 8006de4:	08006e15 	.word	0x08006e15
 8006de8:	08006e21 	.word	0x08006e21
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006e21 	.word	0x08006e21
 8006df4:	08006e0f 	.word	0x08006e0f
 8006df8:	08006e21 	.word	0x08006e21
 8006dfc:	08006e21 	.word	0x08006e21
 8006e00:	08006e21 	.word	0x08006e21
 8006e04:	08006e1b 	.word	0x08006e1b
 8006e08:	2300      	movs	r3, #0
 8006e0a:	76fb      	strb	r3, [r7, #27]
 8006e0c:	e0af      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	76fb      	strb	r3, [r7, #27]
 8006e12:	e0ac      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006e14:	2304      	movs	r3, #4
 8006e16:	76fb      	strb	r3, [r7, #27]
 8006e18:	e0a9      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006e1a:	2308      	movs	r3, #8
 8006e1c:	76fb      	strb	r3, [r7, #27]
 8006e1e:	e0a6      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006e20:	2310      	movs	r3, #16
 8006e22:	76fb      	strb	r3, [r7, #27]
 8006e24:	e0a3      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a6b      	ldr	r2, [pc, #428]	; (8006fd8 <UART_SetConfig+0x304>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d120      	bne.n	8006e72 <UART_SetConfig+0x19e>
 8006e30:	4b67      	ldr	r3, [pc, #412]	; (8006fd0 <UART_SetConfig+0x2fc>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e3a:	2b30      	cmp	r3, #48	; 0x30
 8006e3c:	d013      	beq.n	8006e66 <UART_SetConfig+0x192>
 8006e3e:	2b30      	cmp	r3, #48	; 0x30
 8006e40:	d814      	bhi.n	8006e6c <UART_SetConfig+0x198>
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d009      	beq.n	8006e5a <UART_SetConfig+0x186>
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d810      	bhi.n	8006e6c <UART_SetConfig+0x198>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <UART_SetConfig+0x180>
 8006e4e:	2b10      	cmp	r3, #16
 8006e50:	d006      	beq.n	8006e60 <UART_SetConfig+0x18c>
 8006e52:	e00b      	b.n	8006e6c <UART_SetConfig+0x198>
 8006e54:	2300      	movs	r3, #0
 8006e56:	76fb      	strb	r3, [r7, #27]
 8006e58:	e089      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	76fb      	strb	r3, [r7, #27]
 8006e5e:	e086      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006e60:	2304      	movs	r3, #4
 8006e62:	76fb      	strb	r3, [r7, #27]
 8006e64:	e083      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006e66:	2308      	movs	r3, #8
 8006e68:	76fb      	strb	r3, [r7, #27]
 8006e6a:	e080      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	76fb      	strb	r3, [r7, #27]
 8006e70:	e07d      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a59      	ldr	r2, [pc, #356]	; (8006fdc <UART_SetConfig+0x308>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d120      	bne.n	8006ebe <UART_SetConfig+0x1ea>
 8006e7c:	4b54      	ldr	r3, [pc, #336]	; (8006fd0 <UART_SetConfig+0x2fc>)
 8006e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e86:	2bc0      	cmp	r3, #192	; 0xc0
 8006e88:	d013      	beq.n	8006eb2 <UART_SetConfig+0x1de>
 8006e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e8c:	d814      	bhi.n	8006eb8 <UART_SetConfig+0x1e4>
 8006e8e:	2b80      	cmp	r3, #128	; 0x80
 8006e90:	d009      	beq.n	8006ea6 <UART_SetConfig+0x1d2>
 8006e92:	2b80      	cmp	r3, #128	; 0x80
 8006e94:	d810      	bhi.n	8006eb8 <UART_SetConfig+0x1e4>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <UART_SetConfig+0x1cc>
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	d006      	beq.n	8006eac <UART_SetConfig+0x1d8>
 8006e9e:	e00b      	b.n	8006eb8 <UART_SetConfig+0x1e4>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	76fb      	strb	r3, [r7, #27]
 8006ea4:	e063      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	76fb      	strb	r3, [r7, #27]
 8006eaa:	e060      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006eac:	2304      	movs	r3, #4
 8006eae:	76fb      	strb	r3, [r7, #27]
 8006eb0:	e05d      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006eb2:	2308      	movs	r3, #8
 8006eb4:	76fb      	strb	r3, [r7, #27]
 8006eb6:	e05a      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006eb8:	2310      	movs	r3, #16
 8006eba:	76fb      	strb	r3, [r7, #27]
 8006ebc:	e057      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a47      	ldr	r2, [pc, #284]	; (8006fe0 <UART_SetConfig+0x30c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d125      	bne.n	8006f14 <UART_SetConfig+0x240>
 8006ec8:	4b41      	ldr	r3, [pc, #260]	; (8006fd0 <UART_SetConfig+0x2fc>)
 8006eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed6:	d017      	beq.n	8006f08 <UART_SetConfig+0x234>
 8006ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006edc:	d817      	bhi.n	8006f0e <UART_SetConfig+0x23a>
 8006ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee2:	d00b      	beq.n	8006efc <UART_SetConfig+0x228>
 8006ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee8:	d811      	bhi.n	8006f0e <UART_SetConfig+0x23a>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <UART_SetConfig+0x222>
 8006eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef2:	d006      	beq.n	8006f02 <UART_SetConfig+0x22e>
 8006ef4:	e00b      	b.n	8006f0e <UART_SetConfig+0x23a>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	76fb      	strb	r3, [r7, #27]
 8006efa:	e038      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006efc:	2302      	movs	r3, #2
 8006efe:	76fb      	strb	r3, [r7, #27]
 8006f00:	e035      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006f02:	2304      	movs	r3, #4
 8006f04:	76fb      	strb	r3, [r7, #27]
 8006f06:	e032      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006f08:	2308      	movs	r3, #8
 8006f0a:	76fb      	strb	r3, [r7, #27]
 8006f0c:	e02f      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006f0e:	2310      	movs	r3, #16
 8006f10:	76fb      	strb	r3, [r7, #27]
 8006f12:	e02c      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a2b      	ldr	r2, [pc, #172]	; (8006fc8 <UART_SetConfig+0x2f4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d125      	bne.n	8006f6a <UART_SetConfig+0x296>
 8006f1e:	4b2c      	ldr	r3, [pc, #176]	; (8006fd0 <UART_SetConfig+0x2fc>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f2c:	d017      	beq.n	8006f5e <UART_SetConfig+0x28a>
 8006f2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f32:	d817      	bhi.n	8006f64 <UART_SetConfig+0x290>
 8006f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f38:	d00b      	beq.n	8006f52 <UART_SetConfig+0x27e>
 8006f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3e:	d811      	bhi.n	8006f64 <UART_SetConfig+0x290>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <UART_SetConfig+0x278>
 8006f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f48:	d006      	beq.n	8006f58 <UART_SetConfig+0x284>
 8006f4a:	e00b      	b.n	8006f64 <UART_SetConfig+0x290>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	76fb      	strb	r3, [r7, #27]
 8006f50:	e00d      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006f52:	2302      	movs	r3, #2
 8006f54:	76fb      	strb	r3, [r7, #27]
 8006f56:	e00a      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	76fb      	strb	r3, [r7, #27]
 8006f5c:	e007      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006f5e:	2308      	movs	r3, #8
 8006f60:	76fb      	strb	r3, [r7, #27]
 8006f62:	e004      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006f64:	2310      	movs	r3, #16
 8006f66:	76fb      	strb	r3, [r7, #27]
 8006f68:	e001      	b.n	8006f6e <UART_SetConfig+0x29a>
 8006f6a:	2310      	movs	r3, #16
 8006f6c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a15      	ldr	r2, [pc, #84]	; (8006fc8 <UART_SetConfig+0x2f4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	f040 809f 	bne.w	80070b8 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f7a:	7efb      	ldrb	r3, [r7, #27]
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d837      	bhi.n	8006ff0 <UART_SetConfig+0x31c>
 8006f80:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <UART_SetConfig+0x2b4>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	08006fad 	.word	0x08006fad
 8006f8c:	08006ff1 	.word	0x08006ff1
 8006f90:	08006fb5 	.word	0x08006fb5
 8006f94:	08006ff1 	.word	0x08006ff1
 8006f98:	08006fbb 	.word	0x08006fbb
 8006f9c:	08006ff1 	.word	0x08006ff1
 8006fa0:	08006ff1 	.word	0x08006ff1
 8006fa4:	08006ff1 	.word	0x08006ff1
 8006fa8:	08006fe9 	.word	0x08006fe9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fac:	f7fd fdc4 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 8006fb0:	6178      	str	r0, [r7, #20]
        break;
 8006fb2:	e022      	b.n	8006ffa <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb4:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <UART_SetConfig+0x310>)
 8006fb6:	617b      	str	r3, [r7, #20]
        break;
 8006fb8:	e01f      	b.n	8006ffa <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fba:	f7fd fd25 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 8006fbe:	6178      	str	r0, [r7, #20]
        break;
 8006fc0:	e01b      	b.n	8006ffa <UART_SetConfig+0x326>
 8006fc2:	bf00      	nop
 8006fc4:	cfff69f3 	.word	0xcfff69f3
 8006fc8:	40008000 	.word	0x40008000
 8006fcc:	40013800 	.word	0x40013800
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	40004400 	.word	0x40004400
 8006fd8:	40004800 	.word	0x40004800
 8006fdc:	40004c00 	.word	0x40004c00
 8006fe0:	40005000 	.word	0x40005000
 8006fe4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fec:	617b      	str	r3, [r7, #20]
        break;
 8006fee:	e004      	b.n	8006ffa <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	76bb      	strb	r3, [r7, #26]
        break;
 8006ff8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8119 	beq.w	8007234 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	4a95      	ldr	r2, [pc, #596]	; (800725c <UART_SetConfig+0x588>)
 8007008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800700c:	461a      	mov	r2, r3
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	fbb3 f3f2 	udiv	r3, r3, r2
 8007014:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	4413      	add	r3, r2
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	429a      	cmp	r2, r3
 8007024:	d305      	bcc.n	8007032 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	429a      	cmp	r2, r3
 8007030:	d902      	bls.n	8007038 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	76bb      	strb	r3, [r7, #26]
 8007036:	e0fd      	b.n	8007234 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4618      	mov	r0, r3
 800703c:	f04f 0100 	mov.w	r1, #0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	4a85      	ldr	r2, [pc, #532]	; (800725c <UART_SetConfig+0x588>)
 8007046:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800704a:	b29a      	uxth	r2, r3
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	f7f9 f8d4 	bl	80001fc <__aeabi_uldivmod>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4610      	mov	r0, r2
 800705a:	4619      	mov	r1, r3
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	020b      	lsls	r3, r1, #8
 8007066:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800706a:	0202      	lsls	r2, r0, #8
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	6849      	ldr	r1, [r1, #4]
 8007070:	0849      	lsrs	r1, r1, #1
 8007072:	4608      	mov	r0, r1
 8007074:	f04f 0100 	mov.w	r1, #0
 8007078:	1814      	adds	r4, r2, r0
 800707a:	eb43 0501 	adc.w	r5, r3, r1
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	461a      	mov	r2, r3
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	4620      	mov	r0, r4
 800708a:	4629      	mov	r1, r5
 800708c:	f7f9 f8b6 	bl	80001fc <__aeabi_uldivmod>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4613      	mov	r3, r2
 8007096:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800709e:	d308      	bcc.n	80070b2 <UART_SetConfig+0x3de>
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a6:	d204      	bcs.n	80070b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	60da      	str	r2, [r3, #12]
 80070b0:	e0c0      	b.n	8007234 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	76bb      	strb	r3, [r7, #26]
 80070b6:	e0bd      	b.n	8007234 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c0:	d164      	bne.n	800718c <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80070c2:	7efb      	ldrb	r3, [r7, #27]
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d828      	bhi.n	800711a <UART_SetConfig+0x446>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0x3fc>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070f5 	.word	0x080070f5
 80070d4:	080070fd 	.word	0x080070fd
 80070d8:	08007105 	.word	0x08007105
 80070dc:	0800711b 	.word	0x0800711b
 80070e0:	0800710b 	.word	0x0800710b
 80070e4:	0800711b 	.word	0x0800711b
 80070e8:	0800711b 	.word	0x0800711b
 80070ec:	0800711b 	.word	0x0800711b
 80070f0:	08007113 	.word	0x08007113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f4:	f7fd fd20 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80070f8:	6178      	str	r0, [r7, #20]
        break;
 80070fa:	e013      	b.n	8007124 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070fc:	f7fd fd32 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 8007100:	6178      	str	r0, [r7, #20]
        break;
 8007102:	e00f      	b.n	8007124 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007104:	4b56      	ldr	r3, [pc, #344]	; (8007260 <UART_SetConfig+0x58c>)
 8007106:	617b      	str	r3, [r7, #20]
        break;
 8007108:	e00c      	b.n	8007124 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800710a:	f7fd fc7d 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 800710e:	6178      	str	r0, [r7, #20]
        break;
 8007110:	e008      	b.n	8007124 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007116:	617b      	str	r3, [r7, #20]
        break;
 8007118:	e004      	b.n	8007124 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	76bb      	strb	r3, [r7, #26]
        break;
 8007122:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 8084 	beq.w	8007234 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	4a4a      	ldr	r2, [pc, #296]	; (800725c <UART_SetConfig+0x588>)
 8007132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007136:	461a      	mov	r2, r3
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	fbb3 f3f2 	udiv	r3, r3, r2
 800713e:	005a      	lsls	r2, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	085b      	lsrs	r3, r3, #1
 8007146:	441a      	add	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007150:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2b0f      	cmp	r3, #15
 8007156:	d916      	bls.n	8007186 <UART_SetConfig+0x4b2>
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800715e:	d212      	bcs.n	8007186 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	b29b      	uxth	r3, r3
 8007164:	f023 030f 	bic.w	r3, r3, #15
 8007168:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	b29b      	uxth	r3, r3
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	b29a      	uxth	r2, r3
 8007176:	89fb      	ldrh	r3, [r7, #14]
 8007178:	4313      	orrs	r3, r2
 800717a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	89fa      	ldrh	r2, [r7, #14]
 8007182:	60da      	str	r2, [r3, #12]
 8007184:	e056      	b.n	8007234 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	76bb      	strb	r3, [r7, #26]
 800718a:	e053      	b.n	8007234 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 800718c:	7efb      	ldrb	r3, [r7, #27]
 800718e:	2b08      	cmp	r3, #8
 8007190:	d827      	bhi.n	80071e2 <UART_SetConfig+0x50e>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <UART_SetConfig+0x4c4>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071bd 	.word	0x080071bd
 800719c:	080071c5 	.word	0x080071c5
 80071a0:	080071cd 	.word	0x080071cd
 80071a4:	080071e3 	.word	0x080071e3
 80071a8:	080071d3 	.word	0x080071d3
 80071ac:	080071e3 	.word	0x080071e3
 80071b0:	080071e3 	.word	0x080071e3
 80071b4:	080071e3 	.word	0x080071e3
 80071b8:	080071db 	.word	0x080071db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071bc:	f7fd fcbc 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 80071c0:	6178      	str	r0, [r7, #20]
        break;
 80071c2:	e013      	b.n	80071ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071c4:	f7fd fcce 	bl	8004b64 <HAL_RCC_GetPCLK2Freq>
 80071c8:	6178      	str	r0, [r7, #20]
        break;
 80071ca:	e00f      	b.n	80071ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071cc:	4b24      	ldr	r3, [pc, #144]	; (8007260 <UART_SetConfig+0x58c>)
 80071ce:	617b      	str	r3, [r7, #20]
        break;
 80071d0:	e00c      	b.n	80071ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071d2:	f7fd fc19 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80071d6:	6178      	str	r0, [r7, #20]
        break;
 80071d8:	e008      	b.n	80071ec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071de:	617b      	str	r3, [r7, #20]
        break;
 80071e0:	e004      	b.n	80071ec <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	76bb      	strb	r3, [r7, #26]
        break;
 80071ea:	bf00      	nop
    }

    if (pclk != 0U)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d020      	beq.n	8007234 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	4a19      	ldr	r2, [pc, #100]	; (800725c <UART_SetConfig+0x588>)
 80071f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071fc:	461a      	mov	r2, r3
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	fbb3 f2f2 	udiv	r2, r3, r2
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	085b      	lsrs	r3, r3, #1
 800720a:	441a      	add	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b0f      	cmp	r3, #15
 800721a:	d909      	bls.n	8007230 <UART_SetConfig+0x55c>
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007222:	d205      	bcs.n	8007230 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	b29a      	uxth	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	e001      	b.n	8007234 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007250:	7ebb      	ldrb	r3, [r7, #26]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bdb0      	pop	{r4, r5, r7, pc}
 800725a:	bf00      	nop
 800725c:	0800788c 	.word	0x0800788c
 8007260:	00f42400 	.word	0x00f42400

08007264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	f003 0310 	and.w	r3, r3, #16
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01a      	beq.n	800737a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007362:	d10a      	bne.n	800737a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	605a      	str	r2, [r3, #4]
  }
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073b8:	f7fa fbe4 	bl	8001b84 <HAL_GetTick>
 80073bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d10e      	bne.n	80073ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f82f 	bl	800743e <UART_WaitOnFlagUntilTimeout>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e025      	b.n	8007436 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d10e      	bne.n	8007416 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f819 	bl	800743e <UART_WaitOnFlagUntilTimeout>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e00f      	b.n	8007436 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b09c      	sub	sp, #112	; 0x70
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800744e:	e0a9      	b.n	80075a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	f000 80a5 	beq.w	80075a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745a:	f7fa fb93 	bl	8001b84 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007466:	429a      	cmp	r2, r3
 8007468:	d302      	bcc.n	8007470 <UART_WaitOnFlagUntilTimeout+0x32>
 800746a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800746c:	2b00      	cmp	r3, #0
 800746e:	d140      	bne.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800747e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007484:	667b      	str	r3, [r7, #100]	; 0x64
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800748e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007490:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007494:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800749c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e6      	bne.n	8007470 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3308      	adds	r3, #8
 80074a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ac:	e853 3f00 	ldrex	r3, [r3]
 80074b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	663b      	str	r3, [r7, #96]	; 0x60
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80074c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e5      	bne.n	80074a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2220      	movs	r2, #32
 80074da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e069      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d051      	beq.n	80075a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800750e:	d149      	bne.n	80075a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007518:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800752e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
 800753a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800753e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e6      	bne.n	800751a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3308      	adds	r3, #8
 8007552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	613b      	str	r3, [r7, #16]
   return(result);
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	66bb      	str	r3, [r7, #104]	; 0x68
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3308      	adds	r3, #8
 800756a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800756c:	623a      	str	r2, [r7, #32]
 800756e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	69f9      	ldr	r1, [r7, #28]
 8007572:	6a3a      	ldr	r2, [r7, #32]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	61bb      	str	r3, [r7, #24]
   return(result);
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e5      	bne.n	800754c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2220      	movs	r2, #32
 800758c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2220      	movs	r2, #32
 8007594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e010      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69da      	ldr	r2, [r3, #28]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	4013      	ands	r3, r2
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	bf0c      	ite	eq
 80075b4:	2301      	moveq	r3, #1
 80075b6:	2300      	movne	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	461a      	mov	r2, r3
 80075bc:	79fb      	ldrb	r3, [r7, #7]
 80075be:	429a      	cmp	r2, r3
 80075c0:	f43f af46 	beq.w	8007450 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3770      	adds	r7, #112	; 0x70
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e027      	b.n	8007634 <HAL_UARTEx_DisableFifoMode+0x66>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2224      	movs	r2, #36	; 0x24
 80075f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0201 	bic.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007612:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007654:	2302      	movs	r3, #2
 8007656:	e02d      	b.n	80076b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2224      	movs	r2, #36	; 0x24
 8007664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0201 	bic.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f84f 	bl	8007738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d101      	bne.n	80076d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076d0:	2302      	movs	r3, #2
 80076d2:	e02d      	b.n	8007730 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2224      	movs	r2, #36	; 0x24
 80076e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0201 	bic.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f811 	bl	8007738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007744:	2b00      	cmp	r3, #0
 8007746:	d108      	bne.n	800775a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007758:	e031      	b.n	80077be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800775a:	2308      	movs	r3, #8
 800775c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800775e:	2308      	movs	r3, #8
 8007760:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	0e5b      	lsrs	r3, r3, #25
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	0f5b      	lsrs	r3, r3, #29
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	7b3a      	ldrb	r2, [r7, #12]
 8007786:	4911      	ldr	r1, [pc, #68]	; (80077cc <UARTEx_SetNbDataToProcess+0x94>)
 8007788:	5c8a      	ldrb	r2, [r1, r2]
 800778a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800778e:	7b3a      	ldrb	r2, [r7, #12]
 8007790:	490f      	ldr	r1, [pc, #60]	; (80077d0 <UARTEx_SetNbDataToProcess+0x98>)
 8007792:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007794:	fb93 f3f2 	sdiv	r3, r3, r2
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	7b7a      	ldrb	r2, [r7, #13]
 80077a4:	4909      	ldr	r1, [pc, #36]	; (80077cc <UARTEx_SetNbDataToProcess+0x94>)
 80077a6:	5c8a      	ldrb	r2, [r1, r2]
 80077a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077ac:	7b7a      	ldrb	r2, [r7, #13]
 80077ae:	4908      	ldr	r1, [pc, #32]	; (80077d0 <UARTEx_SetNbDataToProcess+0x98>)
 80077b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	080078a4 	.word	0x080078a4
 80077d0:	080078ac 	.word	0x080078ac

080077d4 <__libc_init_array>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	4d0d      	ldr	r5, [pc, #52]	; (800780c <__libc_init_array+0x38>)
 80077d8:	4c0d      	ldr	r4, [pc, #52]	; (8007810 <__libc_init_array+0x3c>)
 80077da:	1b64      	subs	r4, r4, r5
 80077dc:	10a4      	asrs	r4, r4, #2
 80077de:	2600      	movs	r6, #0
 80077e0:	42a6      	cmp	r6, r4
 80077e2:	d109      	bne.n	80077f8 <__libc_init_array+0x24>
 80077e4:	4d0b      	ldr	r5, [pc, #44]	; (8007814 <__libc_init_array+0x40>)
 80077e6:	4c0c      	ldr	r4, [pc, #48]	; (8007818 <__libc_init_array+0x44>)
 80077e8:	f000 f820 	bl	800782c <_init>
 80077ec:	1b64      	subs	r4, r4, r5
 80077ee:	10a4      	asrs	r4, r4, #2
 80077f0:	2600      	movs	r6, #0
 80077f2:	42a6      	cmp	r6, r4
 80077f4:	d105      	bne.n	8007802 <__libc_init_array+0x2e>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fc:	4798      	blx	r3
 80077fe:	3601      	adds	r6, #1
 8007800:	e7ee      	b.n	80077e0 <__libc_init_array+0xc>
 8007802:	f855 3b04 	ldr.w	r3, [r5], #4
 8007806:	4798      	blx	r3
 8007808:	3601      	adds	r6, #1
 800780a:	e7f2      	b.n	80077f2 <__libc_init_array+0x1e>
 800780c:	080078bc 	.word	0x080078bc
 8007810:	080078bc 	.word	0x080078bc
 8007814:	080078bc 	.word	0x080078bc
 8007818:	080078c0 	.word	0x080078c0

0800781c <memset>:
 800781c:	4402      	add	r2, r0
 800781e:	4603      	mov	r3, r0
 8007820:	4293      	cmp	r3, r2
 8007822:	d100      	bne.n	8007826 <memset+0xa>
 8007824:	4770      	bx	lr
 8007826:	f803 1b01 	strb.w	r1, [r3], #1
 800782a:	e7f9      	b.n	8007820 <memset+0x4>

0800782c <_init>:
 800782c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782e:	bf00      	nop
 8007830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007832:	bc08      	pop	{r3}
 8007834:	469e      	mov	lr, r3
 8007836:	4770      	bx	lr

08007838 <_fini>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr

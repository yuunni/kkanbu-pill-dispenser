
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007944  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007b00  08007b00  00017b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b70  08007b70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b70  08007b70  00017b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b78  08007b78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b78  08007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b7c  08007b7c  00017b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  2000000c  08007b8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08007b8c  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021cc5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003019  00000000  00000000  00041d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00044d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a00  00000000  00000000  00046848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dc53  00000000  00000000  00048248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eaae  00000000  00000000  00075e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123225  00000000  00000000  00094949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b7b6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007684  00000000  00000000  001b7bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08007ae8 	.word	0x08007ae8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08007ae8 	.word	0x08007ae8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f001 fa0b 	bl	8001912 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f866 	bl	80005cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000500:	f000 f8c6 	bl	8000690 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 fc8a 	bl	8000e1c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000508:	f000 f8f2 	bl	80006f0 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800050c:	f000 f954 	bl	80007b8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000510:	f000 f98a 	bl	8000828 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000514:	f000 f9c8 	bl	80008a8 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000518:	f000 fa1c 	bl	8000954 <MX_SPI1_Init>
  MX_SPI3_Init();
 800051c:	f000 fa58 	bl	80009d0 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000520:	f000 fbda 	bl	8000cd8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000524:	f000 fc26 	bl	8000d74 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000528:	f000 fc70 	bl	8000e0c <MX_USB_OTG_FS_USB_Init>
  MX_TIM3_Init();
 800052c:	f000 fb06 	bl	8000b3c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000530:	f000 fa8c 	bl	8000a4c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000534:	f000 fb7c 	bl	8000c30 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3); // Add PWM Servo Motor left
 8000538:	2108      	movs	r1, #8
 800053a:	4821      	ldr	r0, [pc, #132]	; (80005c0 <main+0xcc>)
 800053c:	f005 f9b6 	bl	80058ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3); // Add PWM Servo Motor right
 8000540:	2108      	movs	r1, #8
 8000542:	4820      	ldr	r0, [pc, #128]	; (80005c4 <main+0xd0>)
 8000544:	f005 f9b2 	bl	80058ac <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)){
 8000548:	2104      	movs	r1, #4
 800054a:	481f      	ldr	r0, [pc, #124]	; (80005c8 <main+0xd4>)
 800054c:	f002 fd12 	bl	8002f74 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f8      	beq.n	8000548 <main+0x54>
	  //MOTION DETECT(PIR SENSOR)

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2108      	movs	r1, #8
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f002 fd21 	bl	8002fa4 <HAL_GPIO_WritePin>
		  HAL_Delay(300); //LED ON
 8000562:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000566:	f001 fa49 	bl	80019fc <HAL_Delay>

		  	  	  //Pwm - Servo motor arm rotates to 180 degree

			      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 100);
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <main+0xcc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2264      	movs	r2, #100	; 0x64
 8000570:	63da      	str	r2, [r3, #60]	; 0x3c
			      HAL_Delay(1500);
 8000572:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000576:	f001 fa41 	bl	80019fc <HAL_Delay>

			      //Pwm - Servo motor arm rotates to 0 degree

			      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 50);
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <main+0xcc>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2232      	movs	r2, #50	; 0x32
 8000580:	63da      	str	r2, [r3, #60]	; 0x3c
			      HAL_Delay(1500);
 8000582:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000586:	f001 fa39 	bl	80019fc <HAL_Delay>

			      __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 50);
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <main+0xd0>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2232      	movs	r2, #50	; 0x32
 8000590:	63da      	str	r2, [r3, #60]	; 0x3c
			      HAL_Delay(1500);
 8000592:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000596:	f001 fa31 	bl	80019fc <HAL_Delay>

			      __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 100);
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <main+0xd0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2264      	movs	r2, #100	; 0x64
 80005a0:	63da      	str	r2, [r3, #60]	; 0x3c
			      HAL_Delay(1500);
 80005a2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005a6:	f001 fa29 	bl	80019fc <HAL_Delay>



		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2108      	movs	r1, #8
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f002 fcf7 	bl	8002fa4 <HAL_GPIO_WritePin>
		  HAL_Delay(300); //LED OFF
 80005b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005ba:	f001 fa1f 	bl	80019fc <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)){
 80005be:	e7c3      	b.n	8000548 <main+0x54>
 80005c0:	20000350 	.word	0x20000350
 80005c4:	200001d4 	.word	0x200001d4
 80005c8:	48000400 	.word	0x48000400

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	; 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	; 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 fa7c 	bl	8007ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f2:	f003 fb5b 	bl	8003cac <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 fd70 	bl	80010e0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000600:	f003 fb24 	bl	8003c4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <SystemClock_Config+0xc0>)
 8000606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xc0>)
 800060c:	f023 0318 	bic.w	r3, r3, #24
 8000610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000614:	2314      	movs	r3, #20
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000634:	2310      	movs	r3, #16
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fbd3 	bl	8003df4 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000654:	f000 fd44 	bl	80010e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f003 ffe5 	bl	8004640 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800067c:	f000 fd30 	bl	80010e0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000680:	f004 fdc0 	bl	8005204 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000684:	bf00      	nop
 8000686:	3758      	adds	r7, #88	; 0x58
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000

08000690 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b0a6      	sub	sp, #152	; 0x98
 8000694:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2294      	movs	r2, #148	; 0x94
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f007 fa1b 	bl	8007ad8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80006a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006b4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006b6:	2301      	movs	r3, #1
 80006b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006be:	2318      	movs	r3, #24
 80006c0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80006ce:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80006d2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fa64 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80006e2:	f000 fcfd 	bl	80010e0 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3798      	adds	r7, #152	; 0x98
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
 8000704:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000706:	4b29      	ldr	r3, [pc, #164]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000708:	4a29      	ldr	r2, [pc, #164]	; (80007b0 <MX_ADC1_Init+0xc0>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <MX_ADC1_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_ADC1_Init+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000726:	2204      	movs	r2, #4
 8000728:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_ADC1_Init+0xbc>)
 800072c:	2200      	movs	r2, #0
 800072e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000732:	2200      	movs	r2, #0
 8000734:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000738:	2201      	movs	r2, #1
 800073a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_ADC1_Init+0xbc>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_ADC1_Init+0xbc>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_ADC1_Init+0xbc>)
 800075a:	2200      	movs	r2, #0
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000766:	4811      	ldr	r0, [pc, #68]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000768:	f001 fb0c 	bl	8001d84 <HAL_ADC_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000772:	f000 fcb5 	bl	80010e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_ADC1_Init+0xc4>)
 8000778:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077a:	2306      	movs	r3, #6
 800077c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000782:	237f      	movs	r3, #127	; 0x7f
 8000784:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000786:	2304      	movs	r3, #4
 8000788:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_ADC1_Init+0xbc>)
 8000794:	f001 fc42 	bl	800201c <HAL_ADC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800079e:	f000 fc9f 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000284 	.word	0x20000284
 80007b0:	50040000 	.word	0x50040000
 80007b4:	04300002 	.word	0x04300002

080007b8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007be:	4a19      	ldr	r2, [pc, #100]	; (8000824 <MX_DFSDM1_Init+0x6c>)
 80007c0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_DFSDM1_Init+0x68>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_DFSDM1_Init+0x68>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_DFSDM1_Init+0x68>)
 8000806:	2200      	movs	r2, #0
 8000808:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_DFSDM1_Init+0x68>)
 800080c:	f002 f914 	bl	8002a38 <HAL_DFSDM_ChannelInit>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000816:	f000 fc63 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000042c 	.word	0x2000042c
 8000824:	40016040 	.word	0x40016040

08000828 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_I2C2_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_I2C2_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_I2C2_Init+0x74>)
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <MX_I2C2_Init+0x7c>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_I2C2_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_I2C2_Init+0x74>)
 8000840:	2201      	movs	r2, #1
 8000842:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800084a:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_I2C2_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_I2C2_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <MX_I2C2_Init+0x74>)
 8000864:	f002 fbd9 	bl	800301a <HAL_I2C_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800086e:	f000 fc37 	bl	80010e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <MX_I2C2_Init+0x74>)
 8000876:	f002 fc5f 	bl	8003138 <HAL_I2CEx_ConfigAnalogFilter>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 fc2e 	bl	80010e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_I2C2_Init+0x74>)
 8000888:	f002 fca1 	bl	80031ce <HAL_I2CEx_ConfigDigitalFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fc25 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000184 	.word	0x20000184
 80008a0:	40005800 	.word	0x40005800
 80008a4:	00303d5b 	.word	0x00303d5b

080008a8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008be:	4a24      	ldr	r2, [pc, #144]	; (8000950 <MX_OCTOSPI1_Init+0xa8>)
 80008c0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008c2:	4b22      	ldr	r3, [pc, #136]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80008d4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008d8:	2220      	movs	r2, #32
 80008da:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008de:	2201      	movs	r2, #1
 80008e0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 8000908:	2208      	movs	r2, #8
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800090c:	480f      	ldr	r0, [pc, #60]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 800090e:	f002 fcab 	bl	8003268 <HAL_OSPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000918:	f000 fbe2 	bl	80010e0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800091c:	2301      	movs	r3, #1
 800091e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000924:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000928:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_OCTOSPI1_Init+0xa4>)
 8000934:	f002 fd4e 	bl	80033d4 <HAL_OSPIM_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800093e:	f000 fbcf 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000134 	.word	0x20000134
 8000950:	a0001000 	.word	0xa0001000

08000954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_SPI1_Init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <MX_SPI1_Init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_SPI1_Init+0x74>)
 800096e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000972:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000986:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_SPI1_Init+0x74>)
 800098a:	2208      	movs	r2, #8
 800098c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009a2:	2207      	movs	r2, #7
 80009a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009ae:	2208      	movs	r2, #8
 80009b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009b4:	f004 fe1e 	bl	80055f4 <HAL_SPI_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009be:	f000 fb8f 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002ec 	.word	0x200002ec
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_SPI3_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a06:	2208      	movs	r2, #8
 8000a08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a1e:	2207      	movs	r2, #7
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a30:	f004 fde0 	bl	80055f4 <HAL_SPI_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fb51 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000220 	.word	0x20000220
 8000a48:	40003c00 	.word	0x40003c00

08000a4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320-1;
 8000a86:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000a88:	f240 123f 	movw	r2, #319	; 0x13f
 8000a8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa8:	4823      	ldr	r0, [pc, #140]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000aaa:	f004 fe46 	bl	800573a <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000ab4:	f000 fb14 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481c      	ldr	r0, [pc, #112]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000ac6:	f005 fb1d 	bl	8006104 <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ad0:	f000 fb06 	bl	80010e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad4:	4818      	ldr	r0, [pc, #96]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000ad6:	f004 fe87 	bl	80057e8 <HAL_TIM_PWM_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000ae0:	f000 fafe 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000af4:	f006 f956 	bl	8006da4 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000afe:	f000 faef 	bl	80010e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500-1;
 8000b06:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	2208      	movs	r2, #8
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000b1c:	f005 f9de 	bl	8005edc <HAL_TIM_PWM_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000b26:	f000 fadb 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <MX_TIM2_Init+0xec>)
 8000b2c:	f000 fd6a 	bl	8001604 <HAL_TIM_MspPostInit>

}
 8000b30:	bf00      	nop
 8000b32:	3738      	adds	r7, #56	; 0x38
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000350 	.word	0x20000350

08000b3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
 8000b6a:	615a      	str	r2, [r3, #20]
 8000b6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000b70:	4a2e      	ldr	r2, [pc, #184]	; (8000c2c <MX_TIM3_Init+0xf0>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 320-1;
 8000b74:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000b76:	f240 123f 	movw	r2, #319	; 0x13f
 8000b7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000b84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8a:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b96:	4824      	ldr	r0, [pc, #144]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000b98:	f004 fdcf 	bl	800573a <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000ba2:	f000 fa9d 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481d      	ldr	r0, [pc, #116]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000bb4:	f005 faa6 	bl	8006104 <HAL_TIM_ConfigClockSource>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000bbe:	f000 fa8f 	bl	80010e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bc2:	4819      	ldr	r0, [pc, #100]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000bc4:	f004 fe10 	bl	80057e8 <HAL_TIM_PWM_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bce:	f000 fa87 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4811      	ldr	r0, [pc, #68]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000be2:	f006 f8df 	bl	8006da4 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000bec:	f000 fa78 	bl	80010e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf0:	2360      	movs	r3, #96	; 0x60
 8000bf2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500-1;
 8000bf4:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	2208      	movs	r2, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000c0a:	f005 f967 	bl	8005edc <HAL_TIM_PWM_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8000c14:	f000 fa64 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <MX_TIM3_Init+0xec>)
 8000c1a:	f000 fcf3 	bl	8001604 <HAL_TIM_MspPostInit>

}
 8000c1e:	bf00      	nop
 8000c20:	3738      	adds	r7, #56	; 0x38
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200001d4 	.word	0x200001d4
 8000c2c:	40000400 	.word	0x40000400

08000c30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <MX_TIM4_Init+0xa0>)
 8000c50:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <MX_TIM4_Init+0xa4>)
 8000c52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_TIM4_Init+0xa0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_TIM4_Init+0xa0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_TIM4_Init+0xa0>)
 8000c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_TIM4_Init+0xa0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_TIM4_Init+0xa0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <MX_TIM4_Init+0xa0>)
 8000c76:	f004 ff1f 	bl	8005ab8 <HAL_TIM_IC_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000c80:	f000 fa2e 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <MX_TIM4_Init+0xa0>)
 8000c94:	f006 f886 	bl	8006da4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000c9e:	f000 fa1f 	bl	80010e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_TIM4_Init+0xa0>)
 8000cba:	f005 f873 	bl	8005da4 <HAL_TIM_IC_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000cc4:	f000 fa0c 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000054 	.word	0x20000054
 8000cd4:	40000800 	.word	0x40000800

08000cd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000cde:	4a24      	ldr	r2, [pc, #144]	; (8000d70 <MX_USART2_UART_Init+0x98>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000d04:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d08:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d22:	4812      	ldr	r0, [pc, #72]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000d24:	f006 f8e4 	bl	8006ef0 <HAL_UART_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000d2e:	f000 f9d7 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000d36:	f006 fde1 	bl	80078fc <HAL_UARTEx_SetTxFifoThreshold>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000d40:	f000 f9ce 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	4809      	ldr	r0, [pc, #36]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000d48:	f006 fe16 	bl	8007978 <HAL_UARTEx_SetRxFifoThreshold>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000d52:	f000 f9c5 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USART2_UART_Init+0x94>)
 8000d58:	f006 fd97 	bl	800788a <HAL_UARTEx_DisableFifoMode>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000d62:	f000 f9bd 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000039c 	.word	0x2000039c
 8000d70:	40004400 	.word	0x40004400

08000d74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d7a:	4a23      	ldr	r2, [pc, #140]	; (8000e08 <MX_USART3_UART_Init+0x94>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000dbe:	f006 f897 	bl	8006ef0 <HAL_UART_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dc8:	f000 f98a 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000dd0:	f006 fd94 	bl	80078fc <HAL_UARTEx_SetTxFifoThreshold>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dda:	f000 f981 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4808      	ldr	r0, [pc, #32]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000de2:	f006 fdc9 	bl	8007978 <HAL_UARTEx_SetRxFifoThreshold>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dec:	f000 f978 	bl	80010e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_USART3_UART_Init+0x90>)
 8000df2:	f006 fd4a 	bl	800788a <HAL_UARTEx_DisableFifoMode>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dfc:	f000 f970 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200000a0 	.word	0x200000a0
 8000e08:	40004800 	.word	0x40004800

08000e0c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e32:	4ba6      	ldr	r3, [pc, #664]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4aa5      	ldr	r2, [pc, #660]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4ba3      	ldr	r3, [pc, #652]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4ba0      	ldr	r3, [pc, #640]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a9f      	ldr	r2, [pc, #636]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b9d      	ldr	r3, [pc, #628]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	4b9a      	ldr	r3, [pc, #616]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a99      	ldr	r2, [pc, #612]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b97      	ldr	r3, [pc, #604]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b94      	ldr	r3, [pc, #592]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a93      	ldr	r2, [pc, #588]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b91      	ldr	r3, [pc, #580]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b8e      	ldr	r3, [pc, #568]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a8d      	ldr	r2, [pc, #564]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b8b      	ldr	r3, [pc, #556]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	4b88      	ldr	r3, [pc, #544]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a87      	ldr	r2, [pc, #540]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b85      	ldr	r3, [pc, #532]	; (80010cc <MX_GPIO_Init+0x2b0>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f240 1105 	movw	r1, #261	; 0x105
 8000ec8:	4881      	ldr	r0, [pc, #516]	; (80010d0 <MX_GPIO_Init+0x2b4>)
 8000eca:	f002 f86b 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f248 1118 	movw	r1, #33048	; 0x8118
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f002 f864 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000edc:	2200      	movs	r2, #0
 8000ede:	f247 0132 	movw	r1, #28722	; 0x7032
 8000ee2:	487c      	ldr	r0, [pc, #496]	; (80010d4 <MX_GPIO_Init+0x2b8>)
 8000ee4:	f002 f85e 	bl	8002fa4 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SDN_GPIO_Port, SPSGRF_915_SDN_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eee:	4879      	ldr	r0, [pc, #484]	; (80010d4 <MX_GPIO_Init+0x2b8>)
 8000ef0:	f002 f858 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f242 0183 	movw	r1, #8323	; 0x2083
 8000efa:	4877      	ldr	r0, [pc, #476]	; (80010d8 <MX_GPIO_Init+0x2bc>)
 8000efc:	f002 f852 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f06:	4875      	ldr	r0, [pc, #468]	; (80010dc <MX_GPIO_Init+0x2c0>)
 8000f08:	f002 f84c 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f0c:	f240 1305 	movw	r3, #261	; 0x105
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	486a      	ldr	r0, [pc, #424]	; (80010d0 <MX_GPIO_Init+0x2b4>)
 8000f26:	f001 fe93 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000f2a:	237a      	movs	r3, #122	; 0x7a
 8000f2c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4864      	ldr	r0, [pc, #400]	; (80010d0 <MX_GPIO_Init+0x2b4>)
 8000f40:	f001 fe86 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000f44:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4860      	ldr	r0, [pc, #384]	; (80010dc <MX_GPIO_Init+0x2c0>)
 8000f5c:	f001 fe78 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f60:	2303      	movs	r3, #3
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f70:	2308      	movs	r3, #8
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f001 fe67 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000f82:	f248 1318 	movw	r3, #33048	; 0x8118
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f001 fe57 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000fa2:	f24f 0332 	movw	r3, #61490	; 0xf032
 8000fa6:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4846      	ldr	r0, [pc, #280]	; (80010d4 <MX_GPIO_Init+0x2b8>)
 8000fbc:	f001 fe48 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4840      	ldr	r0, [pc, #256]	; (80010d4 <MX_GPIO_Init+0x2b8>)
 8000fd4:	f001 fe3c 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000fd8:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8000fdc:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	483a      	ldr	r0, [pc, #232]	; (80010d8 <MX_GPIO_Init+0x2bc>)
 8000ff0:	f001 fe2e 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000ff4:	f242 0383 	movw	r3, #8323	; 0x2083
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	4832      	ldr	r0, [pc, #200]	; (80010d8 <MX_GPIO_Init+0x2bc>)
 800100e:	f001 fe1f 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001012:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	482c      	ldr	r0, [pc, #176]	; (80010dc <MX_GPIO_Init+0x2c0>)
 800102c:	f001 fe10 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f001 fe02 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800104c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800105e:	230a      	movs	r3, #10
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f001 fdf0 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001080:	2308      	movs	r3, #8
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4812      	ldr	r0, [pc, #72]	; (80010d4 <MX_GPIO_Init+0x2b8>)
 800108c:	f001 fde0 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D14_Pin;
 8001090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001096:	2312      	movs	r3, #18
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109a:	2301      	movs	r3, #1
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a2:	2304      	movs	r3, #4
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D14_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <MX_GPIO_Init+0x2b8>)
 80010ae:	f001 fdcf 	bl	8002c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2017      	movs	r0, #23
 80010b8:	f001 fc87 	bl	80029ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010bc:	2017      	movs	r0, #23
 80010be:	f001 fca0 	bl	8002a02 <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3730      	adds	r7, #48	; 0x30
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48001000 	.word	0x48001000
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000c00 	.word	0x48000c00
 80010dc:	48000800 	.word	0x48000800

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x44>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6613      	str	r3, [r2, #96]	; 0x60
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x44>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x44>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x44>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x44>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <HAL_ADC_MspInit+0x74>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d123      	bne.n	800119e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_ADC_MspInit+0x78>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_ADC_MspInit+0x78>)
 800115c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_ADC_MspInit+0x78>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_ADC_MspInit+0x78>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_ADC_MspInit+0x78>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_ADC_MspInit+0x78>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001186:	233f      	movs	r3, #63	; 0x3f
 8001188:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800118a:	230b      	movs	r3, #11
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_ADC_MspInit+0x7c>)
 800119a:	f001 fd59 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	50040000 	.word	0x50040000
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000800 	.word	0x48000800

080011b4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ae      	sub	sp, #184	; 0xb8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2294      	movs	r2, #148	; 0x94
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f006 fc7f 	bl	8007ad8 <memset>
  if(DFSDM1_Init == 0)
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d142      	bne.n	8001268 <HAL_DFSDM_ChannelMspInit+0xb4>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80011e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fcd6 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80011fe:	f7ff ff6f 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800120c:	6613      	str	r3, [r2, #96]	; 0x60
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001220:	f043 0310 	orr.w	r3, r3, #16
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001232:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001236:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800124c:	2306      	movs	r3, #6
 800124e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001252:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001256:	4619      	mov	r1, r3
 8001258:	4807      	ldr	r0, [pc, #28]	; (8001278 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800125a:	f001 fcf9 	bl	8002c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	4a02      	ldr	r2, [pc, #8]	; (8001270 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001266:	6013      	str	r3, [r2, #0]
  }

}
 8001268:	bf00      	nop
 800126a:	37b8      	adds	r7, #184	; 0xb8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000028 	.word	0x20000028
 8001274:	40021000 	.word	0x40021000
 8001278:	48001000 	.word	0x48001000

0800127c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0ae      	sub	sp, #184	; 0xb8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	2294      	movs	r2, #148	; 0x94
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f006 fc1b 	bl	8007ad8 <memset>
  if(hi2c->Instance==I2C2)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a21      	ldr	r2, [pc, #132]	; (800132c <HAL_I2C_MspInit+0xb0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d13b      	bne.n	8001324 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fc73 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012c4:	f7ff ff0c 	bl	80010e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_I2C_MspInit+0xb4>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	4a18      	ldr	r2, [pc, #96]	; (8001330 <HAL_I2C_MspInit+0xb4>)
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_I2C_MspInit+0xb4>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80012e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012fa:	2304      	movs	r3, #4
 80012fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001304:	4619      	mov	r1, r3
 8001306:	480b      	ldr	r0, [pc, #44]	; (8001334 <HAL_I2C_MspInit+0xb8>)
 8001308:	f001 fca2 	bl	8002c50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_I2C_MspInit+0xb4>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <HAL_I2C_MspInit+0xb4>)
 8001312:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001316:	6593      	str	r3, [r2, #88]	; 0x58
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_I2C_MspInit+0xb4>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	37b8      	adds	r7, #184	; 0xb8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40005800 	.word	0x40005800
 8001330:	40021000 	.word	0x40021000
 8001334:	48000400 	.word	0x48000400

08001338 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0b0      	sub	sp, #192	; 0xc0
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	2294      	movs	r2, #148	; 0x94
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f006 fbbd 	bl	8007ad8 <memset>
  if(hospi->Instance==OCTOSPI1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a28      	ldr	r2, [pc, #160]	; (8001404 <HAL_OSPI_MspInit+0xcc>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d149      	bne.n	80013fc <HAL_OSPI_MspInit+0xc4>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001368:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800136c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4618      	mov	r0, r3
 800137a:	f003 fc13 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001384:	f7ff feac 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <HAL_OSPI_MspInit+0xd0>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_OSPI_MspInit+0xd0>)
 800138e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HAL_OSPI_MspInit+0xd0>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_OSPI_MspInit+0xd0>)
 80013a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013a4:	4a18      	ldr	r2, [pc, #96]	; (8001408 <HAL_OSPI_MspInit+0xd0>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6513      	str	r3, [r2, #80]	; 0x50
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_OSPI_MspInit+0xd0>)
 80013ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_OSPI_MspInit+0xd0>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_OSPI_MspInit+0xd0>)
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_OSPI_MspInit+0xd0>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80013d0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80013d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013ea:	230a      	movs	r3, #10
 80013ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_OSPI_MspInit+0xd4>)
 80013f8:	f001 fc2a 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	37c0      	adds	r7, #192	; 0xc0
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	a0001000 	.word	0xa0001000
 8001408:	40021000 	.word	0x40021000
 800140c:	48001000 	.word	0x48001000

08001410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a2f      	ldr	r2, [pc, #188]	; (80014ec <HAL_SPI_MspInit+0xdc>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d129      	bne.n	8001486 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 8001438:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800143c:	6613      	str	r3, [r2, #96]	; 0x60
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a28      	ldr	r2, [pc, #160]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001462:	23e0      	movs	r3, #224	; 0xe0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001472:	2305      	movs	r3, #5
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f001 fbe6 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001484:	e02d      	b.n	80014e2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <HAL_SPI_MspInit+0xe4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d128      	bne.n	80014e2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 8001496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149a:	6593      	str	r3, [r2, #88]	; 0x58
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_SPI_MspInit+0xe0>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80014c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014d2:	2306      	movs	r3, #6
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4806      	ldr	r0, [pc, #24]	; (80014f8 <HAL_SPI_MspInit+0xe8>)
 80014de:	f001 fbb7 	bl	8002c50 <HAL_GPIO_Init>
}
 80014e2:	bf00      	nop
 80014e4:	3730      	adds	r7, #48	; 0x30
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40013000 	.word	0x40013000
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40003c00 	.word	0x40003c00
 80014f8:	48000800 	.word	0x48000800

080014fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150c:	d114      	bne.n	8001538 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_TIM_Base_MspInit+0x78>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <HAL_TIM_Base_MspInit+0x78>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6593      	str	r3, [r2, #88]	; 0x58
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_TIM_Base_MspInit+0x78>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	201c      	movs	r0, #28
 800152c:	f001 fa4d 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001530:	201c      	movs	r0, #28
 8001532:	f001 fa66 	bl	8002a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001536:	e018      	b.n	800156a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_TIM_Base_MspInit+0x7c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d113      	bne.n	800156a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_TIM_Base_MspInit+0x78>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <HAL_TIM_Base_MspInit+0x78>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6593      	str	r3, [r2, #88]	; 0x58
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_TIM_Base_MspInit+0x78>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	201d      	movs	r0, #29
 8001560:	f001 fa33 	bl	80029ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001564:	201d      	movs	r0, #29
 8001566:	f001 fa4c 	bl	8002a02 <HAL_NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	40000400 	.word	0x40000400

0800157c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_TIM_IC_MspInit+0x7c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d128      	bne.n	80015f0 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_TIM_IC_MspInit+0x80>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	4a16      	ldr	r2, [pc, #88]	; (80015fc <HAL_TIM_IC_MspInit+0x80>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6593      	str	r3, [r2, #88]	; 0x58
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_TIM_IC_MspInit+0x80>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_TIM_IC_MspInit+0x80>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_TIM_IC_MspInit+0x80>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_TIM_IC_MspInit+0x80>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80015ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015e0:	2302      	movs	r3, #2
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <HAL_TIM_IC_MspInit+0x84>)
 80015ec:	f001 fb30 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40000800 	.word	0x40000800
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400

08001604 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d11d      	bne.n	8001662 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_TIM_MspPostInit+0xa8>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a20      	ldr	r2, [pc, #128]	; (80016ac <HAL_TIM_MspPostInit+0xa8>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_TIM_MspPostInit+0xa8>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800163e:	2304      	movs	r3, #4
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800164e:	2301      	movs	r3, #1
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f001 faf8 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001660:	e020      	b.n	80016a4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_TIM_MspPostInit+0xac>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d11b      	bne.n	80016a4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_TIM_MspPostInit+0xa8>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_TIM_MspPostInit+0xa8>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_TIM_MspPostInit+0xa8>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001684:	2301      	movs	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001694:	2302      	movs	r3, #2
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <HAL_TIM_MspPostInit+0xb0>)
 80016a0:	f001 fad6 	bl	8002c50 <HAL_GPIO_Init>
}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40000400 	.word	0x40000400
 80016b4:	48000400 	.word	0x48000400

080016b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0b0      	sub	sp, #192	; 0xc0
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d0:	f107 0318 	add.w	r3, r7, #24
 80016d4:	2294      	movs	r2, #148	; 0x94
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f006 f9fd 	bl	8007ad8 <memset>
  if(huart->Instance==USART2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a42      	ldr	r2, [pc, #264]	; (80017ec <HAL_UART_MspInit+0x134>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d13b      	bne.n	8001760 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 fa55 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001700:	f7ff fcee 	bl	80010e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001704:	4b3a      	ldr	r3, [pc, #232]	; (80017f0 <HAL_UART_MspInit+0x138>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	4a39      	ldr	r2, [pc, #228]	; (80017f0 <HAL_UART_MspInit+0x138>)
 800170a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170e:	6593      	str	r3, [r2, #88]	; 0x58
 8001710:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <HAL_UART_MspInit+0x138>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171c:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_UART_MspInit+0x138>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	4a33      	ldr	r2, [pc, #204]	; (80017f0 <HAL_UART_MspInit+0x138>)
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_UART_MspInit+0x138>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001734:	2378      	movs	r3, #120	; 0x78
 8001736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800174c:	2307      	movs	r3, #7
 800174e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001752:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001756:	4619      	mov	r1, r3
 8001758:	4826      	ldr	r0, [pc, #152]	; (80017f4 <HAL_UART_MspInit+0x13c>)
 800175a:	f001 fa79 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800175e:	e040      	b.n	80017e2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <HAL_UART_MspInit+0x140>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d13b      	bne.n	80017e2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800176a:	2304      	movs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800176e:	2300      	movs	r3, #0
 8001770:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001772:	f107 0318 	add.w	r3, r7, #24
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fa14 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001782:	f7ff fcad 	bl	80010e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_UART_MspInit+0x138>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_UART_MspInit+0x138>)
 800178c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001790:	6593      	str	r3, [r2, #88]	; 0x58
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_UART_MspInit+0x138>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_UART_MspInit+0x138>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <HAL_UART_MspInit+0x138>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_UART_MspInit+0x138>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d0:	2307      	movs	r3, #7
 80017d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <HAL_UART_MspInit+0x13c>)
 80017de:	f001 fa37 	bl	8002c50 <HAL_GPIO_Init>
}
 80017e2:	bf00      	nop
 80017e4:	37c0      	adds	r7, #192	; 0xc0
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40004400 	.word	0x40004400
 80017f0:	40021000 	.word	0x40021000
 80017f4:	48000c00 	.word	0x48000c00
 80017f8:	40004800 	.word	0x40004800

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <NMI_Handler+0x4>

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <MemManage_Handler+0x4>

0800180e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler+0x4>

0800181a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001848:	f000 f8b8 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001854:	2020      	movs	r0, #32
 8001856:	f001 fbbd 	bl	8002fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800185a:	2040      	movs	r0, #64	; 0x40
 800185c:	f001 fbba 	bl	8002fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D11_Pin);
 8001860:	2080      	movs	r0, #128	; 0x80
 8001862:	f001 fbb7 	bl	8002fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ISM43362_RST_Pin);
 8001866:	f44f 7080 	mov.w	r0, #256	; 0x100
 800186a:	f001 fbb3 	bl	8002fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <TIM2_IRQHandler+0x10>)
 800187a:	f004 f974 	bl	8005b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000350 	.word	0x20000350

08001888 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <TIM3_IRQHandler+0x10>)
 800188e:	f004 f96a 	bl	8005b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200001d4 	.word	0x200001d4

0800189c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <SystemInit+0x20>)
 80018a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <SystemInit+0x20>)
 80018a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c4:	f7ff ffea 	bl	800189c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <LoopForever+0x6>)
  ldr r1, =_edata
 80018ca:	490d      	ldr	r1, [pc, #52]	; (8001900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <LoopForever+0xe>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d0:	e002      	b.n	80018d8 <LoopCopyDataInit>

080018d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d6:	3304      	adds	r3, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018dc:	d3f9      	bcc.n	80018d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018de:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e0:	4c0a      	ldr	r4, [pc, #40]	; (800190c <LoopForever+0x16>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e4:	e001      	b.n	80018ea <LoopFillZerobss>

080018e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e8:	3204      	adds	r2, #4

080018ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ec:	d3fb      	bcc.n	80018e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ee:	f006 f8cf 	bl	8007a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f2:	f7fe fdff 	bl	80004f4 <main>

080018f6 <LoopForever>:

LoopForever:
    b LoopForever
 80018f6:	e7fe      	b.n	80018f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018f8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001904:	08007b80 	.word	0x08007b80
  ldr r2, =_sbss
 8001908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800190c:	20000468 	.word	0x20000468

08001910 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001910:	e7fe      	b.n	8001910 <ADC1_IRQHandler>

08001912 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f001 f849 	bl	80029b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001922:	2000      	movs	r0, #0
 8001924:	f000 f80e 	bl	8001944 <HAL_InitTick>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	e001      	b.n	8001938 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001934:	f7ff fbda 	bl	80010ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001938:	79fb      	ldrb	r3, [r7, #7]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_InitTick+0x6c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d023      	beq.n	80019a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_InitTick+0x70>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_InitTick+0x6c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001966:	fbb3 f3f1 	udiv	r3, r3, r1
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	4618      	mov	r0, r3
 8001970:	f001 f855 	bl	8002a1e <HAL_SYSTICK_Config>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10f      	bne.n	800199a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d809      	bhi.n	8001994 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f001 f81f 	bl	80029ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_InitTick+0x74>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e007      	b.n	80019a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	e004      	b.n	80019a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e001      	b.n	80019a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008
 80019e0:	20000464 	.word	0x20000464

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000464 	.word	0x20000464

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff ffee 	bl	80019e4 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_Delay+0x44>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000008 	.word	0x20000008

08001a44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3360      	adds	r3, #96	; 0x60
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <LL_ADC_SetOffset+0x44>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	4313      	orrs	r3, r2
 8001adc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ae4:	bf00      	nop
 8001ae6:	371c      	adds	r7, #28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	03fff000 	.word	0x03fff000

08001af4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3360      	adds	r3, #96	; 0x60
 8001b02:	461a      	mov	r2, r3
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3360      	adds	r3, #96	; 0x60
 8001b30:	461a      	mov	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b4a:	bf00      	nop
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	615a      	str	r2, [r3, #20]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3330      	adds	r3, #48	; 0x30
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	4413      	add	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	401a      	ands	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	f003 011f 	and.w	r1, r3, #31
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	3314      	adds	r3, #20
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0e5b      	lsrs	r3, r3, #25
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	0d1b      	lsrs	r3, r3, #20
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	2107      	movs	r1, #7
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	401a      	ands	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	0d1b      	lsrs	r3, r3, #20
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c1e:	bf00      	nop
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	43db      	mvns	r3, r3
 8001c46:	401a      	ands	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0318 	and.w	r3, r3, #24
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c50:	40d9      	lsrs	r1, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	400b      	ands	r3, r1
 8001c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	0007ffff 	.word	0x0007ffff

08001c74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6093      	str	r3, [r2, #8]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cac:	d101      	bne.n	8001cb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001cd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cfc:	d101      	bne.n	8001d02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <LL_ADC_IsEnabled+0x18>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <LL_ADC_IsEnabled+0x1a>
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d101      	bne.n	8001d4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d101      	bne.n	8001d74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e12f      	b.n	8001ffe <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff f9c1 	bl	8001134 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff67 	bl	8001c98 <LL_ADC_IsDeepPowerDownEnabled>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff4d 	bl	8001c74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff82 	bl	8001ce8 <LL_ADC_IsInternalRegulatorEnabled>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d115      	bne.n	8001e16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff66 	bl	8001cc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001df4:	4b84      	ldr	r3, [pc, #528]	; (8002008 <HAL_ADC_Init+0x284>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	4a84      	ldr	r2, [pc, #528]	; (800200c <HAL_ADC_Init+0x288>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	099b      	lsrs	r3, r3, #6
 8001e02:	3301      	adds	r3, #1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e08:	e002      	b.n	8001e10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f9      	bne.n	8001e0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff64 	bl	8001ce8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10d      	bne.n	8001e42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	f043 0210 	orr.w	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff75 	bl	8001d36 <LL_ADC_REG_IsConversionOngoing>
 8001e4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 80c8 	bne.w	8001fec <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 80c4 	bne.w	8001fec <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e6c:	f043 0202 	orr.w	r2, r3, #2
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff49 	bl	8001d10 <LL_ADC_IsEnabled>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e84:	4862      	ldr	r0, [pc, #392]	; (8002010 <HAL_ADC_Init+0x28c>)
 8001e86:	f7ff ff43 	bl	8001d10 <LL_ADC_IsEnabled>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4619      	mov	r1, r3
 8001e96:	485f      	ldr	r0, [pc, #380]	; (8002014 <HAL_ADC_Init+0x290>)
 8001e98:	f7ff fdd4 	bl	8001a44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7e5b      	ldrb	r3, [r3, #25]
 8001ea0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001eac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001eb2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d106      	bne.n	8001ed8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	045b      	lsls	r3, r3, #17
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_ADC_Init+0x294>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	69b9      	ldr	r1, [r7, #24]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff12 	bl	8001d36 <LL_ADC_REG_IsConversionOngoing>
 8001f12:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff1f 	bl	8001d5c <LL_ADC_INJ_IsConversionOngoing>
 8001f1e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d140      	bne.n	8001fa8 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d13d      	bne.n	8001fa8 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7e1b      	ldrb	r3, [r3, #24]
 8001f34:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f36:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f3e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f4e:	f023 0306 	bic.w	r3, r3, #6
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d118      	bne.n	8001f98 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f7c:	4311      	orrs	r1, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f82:	4311      	orrs	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	611a      	str	r2, [r3, #16]
 8001f96:	e007      	b.n	8001fa8 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d10c      	bne.n	8001fca <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f023 010f 	bic.w	r1, r3, #15
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc8:	e007      	b.n	8001fda <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 020f 	bic.w	r2, r2, #15
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f023 0303 	bic.w	r3, r3, #3
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	659a      	str	r2, [r3, #88]	; 0x58
 8001fea:	e007      	b.n	8001ffc <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f043 0210 	orr.w	r2, r3, #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000000 	.word	0x20000000
 800200c:	053e2d63 	.word	0x053e2d63
 8002010:	50040000 	.word	0x50040000
 8002014:	50040300 	.word	0x50040300
 8002018:	fff0c007 	.word	0xfff0c007

0800201c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0b6      	sub	sp, #216	; 0xd8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x22>
 800203a:	2302      	movs	r3, #2
 800203c:	e3d5      	b.n	80027ea <HAL_ADC_ConfigChannel+0x7ce>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fe73 	bl	8001d36 <LL_ADC_REG_IsConversionOngoing>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 83ba 	bne.w	80027cc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d824      	bhi.n	80020aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	3b02      	subs	r3, #2
 8002066:	2b03      	cmp	r3, #3
 8002068:	d81b      	bhi.n	80020a2 <HAL_ADC_ConfigChannel+0x86>
 800206a:	a201      	add	r2, pc, #4	; (adr r2, 8002070 <HAL_ADC_ConfigChannel+0x54>)
 800206c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002070:	08002081 	.word	0x08002081
 8002074:	08002089 	.word	0x08002089
 8002078:	08002091 	.word	0x08002091
 800207c:	08002099 	.word	0x08002099
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	220c      	movs	r2, #12
 8002084:	605a      	str	r2, [r3, #4]
          break;
 8002086:	e011      	b.n	80020ac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2212      	movs	r2, #18
 800208c:	605a      	str	r2, [r3, #4]
          break;
 800208e:	e00d      	b.n	80020ac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2218      	movs	r2, #24
 8002094:	605a      	str	r2, [r3, #4]
          break;
 8002096:	e009      	b.n	80020ac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800209e:	605a      	str	r2, [r3, #4]
          break;
 80020a0:	e004      	b.n	80020ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2206      	movs	r2, #6
 80020a6:	605a      	str	r2, [r3, #4]
          break;
 80020a8:	e000      	b.n	80020ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80020aa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	f7ff fd5f 	bl	8001b7c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fe37 	bl	8001d36 <LL_ADC_REG_IsConversionOngoing>
 80020c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fe43 	bl	8001d5c <LL_ADC_INJ_IsConversionOngoing>
 80020d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 81c1 	bne.w	8002466 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 81bc 	bne.w	8002466 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020f6:	d10f      	bne.n	8002118 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	4619      	mov	r1, r3
 8002104:	f7ff fd66 	bl	8001bd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fd20 	bl	8001b56 <LL_ADC_SetSamplingTimeCommonConfig>
 8002116:	e00e      	b.n	8002136 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	461a      	mov	r2, r3
 8002126:	f7ff fd55 	bl	8001bd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fd10 	bl	8001b56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	08db      	lsrs	r3, r3, #3
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00a      	beq.n	800216e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6919      	ldr	r1, [r3, #16]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002168:	f7ff fca0 	bl	8001aac <LL_ADC_SetOffset>
 800216c:	e17b      	b.n	8002466 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fcbd 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <HAL_ADC_ConfigChannel+0x17e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fcb2 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	e01e      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x1bc>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fca7 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e004      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80021cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x1d4>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	e018      	b.n	8002222 <HAL_ADC_ConfigChannel+0x206>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800220c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e004      	b.n	8002222 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002222:	429a      	cmp	r2, r3
 8002224:	d106      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fc76 	bl	8001b20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fc5a 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x244>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fc4f 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	0e9b      	lsrs	r3, r3, #26
 800225a:	f003 021f 	and.w	r2, r3, #31
 800225e:	e01e      	b.n	800229e <HAL_ADC_ConfigChannel+0x282>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fc44 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800227e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002286:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800228e:	2320      	movs	r3, #32
 8002290:	e004      	b.n	800229c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002292:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x29a>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0e9b      	lsrs	r3, r3, #26
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	e018      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x2cc>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80022da:	2320      	movs	r3, #32
 80022dc:	e004      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80022de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d106      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2200      	movs	r2, #0
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fc13 	bl	8001b20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2102      	movs	r1, #2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff fbf7 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 8002306:	4603      	mov	r3, r0
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x30a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2102      	movs	r1, #2
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fbec 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	0e9b      	lsrs	r3, r3, #26
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	e01e      	b.n	8002364 <HAL_ADC_ConfigChannel+0x348>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2102      	movs	r1, #2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fbe1 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233c:	fa93 f3a3 	rbit	r3, r3
 8002340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002344:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800234c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e004      	b.n	8002362 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236c:	2b00      	cmp	r3, #0
 800236e:	d105      	bne.n	800237c <HAL_ADC_ConfigChannel+0x360>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	e016      	b.n	80023aa <HAL_ADC_ConfigChannel+0x38e>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800238e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002394:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800239c:	2320      	movs	r3, #32
 800239e:	e004      	b.n	80023aa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80023a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d106      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	2102      	movs	r1, #2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fbb2 	bl	8001b20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2103      	movs	r1, #3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fb96 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10a      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x3cc>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2103      	movs	r1, #3
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fb8b 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	0e9b      	lsrs	r3, r3, #26
 80023e2:	f003 021f 	and.w	r2, r3, #31
 80023e6:	e017      	b.n	8002418 <HAL_ADC_ConfigChannel+0x3fc>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2103      	movs	r1, #3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fb80 	bl	8001af4 <LL_ADC_GetOffsetChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002402:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800240a:	2320      	movs	r3, #32
 800240c:	e003      	b.n	8002416 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800240e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x414>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	e011      	b.n	8002454 <HAL_ADC_ConfigChannel+0x438>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800243e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002440:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002448:	2320      	movs	r3, #32
 800244a:	e003      	b.n	8002454 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002454:	429a      	cmp	r2, r3
 8002456:	d106      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2200      	movs	r2, #0
 800245e:	2103      	movs	r1, #3
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fb5d 	bl	8001b20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fc50 	bl	8001d10 <LL_ADC_IsEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 8140 	bne.w	80026f8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	461a      	mov	r2, r3
 8002486:	f7ff fbd1 	bl	8001c2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4a8f      	ldr	r2, [pc, #572]	; (80026cc <HAL_ADC_ConfigChannel+0x6b0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	f040 8131 	bne.w	80026f8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10b      	bne.n	80024be <HAL_ADC_ConfigChannel+0x4a2>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0e9b      	lsrs	r3, r3, #26
 80024ac:	3301      	adds	r3, #1
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2b09      	cmp	r3, #9
 80024b4:	bf94      	ite	ls
 80024b6:	2301      	movls	r3, #1
 80024b8:	2300      	movhi	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	e019      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x4d6>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ce:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80024d6:	2320      	movs	r3, #32
 80024d8:	e003      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80024da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	2b09      	cmp	r3, #9
 80024ea:	bf94      	ite	ls
 80024ec:	2301      	movls	r3, #1
 80024ee:	2300      	movhi	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d079      	beq.n	80025ea <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d107      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x4f6>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	3301      	adds	r3, #1
 800250a:	069b      	lsls	r3, r3, #26
 800250c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002510:	e015      	b.n	800253e <HAL_ADC_ConfigChannel+0x522>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251a:	fa93 f3a3 	rbit	r3, r3
 800251e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002522:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800252a:	2320      	movs	r3, #32
 800252c:	e003      	b.n	8002536 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800252e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	3301      	adds	r3, #1
 8002538:	069b      	lsls	r3, r3, #26
 800253a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_ADC_ConfigChannel+0x542>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	0e9b      	lsrs	r3, r3, #26
 8002550:	3301      	adds	r3, #1
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2101      	movs	r1, #1
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	e017      	b.n	800258e <HAL_ADC_ConfigChannel+0x572>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800256c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e003      	b.n	8002582 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800257a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	2101      	movs	r1, #1
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	ea42 0103 	orr.w	r1, r2, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10a      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x598>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	0e9b      	lsrs	r3, r3, #26
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 021f 	and.w	r2, r3, #31
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	051b      	lsls	r3, r3, #20
 80025b2:	e018      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x5ca>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80025cc:	2320      	movs	r3, #32
 80025ce:	e003      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80025d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d2:	fab3 f383 	clz	r3, r3
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	f003 021f 	and.w	r2, r3, #31
 80025de:	4613      	mov	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4413      	add	r3, r2
 80025e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025e6:	430b      	orrs	r3, r1
 80025e8:	e081      	b.n	80026ee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x5ea>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	0e9b      	lsrs	r3, r3, #26
 80025fc:	3301      	adds	r3, #1
 80025fe:	069b      	lsls	r3, r3, #26
 8002600:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002604:	e015      	b.n	8002632 <HAL_ADC_ConfigChannel+0x616>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800261e:	2320      	movs	r3, #32
 8002620:	e003      	b.n	800262a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	fab3 f383 	clz	r3, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	3301      	adds	r3, #1
 800262c:	069b      	lsls	r3, r3, #26
 800262e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x636>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	3301      	adds	r3, #1
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	e017      	b.n	8002682 <HAL_ADC_ConfigChannel+0x666>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	61fb      	str	r3, [r7, #28]
  return result;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800266a:	2320      	movs	r3, #32
 800266c:	e003      	b.n	8002676 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	ea42 0103 	orr.w	r1, r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x692>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0e9b      	lsrs	r3, r3, #26
 8002698:	3301      	adds	r3, #1
 800269a:	f003 021f 	and.w	r2, r3, #31
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	3b1e      	subs	r3, #30
 80026a6:	051b      	lsls	r3, r3, #20
 80026a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ac:	e01e      	b.n	80026ec <HAL_ADC_ConfigChannel+0x6d0>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	613b      	str	r3, [r7, #16]
  return result;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d104      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e006      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x6bc>
 80026ca:	bf00      	nop
 80026cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	3b1e      	subs	r3, #30
 80026e6:	051b      	lsls	r3, r3, #20
 80026e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ec:	430b      	orrs	r3, r1
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7ff fa6e 	bl	8001bd4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_ADC_ConfigChannel+0x7d8>)
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d06c      	beq.n	80027de <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002704:	483c      	ldr	r0, [pc, #240]	; (80027f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002706:	f7ff f9c3 	bl	8001a90 <LL_ADC_GetCommonPathInternalCh>
 800270a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a3a      	ldr	r2, [pc, #232]	; (80027fc <HAL_ADC_ConfigChannel+0x7e0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d127      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002718:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800271c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d121      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a35      	ldr	r2, [pc, #212]	; (8002800 <HAL_ADC_ConfigChannel+0x7e4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d157      	bne.n	80027de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800272e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002732:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002736:	4619      	mov	r1, r3
 8002738:	482f      	ldr	r0, [pc, #188]	; (80027f8 <HAL_ADC_ConfigChannel+0x7dc>)
 800273a:	f7ff f996 	bl	8001a6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800273e:	4b31      	ldr	r3, [pc, #196]	; (8002804 <HAL_ADC_ConfigChannel+0x7e8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	4a30      	ldr	r2, [pc, #192]	; (8002808 <HAL_ADC_ConfigChannel+0x7ec>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	099b      	lsrs	r3, r3, #6
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002758:	e002      	b.n	8002760 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3b01      	subs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f9      	bne.n	800275a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002766:	e03a      	b.n	80027de <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a27      	ldr	r2, [pc, #156]	; (800280c <HAL_ADC_ConfigChannel+0x7f0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d113      	bne.n	800279a <HAL_ADC_ConfigChannel+0x77e>
 8002772:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <HAL_ADC_ConfigChannel+0x7e4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d12a      	bne.n	80027de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800278c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002790:	4619      	mov	r1, r3
 8002792:	4819      	ldr	r0, [pc, #100]	; (80027f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002794:	f7ff f969 	bl	8001a6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002798:	e021      	b.n	80027de <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <HAL_ADC_ConfigChannel+0x7f4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d11c      	bne.n	80027de <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d116      	bne.n	80027de <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a12      	ldr	r2, [pc, #72]	; (8002800 <HAL_ADC_ConfigChannel+0x7e4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d111      	bne.n	80027de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027c2:	4619      	mov	r1, r3
 80027c4:	480c      	ldr	r0, [pc, #48]	; (80027f8 <HAL_ADC_ConfigChannel+0x7dc>)
 80027c6:	f7ff f950 	bl	8001a6a <LL_ADC_SetCommonPathInternalCh>
 80027ca:	e008      	b.n	80027de <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f043 0220 	orr.w	r2, r3, #32
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80027e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	37d8      	adds	r7, #216	; 0xd8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	80080000 	.word	0x80080000
 80027f8:	50040300 	.word	0x50040300
 80027fc:	c7520000 	.word	0xc7520000
 8002800:	50040000 	.word	0x50040000
 8002804:	20000000 	.word	0x20000000
 8002808:	053e2d63 	.word	0x053e2d63
 800280c:	cb840000 	.word	0xcb840000
 8002810:	80000001 	.word	0x80000001

08002814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002830:	4013      	ands	r3, r2
 8002832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800283c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002846:	4a04      	ldr	r2, [pc, #16]	; (8002858 <__NVIC_SetPriorityGrouping+0x44>)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	60d3      	str	r3, [r2, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__NVIC_GetPriorityGrouping+0x18>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	2b00      	cmp	r3, #0
 8002888:	db0b      	blt.n	80028a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	4907      	ldr	r1, [pc, #28]	; (80028b0 <__NVIC_EnableIRQ+0x38>)
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2001      	movs	r0, #1
 800289a:	fa00 f202 	lsl.w	r2, r0, r2
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000e100 	.word	0xe000e100

080028b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	db0a      	blt.n	80028de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	490c      	ldr	r1, [pc, #48]	; (8002900 <__NVIC_SetPriority+0x4c>)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	0112      	lsls	r2, r2, #4
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	440b      	add	r3, r1
 80028d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028dc:	e00a      	b.n	80028f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4908      	ldr	r1, [pc, #32]	; (8002904 <__NVIC_SetPriority+0x50>)
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3b04      	subs	r3, #4
 80028ec:	0112      	lsls	r2, r2, #4
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	440b      	add	r3, r1
 80028f2:	761a      	strb	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f1c3 0307 	rsb	r3, r3, #7
 8002922:	2b04      	cmp	r3, #4
 8002924:	bf28      	it	cs
 8002926:	2304      	movcs	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3304      	adds	r3, #4
 800292e:	2b06      	cmp	r3, #6
 8002930:	d902      	bls.n	8002938 <NVIC_EncodePriority+0x30>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3b03      	subs	r3, #3
 8002936:	e000      	b.n	800293a <NVIC_EncodePriority+0x32>
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	f04f 32ff 	mov.w	r2, #4294967295
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	401a      	ands	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002950:	f04f 31ff 	mov.w	r1, #4294967295
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43d9      	mvns	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	4313      	orrs	r3, r2
         );
}
 8002962:	4618      	mov	r0, r3
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002980:	d301      	bcc.n	8002986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002982:	2301      	movs	r3, #1
 8002984:	e00f      	b.n	80029a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <SysTick_Config+0x40>)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298e:	210f      	movs	r1, #15
 8002990:	f04f 30ff 	mov.w	r0, #4294967295
 8002994:	f7ff ff8e 	bl	80028b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SysTick_Config+0x40>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <SysTick_Config+0x40>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff29 	bl	8002814 <__NVIC_SetPriorityGrouping>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029dc:	f7ff ff3e 	bl	800285c <__NVIC_GetPriorityGrouping>
 80029e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f7ff ff8e 	bl	8002908 <NVIC_EncodePriority>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff5d 	bl	80028b4 <__NVIC_SetPriority>
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff31 	bl	8002878 <__NVIC_EnableIRQ>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff ffa2 	bl	8002970 <SysTick_Config>
 8002a2c:	4603      	mov	r3, r0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0ac      	b.n	8002ba4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f8b2 	bl	8002bb8 <DFSDM_GetChannelFromInstance>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4a55      	ldr	r2, [pc, #340]	; (8002bac <HAL_DFSDM_ChannelInit+0x174>)
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e09f      	b.n	8002ba4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7fe fba5 	bl	80011b4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002a6a:	4b51      	ldr	r3, [pc, #324]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x178>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	4a4f      	ldr	r2, [pc, #316]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x178>)
 8002a72:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002a74:	4b4e      	ldr	r3, [pc, #312]	; (8002bb0 <HAL_DFSDM_ChannelInit+0x178>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d125      	bne.n	8002ac8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002a7c:	4b4d      	ldr	r3, [pc, #308]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4c      	ldr	r2, [pc, #304]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a86:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002a88:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4948      	ldr	r1, [pc, #288]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a46      	ldr	r2, [pc, #280]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a9c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002aa0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	791b      	ldrb	r3, [r3, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d108      	bne.n	8002abc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002aaa:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	493f      	ldr	r1, [pc, #252]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002abc:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a3c      	ldr	r2, [pc, #240]	; (8002bb4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002ad6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ae6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002aec:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 020f 	bic.w	r2, r2, #15
 8002b04:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002b2c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6899      	ldr	r1, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f002 0207 	and.w	r2, r2, #7
 8002b58:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b84:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f810 	bl	8002bb8 <DFSDM_GetChannelFromInstance>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4904      	ldr	r1, [pc, #16]	; (8002bac <HAL_DFSDM_ChannelInit+0x174>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000030 	.word	0x20000030
 8002bb0:	2000002c 	.word	0x2000002c
 8002bb4:	40016000 	.word	0x40016000

08002bb8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <DFSDM_GetChannelFromInstance+0x7c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d102      	bne.n	8002bce <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e02b      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <DFSDM_GetChannelFromInstance+0x80>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d102      	bne.n	8002bdc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	e024      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <DFSDM_GetChannelFromInstance+0x84>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d102      	bne.n	8002bea <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002be4:	2302      	movs	r3, #2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e01d      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <DFSDM_GetChannelFromInstance+0x88>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d102      	bne.n	8002bf8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e016      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <DFSDM_GetChannelFromInstance+0x8c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d102      	bne.n	8002c06 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c00:	2305      	movs	r3, #5
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e00f      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <DFSDM_GetChannelFromInstance+0x90>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d102      	bne.n	8002c14 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c0e:	2306      	movs	r3, #6
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	e008      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <DFSDM_GetChannelFromInstance+0x94>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c1c:	2307      	movs	r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e001      	b.n	8002c26 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c22:	2303      	movs	r3, #3
 8002c24:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40016000 	.word	0x40016000
 8002c38:	40016020 	.word	0x40016020
 8002c3c:	40016040 	.word	0x40016040
 8002c40:	40016080 	.word	0x40016080
 8002c44:	400160a0 	.word	0x400160a0
 8002c48:	400160c0 	.word	0x400160c0
 8002c4c:	400160e0 	.word	0x400160e0

08002c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5e:	e166      	b.n	8002f2e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8158 	beq.w	8002f28 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d005      	beq.n	8002c90 <HAL_GPIO_Init+0x40>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d130      	bne.n	8002cf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f003 0201 	and.w	r2, r3, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d017      	beq.n	8002d2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d123      	bne.n	8002d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	6939      	ldr	r1, [r7, #16]
 8002d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0203 	and.w	r2, r3, #3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80b2 	beq.w	8002f28 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc4:	4b61      	ldr	r3, [pc, #388]	; (8002f4c <HAL_GPIO_Init+0x2fc>)
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	4a60      	ldr	r2, [pc, #384]	; (8002f4c <HAL_GPIO_Init+0x2fc>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6613      	str	r3, [r2, #96]	; 0x60
 8002dd0:	4b5e      	ldr	r3, [pc, #376]	; (8002f4c <HAL_GPIO_Init+0x2fc>)
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ddc:	4a5c      	ldr	r2, [pc, #368]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	089b      	lsrs	r3, r3, #2
 8002de2:	3302      	adds	r3, #2
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	220f      	movs	r2, #15
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e06:	d02b      	beq.n	8002e60 <HAL_GPIO_Init+0x210>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d025      	beq.n	8002e5c <HAL_GPIO_Init+0x20c>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a51      	ldr	r2, [pc, #324]	; (8002f58 <HAL_GPIO_Init+0x308>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d01f      	beq.n	8002e58 <HAL_GPIO_Init+0x208>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a50      	ldr	r2, [pc, #320]	; (8002f5c <HAL_GPIO_Init+0x30c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d019      	beq.n	8002e54 <HAL_GPIO_Init+0x204>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a4f      	ldr	r2, [pc, #316]	; (8002f60 <HAL_GPIO_Init+0x310>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_Init+0x200>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a4e      	ldr	r2, [pc, #312]	; (8002f64 <HAL_GPIO_Init+0x314>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_Init+0x1fc>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a4d      	ldr	r2, [pc, #308]	; (8002f68 <HAL_GPIO_Init+0x318>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x1f8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <HAL_GPIO_Init+0x31c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_Init+0x1f4>
 8002e40:	2307      	movs	r3, #7
 8002e42:	e00e      	b.n	8002e62 <HAL_GPIO_Init+0x212>
 8002e44:	2308      	movs	r3, #8
 8002e46:	e00c      	b.n	8002e62 <HAL_GPIO_Init+0x212>
 8002e48:	2306      	movs	r3, #6
 8002e4a:	e00a      	b.n	8002e62 <HAL_GPIO_Init+0x212>
 8002e4c:	2305      	movs	r3, #5
 8002e4e:	e008      	b.n	8002e62 <HAL_GPIO_Init+0x212>
 8002e50:	2304      	movs	r3, #4
 8002e52:	e006      	b.n	8002e62 <HAL_GPIO_Init+0x212>
 8002e54:	2303      	movs	r3, #3
 8002e56:	e004      	b.n	8002e62 <HAL_GPIO_Init+0x212>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e002      	b.n	8002e62 <HAL_GPIO_Init+0x212>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_GPIO_Init+0x212>
 8002e60:	2300      	movs	r3, #0
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	f002 0203 	and.w	r2, r2, #3
 8002e68:	0092      	lsls	r2, r2, #2
 8002e6a:	4093      	lsls	r3, r2
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e72:	4937      	ldr	r1, [pc, #220]	; (8002f50 <HAL_GPIO_Init+0x300>)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e80:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_GPIO_Init+0x320>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ea4:	4a32      	ldr	r2, [pc, #200]	; (8002f70 <HAL_GPIO_Init+0x320>)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eaa:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_GPIO_Init+0x320>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_GPIO_Init+0x320>)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ed4:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <HAL_GPIO_Init+0x320>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_GPIO_Init+0x320>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <HAL_GPIO_Init+0x320>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f22:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <HAL_GPIO_Init+0x320>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f47f ae91 	bne.w	8002c60 <HAL_GPIO_Init+0x10>
  }
}
 8002f3e:	bf00      	nop
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40010000 	.word	0x40010000
 8002f54:	48000400 	.word	0x48000400
 8002f58:	48000800 	.word	0x48000800
 8002f5c:	48000c00 	.word	0x48000c00
 8002f60:	48001000 	.word	0x48001000
 8002f64:	48001400 	.word	0x48001400
 8002f68:	48001800 	.word	0x48001800
 8002f6c:	48001c00 	.word	0x48001c00
 8002f70:	40010400 	.word	0x40010400

08002f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e001      	b.n	8002f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb4:	787b      	ldrb	r3, [r7, #1]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fc0:	e002      	b.n	8002fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fea:	4a05      	ldr	r2, [pc, #20]	; (8003000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f806 	bl	8003004 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40010400 	.word	0x40010400

08003004 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e081      	b.n	8003130 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fe f91b 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2224      	movs	r2, #36	; 0x24
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800306a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800307a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003090:	609a      	str	r2, [r3, #8]
 8003092:	e006      	b.n	80030a2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d104      	bne.n	80030b4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030c6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69d9      	ldr	r1, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1a      	ldr	r2, [r3, #32]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	d138      	bne.n	80031c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003158:	2302      	movs	r3, #2
 800315a:	e032      	b.n	80031c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800318a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6819      	ldr	r1, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d139      	bne.n	8003258 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e033      	b.n	800325a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2224      	movs	r2, #36	; 0x24
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003220:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	e000      	b.n	800325a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af02      	add	r7, sp, #8
 800326e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003274:	f7fe fbb6 	bl	80019e4 <HAL_GetTick>
 8003278:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e08f      	b.n	80033a6 <HAL_OSPI_Init+0x13e>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 8088 	bne.w	80033a6 <HAL_OSPI_Init+0x13e>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe f84e 	bl	8001338 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800329c:	f241 3188 	movw	r1, #5000	; 0x1388
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f887 	bl	80033b4 <HAL_OSPI_SetTimeout>

     /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1, (OCTOSPI_DCR1_MTYP | OCTOSPI_DCR1_DEVSIZE | OCTOSPI_DCR1_CSHT |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4b40      	ldr	r3, [pc, #256]	; (80033b0 <HAL_OSPI_Init+0x148>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68d1      	ldr	r1, [r2, #12]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6912      	ldr	r2, [r2, #16]
 80032b8:	3a01      	subs	r2, #1
 80032ba:	0412      	lsls	r2, r2, #16
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6952      	ldr	r2, [r2, #20]
 80032c2:	3a01      	subs	r2, #1
 80032c4:	0212      	lsls	r2, r2, #8
 80032c6:	4311      	orrs	r1, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	69d2      	ldr	r2, [r2, #28]
 80032cc:	4311      	orrs	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	430b      	orrs	r3, r1
 80032d4:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0412      	lsls	r2, r2, #16
 80032e0:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	021a      	lsls	r2, r3, #8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	2120      	movs	r1, #32
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fbb7 	bl	8003a7c <OSPI_WaitFlagStateUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d146      	bne.n	80033a6 <HAL_OSPI_Init+0x13e>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	1e5a      	subs	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800334e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d107      	bne.n	800338e <HAL_OSPI_Init+0x126>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0202 	orr.w	r2, r2, #2
 800338c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003396:	d103      	bne.n	80033a0 <HAL_OSPI_Init+0x138>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
 800339e:	e002      	b.n	80033a6 <HAL_OSPI_Init+0x13e>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	f8e0f8fc 	.word	0xf8e0f8fc

080033b4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b092      	sub	sp, #72	; 0x48
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a08      	ldr	r2, [pc, #32]	; (8003414 <HAL_OSPIM_Config+0x40>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d105      	bne.n	8003402 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003400:	e004      	b.n	800340c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003402:	2301      	movs	r3, #1
 8003404:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800340c:	2300      	movs	r3, #0
 800340e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003412:	e01f      	b.n	8003454 <HAL_OSPIM_Config+0x80>
 8003414:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003418:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800341c:	3301      	adds	r3, #1
 800341e:	b2d8      	uxtb	r0, r3
 8003420:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003424:	f107 0114 	add.w	r1, r7, #20
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	4619      	mov	r1, r3
 8003434:	f000 fb5a 	bl	8003aec <OSPIM_GetConfig>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2208      	movs	r2, #8
 8003448:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800344a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800344e:	3301      	adds	r3, #1
 8003450:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003454:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003458:	2b01      	cmp	r3, #1
 800345a:	d9dd      	bls.n	8003418 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 800345c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 82fe 	bne.w	8003a62 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003466:	4bcd      	ldr	r3, [pc, #820]	; (800379c <HAL_OSPIM_Config+0x3c8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003472:	4bca      	ldr	r3, [pc, #808]	; (800379c <HAL_OSPIM_Config+0x3c8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4ac9      	ldr	r2, [pc, #804]	; (800379c <HAL_OSPIM_Config+0x3c8>)
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800347e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800348a:	4bc5      	ldr	r3, [pc, #788]	; (80037a0 <HAL_OSPIM_Config+0x3cc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003496:	4bc2      	ldr	r3, [pc, #776]	; (80037a0 <HAL_OSPIM_Config+0x3cc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4ac1      	ldr	r2, [pc, #772]	; (80037a0 <HAL_OSPIM_Config+0x3cc>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80034a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80034ae:	49bd      	ldr	r1, [pc, #756]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 80034b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80034be:	4413      	add	r3, r2
 80034c0:	3b2c      	subs	r3, #44	; 0x2c
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	48b5      	ldr	r0, [pc, #724]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 80034ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80034dc:	4413      	add	r3, r2
 80034de:	3b2c      	subs	r3, #44	; 0x2c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4403      	add	r3, r0
 80034ec:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80034ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80034fc:	4413      	add	r3, r2
 80034fe:	3b34      	subs	r3, #52	; 0x34
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 80ac 	beq.w	8003660 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003508:	49a6      	ldr	r1, [pc, #664]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 800350a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003518:	4413      	add	r3, r2
 800351a:	3b34      	subs	r3, #52	; 0x34
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3b01      	subs	r3, #1
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	6859      	ldr	r1, [r3, #4]
 8003526:	489f      	ldr	r0, [pc, #636]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 8003528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003536:	4413      	add	r3, r2
 8003538:	3b34      	subs	r3, #52	; 0x34
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3b01      	subs	r3, #1
 800353e:	f021 0201 	bic.w	r2, r1, #1
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4403      	add	r3, r0
 8003546:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003556:	4413      	add	r3, r2
 8003558:	3b30      	subs	r3, #48	; 0x30
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01f      	beq.n	80035a0 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003560:	4990      	ldr	r1, [pc, #576]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 8003562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003570:	4413      	add	r3, r2
 8003572:	3b30      	subs	r3, #48	; 0x30
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3b01      	subs	r3, #1
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	4889      	ldr	r0, [pc, #548]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 8003580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800358e:	4413      	add	r3, r2
 8003590:	3b30      	subs	r3, #48	; 0x30
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3b01      	subs	r3, #1
 8003596:	f021 0210 	bic.w	r2, r1, #16
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4403      	add	r3, r0
 800359e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80035ae:	4413      	add	r3, r2
 80035b0:	3b28      	subs	r3, #40	; 0x28
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d023      	beq.n	8003600 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80035b8:	497a      	ldr	r1, [pc, #488]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 80035ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80035c8:	4413      	add	r3, r2
 80035ca:	3b28      	subs	r3, #40	; 0x28
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	6859      	ldr	r1, [r3, #4]
 80035da:	4872      	ldr	r0, [pc, #456]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 80035dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80035ea:	4413      	add	r3, r2
 80035ec:	3b28      	subs	r3, #40	; 0x28
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4403      	add	r3, r0
 80035fe:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800360e:	4413      	add	r3, r2
 8003610:	3b24      	subs	r3, #36	; 0x24
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d023      	beq.n	8003660 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003618:	4962      	ldr	r1, [pc, #392]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 800361a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003628:	4413      	add	r3, r2
 800362a:	3b24      	subs	r3, #36	; 0x24
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3b01      	subs	r3, #1
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	485a      	ldr	r0, [pc, #360]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 800363c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800364a:	4413      	add	r3, r2
 800364c:	3b24      	subs	r3, #36	; 0x24
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3b01      	subs	r3, #1
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4403      	add	r3, r0
 800365e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003674:	4413      	add	r3, r2
 8003676:	3b34      	subs	r3, #52	; 0x34
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4299      	cmp	r1, r3
 800367c:	d03c      	beq.n	80036f8 <HAL_OSPIM_Config+0x324>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003692:	4413      	add	r3, r2
 8003694:	3b30      	subs	r3, #48	; 0x30
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4299      	cmp	r1, r3
 800369a:	d02d      	beq.n	80036f8 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6899      	ldr	r1, [r3, #8]
 80036a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036b0:	4413      	add	r3, r2
 80036b2:	3b2c      	subs	r3, #44	; 0x2c
 80036b4:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80036b6:	4299      	cmp	r1, r3
 80036b8:	d01e      	beq.n	80036f8 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	68d9      	ldr	r1, [r3, #12]
 80036be:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036ce:	4413      	add	r3, r2
 80036d0:	3b28      	subs	r3, #40	; 0x28
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4299      	cmp	r1, r3
 80036d6:	d00f      	beq.n	80036f8 <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	6919      	ldr	r1, [r3, #16]
 80036dc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036ec:	4413      	add	r3, r2
 80036ee:	3b24      	subs	r3, #36	; 0x24
 80036f0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036f2:	4299      	cmp	r1, r3
 80036f4:	f040 80e0 	bne.w	80038b8 <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80036f8:	492a      	ldr	r1, [pc, #168]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 80036fa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800370a:	4413      	add	r3, r2
 800370c:	3b34      	subs	r3, #52	; 0x34
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3b01      	subs	r3, #1
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	4822      	ldr	r0, [pc, #136]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 800371a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800372a:	4413      	add	r3, r2
 800372c:	3b34      	subs	r3, #52	; 0x34
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3b01      	subs	r3, #1
 8003732:	f021 0201 	bic.w	r2, r1, #1
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4403      	add	r3, r0
 800373a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800373c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800374c:	4413      	add	r3, r2
 800374e:	3b30      	subs	r3, #48	; 0x30
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d028      	beq.n	80037a8 <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003756:	4913      	ldr	r1, [pc, #76]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 8003758:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003768:	4413      	add	r3, r2
 800376a:	3b30      	subs	r3, #48	; 0x30
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3b01      	subs	r3, #1
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	480b      	ldr	r0, [pc, #44]	; (80037a4 <HAL_OSPIM_Config+0x3d0>)
 8003778:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003788:	4413      	add	r3, r2
 800378a:	3b30      	subs	r3, #48	; 0x30
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3b01      	subs	r3, #1
 8003790:	f021 0210 	bic.w	r2, r1, #16
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4403      	add	r3, r0
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	e005      	b.n	80037a8 <HAL_OSPIM_Config+0x3d4>
 800379c:	a0001000 	.word	0xa0001000
 80037a0:	a0001400 	.word	0xa0001400
 80037a4:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80037a8:	49b1      	ldr	r1, [pc, #708]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 80037aa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037ba:	4413      	add	r3, r2
 80037bc:	3b2c      	subs	r3, #44	; 0x2c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	48a9      	ldr	r0, [pc, #676]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 80037ca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037da:	4413      	add	r3, r2
 80037dc:	3b2c      	subs	r3, #44	; 0x2c
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4403      	add	r3, r0
 80037ea:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80037ec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037fc:	4413      	add	r3, r2
 80037fe:	3b28      	subs	r3, #40	; 0x28
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d025      	beq.n	8003852 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003806:	499a      	ldr	r1, [pc, #616]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 8003808:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003818:	4413      	add	r3, r2
 800381a:	3b28      	subs	r3, #40	; 0x28
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3b01      	subs	r3, #1
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	4891      	ldr	r0, [pc, #580]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 800382c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800383c:	4413      	add	r3, r2
 800383e:	3b28      	subs	r3, #40	; 0x28
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3b01      	subs	r3, #1
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4403      	add	r3, r0
 8003850:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003852:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003856:	4613      	mov	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003862:	4413      	add	r3, r2
 8003864:	3b24      	subs	r3, #36	; 0x24
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d025      	beq.n	80038b8 <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800386c:	4980      	ldr	r1, [pc, #512]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 800386e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800387e:	4413      	add	r3, r2
 8003880:	3b24      	subs	r3, #36	; 0x24
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3b01      	subs	r3, #1
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	4877      	ldr	r0, [pc, #476]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 8003892:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80038a2:	4413      	add	r3, r2
 80038a4:	3b24      	subs	r3, #36	; 0x24
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4403      	add	r3, r0
 80038b6:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80038b8:	4a6d      	ldr	r2, [pc, #436]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	3b01      	subs	r3, #1
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038cc:	025b      	lsls	r3, r3, #9
 80038ce:	431a      	orrs	r2, r3
 80038d0:	4967      	ldr	r1, [pc, #412]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80038e2:	4a63      	ldr	r2, [pc, #396]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f023 0203 	bic.w	r2, r3, #3
 80038f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	431a      	orrs	r2, r3
 80038fa:	495d      	ldr	r1, [pc, #372]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3b01      	subs	r3, #1
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d014      	beq.n	800393e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003914:	4a56      	ldr	r2, [pc, #344]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003928:	015b      	lsls	r3, r3, #5
 800392a:	431a      	orrs	r2, r3
 800392c:	4950      	ldr	r1, [pc, #320]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	f042 0210 	orr.w	r2, r2, #16
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d019      	beq.n	800397e <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800394a:	4a49      	ldr	r2, [pc, #292]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	3b01      	subs	r3, #1
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003962:	049b      	lsls	r3, r3, #18
 8003964:	431a      	orrs	r2, r3
 8003966:	4942      	ldr	r1, [pc, #264]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	3b01      	subs	r3, #1
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	e01c      	b.n	80039b8 <HAL_OSPIM_Config+0x5e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d018      	beq.n	80039b8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003986:	4a3a      	ldr	r2, [pc, #232]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	3b01      	subs	r3, #1
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800399c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800399e:	069b      	lsls	r3, r3, #26
 80039a0:	431a      	orrs	r2, r3
 80039a2:	4933      	ldr	r1, [pc, #204]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d019      	beq.n	80039f8 <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80039c4:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039dc:	049b      	lsls	r3, r3, #18
 80039de:	431a      	orrs	r2, r3
 80039e0:	4923      	ldr	r1, [pc, #140]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	e01c      	b.n	8003a32 <HAL_OSPIM_Config+0x65e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d018      	beq.n	8003a32 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003a00:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a18:	069b      	lsls	r3, r3, #26
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	4914      	ldr	r1, [pc, #80]	; (8003a70 <HAL_OSPIM_Config+0x69c>)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003a32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <HAL_OSPIM_Config+0x6a0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <HAL_OSPIM_Config+0x6a0>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003a4a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_OSPIM_Config+0x6a4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <HAL_OSPIM_Config+0x6a4>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003a62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3748      	adds	r7, #72	; 0x48
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	50061c00 	.word	0x50061c00
 8003a74:	a0001000 	.word	0xa0001000
 8003a78:	a0001400 	.word	0xa0001400

08003a7c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a8c:	e01a      	b.n	8003ac4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d016      	beq.n	8003ac4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a96:	f7fd ffa5 	bl	80019e4 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab2:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e00e      	b.n	8003ae2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a1a      	ldr	r2, [r3, #32]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1d6      	bne.n	8003a8e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <OSPIM_GetConfig+0x26>
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d802      	bhi.n	8003b12 <OSPIM_GetConfig+0x26>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
 8003b16:	e08e      	b.n	8003c36 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d101      	bne.n	8003b40 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003b3c:	4b41      	ldr	r3, [pc, #260]	; (8003c44 <OSPIM_GetConfig+0x158>)
 8003b3e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	e074      	b.n	8003c30 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003b46:	4a40      	ldr	r2, [pc, #256]	; (8003c48 <OSPIM_GetConfig+0x15c>)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4053      	eors	r3, r2
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4053      	eors	r3, r2
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4053      	eors	r3, r2
 8003ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d018      	beq.n	8003bee <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4053      	eors	r3, r2
 8003bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d111      	bne.n	8003bee <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	e005      	b.n	8003bee <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3301      	adds	r3, #1
 8003be6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d018      	beq.n	8003c2a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4053      	eors	r3, r2
 8003bfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d111      	bne.n	8003c2a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3301      	adds	r3, #1
 8003c14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	611a      	str	r2, [r3, #16]
 8003c1c:	e005      	b.n	8003c2a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3301      	adds	r3, #1
 8003c22:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d987      	bls.n	8003b46 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	04040222 	.word	0x04040222
 8003c48:	50061c00 	.word	0x50061c00

08003c4c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5a:	6013      	str	r3, [r2, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40007000 	.word	0x40007000

08003c6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c70:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7c:	d102      	bne.n	8003c84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c82:	e00b      	b.n	8003c9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c92:	d102      	bne.n	8003c9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c98:	e000      	b.n	8003c9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003c9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40007000 	.word	0x40007000

08003cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d141      	bne.n	8003d3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cba:	4b4b      	ldr	r3, [pc, #300]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc6:	d131      	bne.n	8003d2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc8:	4b47      	ldr	r3, [pc, #284]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cce:	4a46      	ldr	r2, [pc, #280]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd8:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ce0:	4a41      	ldr	r2, [pc, #260]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003ce8:	4b40      	ldr	r3, [pc, #256]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2232      	movs	r2, #50	; 0x32
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	4a3f      	ldr	r2, [pc, #252]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	0c9b      	lsrs	r3, r3, #18
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfe:	e002      	b.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d06:	4b38      	ldr	r3, [pc, #224]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d12:	d102      	bne.n	8003d1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f2      	bne.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d1a:	4b33      	ldr	r3, [pc, #204]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d26:	d158      	bne.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e057      	b.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d2c:	4b2e      	ldr	r3, [pc, #184]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d32:	4a2d      	ldr	r2, [pc, #180]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d3c:	e04d      	b.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d44:	d141      	bne.n	8003dca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d46:	4b28      	ldr	r3, [pc, #160]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d52:	d131      	bne.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d54:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d5a:	4a23      	ldr	r2, [pc, #140]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d64:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2232      	movs	r2, #50	; 0x32
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	0c9b      	lsrs	r3, r3, #18
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8a:	e002      	b.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d102      	bne.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f2      	bne.n	8003d8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db2:	d112      	bne.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e011      	b.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003dc8:	e007      	b.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dd2:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40007000 	.word	0x40007000
 8003dec:	20000000 	.word	0x20000000
 8003df0:	431bde83 	.word	0x431bde83

08003df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f000 bc16 	b.w	8004634 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e08:	4ba0      	ldr	r3, [pc, #640]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e12:	4b9e      	ldr	r3, [pc, #632]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80e4 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4c>
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	f040 808b 	bne.w	8003f4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	f040 8087 	bne.w	8003f4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e40:	4b92      	ldr	r3, [pc, #584]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_OscConfig+0x64>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e3ed      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	4b8b      	ldr	r3, [pc, #556]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <HAL_RCC_OscConfig+0x7e>
 8003e68:	4b88      	ldr	r3, [pc, #544]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e70:	e005      	b.n	8003e7e <HAL_RCC_OscConfig+0x8a>
 8003e72:	4b86      	ldr	r3, [pc, #536]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d223      	bcs.n	8003eca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fdca 	bl	8004a20 <RCC_SetFlashLatencyFromMSIRange>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e3ce      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e96:	4b7d      	ldr	r3, [pc, #500]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7c      	ldr	r2, [pc, #496]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003e9c:	f043 0308 	orr.w	r3, r3, #8
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4b7a      	ldr	r3, [pc, #488]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	4977      	ldr	r1, [pc, #476]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eb4:	4b75      	ldr	r3, [pc, #468]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	4972      	ldr	r1, [pc, #456]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
 8003ec8:	e025      	b.n	8003f16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eca:	4b70      	ldr	r3, [pc, #448]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6f      	ldr	r2, [pc, #444]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003ed0:	f043 0308 	orr.w	r3, r3, #8
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b6d      	ldr	r3, [pc, #436]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	496a      	ldr	r1, [pc, #424]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	4965      	ldr	r1, [pc, #404]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fd8a 	bl	8004a20 <RCC_SetFlashLatencyFromMSIRange>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e38e      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f16:	f000 fcbf 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	4b5b      	ldr	r3, [pc, #364]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	495a      	ldr	r1, [pc, #360]	; (8004090 <HAL_RCC_OscConfig+0x29c>)
 8003f28:	5ccb      	ldrb	r3, [r1, r3]
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	4a58      	ldr	r2, [pc, #352]	; (8004094 <HAL_RCC_OscConfig+0x2a0>)
 8003f34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f36:	4b58      	ldr	r3, [pc, #352]	; (8004098 <HAL_RCC_OscConfig+0x2a4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd fd02 	bl	8001944 <HAL_InitTick>
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d052      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	e372      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d032      	beq.n	8003fbc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f56:	4b4d      	ldr	r3, [pc, #308]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a4c      	ldr	r2, [pc, #304]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f62:	f7fd fd3f 	bl	80019e4 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f6a:	f7fd fd3b 	bl	80019e4 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e35b      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f7c:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f88:	4b40      	ldr	r3, [pc, #256]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a3f      	ldr	r2, [pc, #252]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003f8e:	f043 0308 	orr.w	r3, r3, #8
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4b3d      	ldr	r3, [pc, #244]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	493a      	ldr	r1, [pc, #232]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa6:	4b39      	ldr	r3, [pc, #228]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	4935      	ldr	r1, [pc, #212]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
 8003fba:	e01a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fbc:	4b33      	ldr	r3, [pc, #204]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a32      	ldr	r2, [pc, #200]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fd0c 	bl	80019e4 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd0:	f7fd fd08 	bl	80019e4 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e328      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x1dc>
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ff0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d073      	beq.n	80040e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d005      	beq.n	8004010 <HAL_RCC_OscConfig+0x21c>
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d10e      	bne.n	8004028 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d10b      	bne.n	8004028 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	4b1e      	ldr	r3, [pc, #120]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d063      	beq.n	80040e4 <HAL_RCC_OscConfig+0x2f0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d15f      	bne.n	80040e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e305      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d106      	bne.n	8004040 <HAL_RCC_OscConfig+0x24c>
 8004032:	4b16      	ldr	r3, [pc, #88]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a15      	ldr	r2, [pc, #84]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e01d      	b.n	800407c <HAL_RCC_OscConfig+0x288>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004048:	d10c      	bne.n	8004064 <HAL_RCC_OscConfig+0x270>
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_RCC_OscConfig+0x298>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a0f      	ldr	r2, [pc, #60]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8004050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a0c      	ldr	r2, [pc, #48]	; (800408c <HAL_RCC_OscConfig+0x298>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e00b      	b.n	800407c <HAL_RCC_OscConfig+0x288>
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a08      	ldr	r2, [pc, #32]	; (800408c <HAL_RCC_OscConfig+0x298>)
 800406a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a05      	ldr	r2, [pc, #20]	; (800408c <HAL_RCC_OscConfig+0x298>)
 8004076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01b      	beq.n	80040bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fd fcae 	bl	80019e4 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800408a:	e010      	b.n	80040ae <HAL_RCC_OscConfig+0x2ba>
 800408c:	40021000 	.word	0x40021000
 8004090:	08007b00 	.word	0x08007b00
 8004094:	20000000 	.word	0x20000000
 8004098:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fd fca2 	bl	80019e4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e2c2      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ae:	4baf      	ldr	r3, [pc, #700]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x2a8>
 80040ba:	e014      	b.n	80040e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd fc92 	bl	80019e4 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fd fc8e 	bl	80019e4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	; 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e2ae      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040d6:	4ba5      	ldr	r3, [pc, #660]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x2d0>
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d060      	beq.n	80041b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_OscConfig+0x310>
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d119      	bne.n	8004132 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d116      	bne.n	8004132 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004104:	4b99      	ldr	r3, [pc, #612]	; (800436c <HAL_RCC_OscConfig+0x578>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_RCC_OscConfig+0x328>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e28b      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411c:	4b93      	ldr	r3, [pc, #588]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	4990      	ldr	r1, [pc, #576]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004130:	e040      	b.n	80041b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d023      	beq.n	8004182 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800413a:	4b8c      	ldr	r3, [pc, #560]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a8b      	ldr	r2, [pc, #556]	; (800436c <HAL_RCC_OscConfig+0x578>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004146:	f7fd fc4d 	bl	80019e4 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414e:	f7fd fc49 	bl	80019e4 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e269      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004160:	4b82      	ldr	r3, [pc, #520]	; (800436c <HAL_RCC_OscConfig+0x578>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416c:	4b7f      	ldr	r3, [pc, #508]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	061b      	lsls	r3, r3, #24
 800417a:	497c      	ldr	r1, [pc, #496]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800417c:	4313      	orrs	r3, r2
 800417e:	604b      	str	r3, [r1, #4]
 8004180:	e018      	b.n	80041b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004182:	4b7a      	ldr	r3, [pc, #488]	; (800436c <HAL_RCC_OscConfig+0x578>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a79      	ldr	r2, [pc, #484]	; (800436c <HAL_RCC_OscConfig+0x578>)
 8004188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800418c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7fd fc29 	bl	80019e4 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004196:	f7fd fc25 	bl	80019e4 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e245      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a8:	4b70      	ldr	r3, [pc, #448]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d03c      	beq.n	800423a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01c      	beq.n	8004202 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c8:	4b68      	ldr	r3, [pc, #416]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80041ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ce:	4a67      	ldr	r2, [pc, #412]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d8:	f7fd fc04 	bl	80019e4 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e0:	f7fd fc00 	bl	80019e4 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e220      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041f2:	4b5e      	ldr	r3, [pc, #376]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80041f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ef      	beq.n	80041e0 <HAL_RCC_OscConfig+0x3ec>
 8004200:	e01b      	b.n	800423a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004202:	4b5a      	ldr	r3, [pc, #360]	; (800436c <HAL_RCC_OscConfig+0x578>)
 8004204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004208:	4a58      	ldr	r2, [pc, #352]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800420a:	f023 0301 	bic.w	r3, r3, #1
 800420e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004212:	f7fd fbe7 	bl	80019e4 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421a:	f7fd fbe3 	bl	80019e4 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e203      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800422c:	4b4f      	ldr	r3, [pc, #316]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800422e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ef      	bne.n	800421a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80a6 	beq.w	8004394 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004248:	2300      	movs	r3, #0
 800424a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800424c:	4b47      	ldr	r3, [pc, #284]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10d      	bne.n	8004274 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004258:	4b44      	ldr	r3, [pc, #272]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	4a43      	ldr	r2, [pc, #268]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800425e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004262:	6593      	str	r3, [r2, #88]	; 0x58
 8004264:	4b41      	ldr	r3, [pc, #260]	; (800436c <HAL_RCC_OscConfig+0x578>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004270:	2301      	movs	r3, #1
 8004272:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004274:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <HAL_RCC_OscConfig+0x57c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d118      	bne.n	80042b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004280:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <HAL_RCC_OscConfig+0x57c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3a      	ldr	r2, [pc, #232]	; (8004370 <HAL_RCC_OscConfig+0x57c>)
 8004286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428c:	f7fd fbaa 	bl	80019e4 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004294:	f7fd fba6 	bl	80019e4 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1c6      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a6:	4b32      	ldr	r3, [pc, #200]	; (8004370 <HAL_RCC_OscConfig+0x57c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d108      	bne.n	80042cc <HAL_RCC_OscConfig+0x4d8>
 80042ba:	4b2c      	ldr	r3, [pc, #176]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	4a2a      	ldr	r2, [pc, #168]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ca:	e024      	b.n	8004316 <HAL_RCC_OscConfig+0x522>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b05      	cmp	r3, #5
 80042d2:	d110      	bne.n	80042f6 <HAL_RCC_OscConfig+0x502>
 80042d4:	4b25      	ldr	r3, [pc, #148]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	4a24      	ldr	r2, [pc, #144]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80042dc:	f043 0304 	orr.w	r3, r3, #4
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e4:	4b21      	ldr	r3, [pc, #132]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	4a20      	ldr	r2, [pc, #128]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f4:	e00f      	b.n	8004316 <HAL_RCC_OscConfig+0x522>
 80042f6:	4b1d      	ldr	r3, [pc, #116]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fc:	4a1b      	ldr	r2, [pc, #108]	; (800436c <HAL_RCC_OscConfig+0x578>)
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004306:	4b19      	ldr	r3, [pc, #100]	; (800436c <HAL_RCC_OscConfig+0x578>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	4a17      	ldr	r2, [pc, #92]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800430e:	f023 0304 	bic.w	r3, r3, #4
 8004312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d016      	beq.n	800434c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431e:	f7fd fb61 	bl	80019e4 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004324:	e00a      	b.n	800433c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fd fb5d 	bl	80019e4 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f241 3288 	movw	r2, #5000	; 0x1388
 8004334:	4293      	cmp	r3, r2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e17b      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_OscConfig+0x578>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ed      	beq.n	8004326 <HAL_RCC_OscConfig+0x532>
 800434a:	e01a      	b.n	8004382 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434c:	f7fd fb4a 	bl	80019e4 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004352:	e00f      	b.n	8004374 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004354:	f7fd fb46 	bl	80019e4 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d906      	bls.n	8004374 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e164      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004374:	4ba8      	ldr	r3, [pc, #672]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e8      	bne.n	8004354 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004382:	7ffb      	ldrb	r3, [r7, #31]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d105      	bne.n	8004394 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004388:	4ba3      	ldr	r3, [pc, #652]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	4aa2      	ldr	r2, [pc, #648]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 800438e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004392:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d03c      	beq.n	800441a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01c      	beq.n	80043e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043a8:	4b9b      	ldr	r3, [pc, #620]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80043aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ae:	4a9a      	ldr	r2, [pc, #616]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fd fb14 	bl	80019e4 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043c0:	f7fd fb10 	bl	80019e4 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e130      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043d2:	4b91      	ldr	r3, [pc, #580]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80043d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ef      	beq.n	80043c0 <HAL_RCC_OscConfig+0x5cc>
 80043e0:	e01b      	b.n	800441a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043e2:	4b8d      	ldr	r3, [pc, #564]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80043e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043e8:	4a8b      	ldr	r2, [pc, #556]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f2:	f7fd faf7 	bl	80019e4 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043fa:	f7fd faf3 	bl	80019e4 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e113      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800440c:	4b82      	ldr	r3, [pc, #520]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 800440e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1ef      	bne.n	80043fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8107 	beq.w	8004632 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	2b02      	cmp	r3, #2
 800442a:	f040 80cb 	bne.w	80045c4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800442e:	4b7a      	ldr	r3, [pc, #488]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 0203 	and.w	r2, r3, #3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	429a      	cmp	r2, r3
 8004440:	d12c      	bne.n	800449c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	3b01      	subs	r3, #1
 800444e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d123      	bne.n	800449c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004460:	429a      	cmp	r2, r3
 8004462:	d11b      	bne.n	800449c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d113      	bne.n	800449c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	3b01      	subs	r3, #1
 8004482:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d109      	bne.n	800449c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	3b01      	subs	r3, #1
 8004496:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d06d      	beq.n	8004578 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	d068      	beq.n	8004574 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044a2:	4b5d      	ldr	r3, [pc, #372]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d105      	bne.n	80044ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044ae:	4b5a      	ldr	r3, [pc, #360]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0ba      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044be:	4b56      	ldr	r3, [pc, #344]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a55      	ldr	r2, [pc, #340]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80044c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ca:	f7fd fa8b 	bl	80019e4 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d2:	f7fd fa87 	bl	80019e4 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e0a7      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e4:	4b4c      	ldr	r3, [pc, #304]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f0      	bne.n	80044d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f0:	4b49      	ldr	r3, [pc, #292]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	4b49      	ldr	r3, [pc, #292]	; (800461c <HAL_RCC_OscConfig+0x828>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004500:	3a01      	subs	r2, #1
 8004502:	0112      	lsls	r2, r2, #4
 8004504:	4311      	orrs	r1, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800450a:	0212      	lsls	r2, r2, #8
 800450c:	4311      	orrs	r1, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004512:	0852      	lsrs	r2, r2, #1
 8004514:	3a01      	subs	r2, #1
 8004516:	0552      	lsls	r2, r2, #21
 8004518:	4311      	orrs	r1, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800451e:	0852      	lsrs	r2, r2, #1
 8004520:	3a01      	subs	r2, #1
 8004522:	0652      	lsls	r2, r2, #25
 8004524:	4311      	orrs	r1, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800452a:	06d2      	lsls	r2, r2, #27
 800452c:	430a      	orrs	r2, r1
 800452e:	493a      	ldr	r1, [pc, #232]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 8004530:	4313      	orrs	r3, r2
 8004532:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004534:	4b38      	ldr	r3, [pc, #224]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a37      	ldr	r2, [pc, #220]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 800453a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800453e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004540:	4b35      	ldr	r3, [pc, #212]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a34      	ldr	r2, [pc, #208]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 8004546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800454a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800454c:	f7fd fa4a 	bl	80019e4 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004554:	f7fd fa46 	bl	80019e4 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e066      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004566:	4b2c      	ldr	r3, [pc, #176]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004572:	e05e      	b.n	8004632 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e05d      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004578:	4b27      	ldr	r3, [pc, #156]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d156      	bne.n	8004632 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004584:	4b24      	ldr	r3, [pc, #144]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a23      	ldr	r2, [pc, #140]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 800458a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800458e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004590:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a20      	ldr	r2, [pc, #128]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 8004596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800459c:	f7fd fa22 	bl	80019e4 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd fa1e 	bl	80019e4 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e03e      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x7b0>
 80045c2:	e036      	b.n	8004632 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d031      	beq.n	800462e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80045d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d105      	bne.n	80045ee <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80045e8:	f023 0303 	bic.w	r3, r3, #3
 80045ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_OscConfig+0x824>)
 80045f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80045f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fe:	f7fd f9f1 	bl	80019e4 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004604:	e00c      	b.n	8004620 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004606:	f7fd f9ed 	bl	80019e4 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d905      	bls.n	8004620 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e00d      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
 8004618:	40021000 	.word	0x40021000
 800461c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_RCC_OscConfig+0x848>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1ec      	bne.n	8004606 <HAL_RCC_OscConfig+0x812>
 800462c:	e001      	b.n	8004632 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3720      	adds	r7, #32
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000

08004640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e10f      	b.n	8004878 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004658:	4b89      	ldr	r3, [pc, #548]	; (8004880 <HAL_RCC_ClockConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d910      	bls.n	8004688 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b86      	ldr	r3, [pc, #536]	; (8004880 <HAL_RCC_ClockConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 020f 	bic.w	r2, r3, #15
 800466e:	4984      	ldr	r1, [pc, #528]	; (8004880 <HAL_RCC_ClockConfig+0x240>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b82      	ldr	r3, [pc, #520]	; (8004880 <HAL_RCC_ClockConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0f7      	b.n	8004878 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8089 	beq.w	80047a8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b03      	cmp	r3, #3
 800469c:	d133      	bne.n	8004706 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800469e:	4b79      	ldr	r3, [pc, #484]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e0e4      	b.n	8004878 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80046ae:	f000 fa11 	bl	8004ad4 <RCC_GetSysClockFreqFromPLLSource>
 80046b2:	4603      	mov	r3, r0
 80046b4:	4a74      	ldr	r2, [pc, #464]	; (8004888 <HAL_RCC_ClockConfig+0x248>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d955      	bls.n	8004766 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80046ba:	4b72      	ldr	r3, [pc, #456]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046c6:	4b6f      	ldr	r3, [pc, #444]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ce:	4a6d      	ldr	r2, [pc, #436]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 80046d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	e044      	b.n	8004766 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d03e      	beq.n	8004766 <HAL_RCC_ClockConfig+0x126>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d13a      	bne.n	8004766 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046f0:	4b64      	ldr	r3, [pc, #400]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f8:	4a62      	ldr	r2, [pc, #392]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 80046fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	e02f      	b.n	8004766 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d107      	bne.n	800471e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800470e:	4b5d      	ldr	r3, [pc, #372]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d115      	bne.n	8004746 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e0ac      	b.n	8004878 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d107      	bne.n	8004736 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004726:	4b57      	ldr	r3, [pc, #348]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0a0      	b.n	8004878 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004736:	4b53      	ldr	r3, [pc, #332]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e098      	b.n	8004878 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004746:	f000 f8a7 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 800474a:	4603      	mov	r3, r0
 800474c:	4a4e      	ldr	r2, [pc, #312]	; (8004888 <HAL_RCC_ClockConfig+0x248>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d909      	bls.n	8004766 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004752:	4b4c      	ldr	r3, [pc, #304]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475a:	4a4a      	ldr	r2, [pc, #296]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 800475c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004760:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004766:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 0203 	bic.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4944      	ldr	r1, [pc, #272]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004774:	4313      	orrs	r3, r2
 8004776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004778:	f7fd f934 	bl	80019e4 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	e00a      	b.n	8004796 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004780:	f7fd f930 	bl	80019e4 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e070      	b.n	8004878 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 020c 	and.w	r2, r3, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1eb      	bne.n	8004780 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b4:	4b33      	ldr	r3, [pc, #204]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4930      	ldr	r1, [pc, #192]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
 80047c6:	e008      	b.n	80047da <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b80      	cmp	r3, #128	; 0x80
 80047cc:	d105      	bne.n	80047da <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047ce:	4b2d      	ldr	r3, [pc, #180]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	4a2c      	ldr	r2, [pc, #176]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 80047d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047da:	4b29      	ldr	r3, [pc, #164]	; (8004880 <HAL_RCC_ClockConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d210      	bcs.n	800480a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <HAL_RCC_ClockConfig+0x240>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f023 020f 	bic.w	r2, r3, #15
 80047f0:	4923      	ldr	r1, [pc, #140]	; (8004880 <HAL_RCC_ClockConfig+0x240>)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f8:	4b21      	ldr	r3, [pc, #132]	; (8004880 <HAL_RCC_ClockConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d001      	beq.n	800480a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e036      	b.n	8004878 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004816:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	4918      	ldr	r1, [pc, #96]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004824:	4313      	orrs	r3, r2
 8004826:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004834:	4b13      	ldr	r3, [pc, #76]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4910      	ldr	r1, [pc, #64]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004844:	4313      	orrs	r3, r2
 8004846:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004848:	f000 f826 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 800484c:	4602      	mov	r2, r0
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <HAL_RCC_ClockConfig+0x244>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	490c      	ldr	r1, [pc, #48]	; (800488c <HAL_RCC_ClockConfig+0x24c>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
 8004864:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <HAL_RCC_ClockConfig+0x250>)
 8004866:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_RCC_ClockConfig+0x254>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fd f869 	bl	8001944 <HAL_InitTick>
 8004872:	4603      	mov	r3, r0
 8004874:	73fb      	strb	r3, [r7, #15]

  return status;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40022000 	.word	0x40022000
 8004884:	40021000 	.word	0x40021000
 8004888:	04c4b400 	.word	0x04c4b400
 800488c:	08007b00 	.word	0x08007b00
 8004890:	20000000 	.word	0x20000000
 8004894:	20000004 	.word	0x20000004

08004898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004898:	b480      	push	{r7}
 800489a:	b089      	sub	sp, #36	; 0x24
 800489c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	2300      	movs	r3, #0
 80048a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048a6:	4b3e      	ldr	r3, [pc, #248]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048b0:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x34>
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	d121      	bne.n	800490a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d11e      	bne.n	800490a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048cc:	4b34      	ldr	r3, [pc, #208]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048d8:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	e005      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048e8:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048f4:	4a2b      	ldr	r2, [pc, #172]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10d      	bne.n	8004920 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b04      	cmp	r3, #4
 800490e:	d102      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004910:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	e004      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d101      	bne.n	8004920 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800491c:	4b23      	ldr	r3, [pc, #140]	; (80049ac <HAL_RCC_GetSysClockFreq+0x114>)
 800491e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b0c      	cmp	r3, #12
 8004924:	d134      	bne.n	8004990 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004926:	4b1e      	ldr	r3, [pc, #120]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d003      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0xa6>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d003      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0xac>
 800493c:	e005      	b.n	800494a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800493e:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004940:	617b      	str	r3, [r7, #20]
      break;
 8004942:	e005      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_RCC_GetSysClockFreq+0x114>)
 8004946:	617b      	str	r3, [r7, #20]
      break;
 8004948:	e002      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	617b      	str	r3, [r7, #20]
      break;
 800494e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004950:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	3301      	adds	r3, #1
 800495c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	fb02 f203 	mul.w	r2, r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	0e5b      	lsrs	r3, r3, #25
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	3301      	adds	r3, #1
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	fbb2 f3f3 	udiv	r3, r2, r3
 800498e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004990:	69bb      	ldr	r3, [r7, #24]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3724      	adds	r7, #36	; 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000
 80049a4:	08007b18 	.word	0x08007b18
 80049a8:	00f42400 	.word	0x00f42400
 80049ac:	007a1200 	.word	0x007a1200

080049b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000000 	.word	0x20000000

080049c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049cc:	f7ff fff0 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	4904      	ldr	r1, [pc, #16]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049de:	5ccb      	ldrb	r3, [r1, r3]
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000
 80049f0:	08007b10 	.word	0x08007b10

080049f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049f8:	f7ff ffda 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	0adb      	lsrs	r3, r3, #11
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4904      	ldr	r1, [pc, #16]	; (8004a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	08007b10 	.word	0x08007b10

08004a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a28:	2300      	movs	r3, #0
 8004a2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a38:	f7ff f918 	bl	8003c6c <HAL_PWREx_GetVoltageRange>
 8004a3c:	6178      	str	r0, [r7, #20]
 8004a3e:	e014      	b.n	8004a6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a40:	4b22      	ldr	r3, [pc, #136]	; (8004acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a44:	4a21      	ldr	r2, [pc, #132]	; (8004acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4c:	4b1f      	ldr	r3, [pc, #124]	; (8004acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a58:	f7ff f908 	bl	8003c6c <HAL_PWREx_GetVoltageRange>
 8004a5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a5e:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a70:	d10b      	bne.n	8004a8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d913      	bls.n	8004aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2ba0      	cmp	r3, #160	; 0xa0
 8004a7c:	d902      	bls.n	8004a84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a7e:	2302      	movs	r3, #2
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	e00d      	b.n	8004aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a84:	2301      	movs	r3, #1
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	e00a      	b.n	8004aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a8e:	d902      	bls.n	8004a96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004a90:	2302      	movs	r3, #2
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	e004      	b.n	8004aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b70      	cmp	r3, #112	; 0x70
 8004a9a:	d101      	bne.n	8004aa0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f023 020f 	bic.w	r2, r3, #15
 8004aa8:	4909      	ldr	r1, [pc, #36]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d001      	beq.n	8004ac2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40022000 	.word	0x40022000

08004ad4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004ade:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d118      	bne.n	8004b1c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004aea:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d107      	bne.n	8004b06 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004af6:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004afc:	0a1b      	lsrs	r3, r3, #8
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e005      	b.n	8004b12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b06:	4b23      	ldr	r3, [pc, #140]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b12:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d003      	beq.n	8004b34 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d003      	beq.n	8004b3a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8004b32:	e005      	b.n	8004b40 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004b36:	613b      	str	r3, [r7, #16]
    break;
 8004b38:	e005      	b.n	8004b46 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004b3a:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004b3c:	613b      	str	r3, [r7, #16]
    break;
 8004b3e:	e002      	b.n	8004b46 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	613b      	str	r3, [r7, #16]
    break;
 8004b44:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	3301      	adds	r3, #1
 8004b52:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	fb02 f203 	mul.w	r2, r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	0e5b      	lsrs	r3, r3, #25
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	3301      	adds	r3, #1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004b86:	683b      	ldr	r3, [r7, #0]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40021000 	.word	0x40021000
 8004b98:	08007b18 	.word	0x08007b18
 8004b9c:	00f42400 	.word	0x00f42400
 8004ba0:	007a1200 	.word	0x007a1200

08004ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bac:	2300      	movs	r3, #0
 8004bae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d040      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d02a      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bc8:	2b80      	cmp	r3, #128	; 0x80
 8004bca:	d825      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bcc:	2b60      	cmp	r3, #96	; 0x60
 8004bce:	d026      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d821      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d006      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d81d      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d009      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	d010      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004be4:	e018      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004be6:	4b89      	ldr	r3, [pc, #548]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	4a88      	ldr	r2, [pc, #544]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bf2:	e015      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fb12 	bl	8005224 <RCCEx_PLLSAI1_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c04:	e00c      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3320      	adds	r3, #32
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fbfd 	bl	800540c <RCCEx_PLLSAI2_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c16:	e003      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	74fb      	strb	r3, [r7, #19]
      break;
 8004c1c:	e000      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c26:	4b79      	ldr	r3, [pc, #484]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c2c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c34:	4975      	ldr	r1, [pc, #468]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004c3c:	e001      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3e:	7cfb      	ldrb	r3, [r7, #19]
 8004c40:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d047      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c56:	d030      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5c:	d82a      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c62:	d02a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c68:	d824      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c74:	d81e      	bhi.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7e:	d010      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c80:	e018      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c82:	4b62      	ldr	r3, [pc, #392]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	4a61      	ldr	r2, [pc, #388]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c8e:	e015      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	2100      	movs	r1, #0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fac4 	bl	8005224 <RCCEx_PLLSAI1_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ca0:	e00c      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3320      	adds	r3, #32
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fbaf 	bl	800540c <RCCEx_PLLSAI2_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	74fb      	strb	r3, [r7, #19]
      break;
 8004cb8:	e000      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cc2:	4b52      	ldr	r3, [pc, #328]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	494e      	ldr	r1, [pc, #312]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004cd8:	e001      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cda:	7cfb      	ldrb	r3, [r7, #19]
 8004cdc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 809f 	beq.w	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cec:	2300      	movs	r3, #0
 8004cee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cf0:	4b46      	ldr	r3, [pc, #280]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00d      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	4b41      	ldr	r3, [pc, #260]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0a:	4a40      	ldr	r2, [pc, #256]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d10:	6593      	str	r3, [r2, #88]	; 0x58
 8004d12:	4b3e      	ldr	r3, [pc, #248]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d22:	4b3b      	ldr	r3, [pc, #236]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a3a      	ldr	r2, [pc, #232]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d2e:	f7fc fe59 	bl	80019e4 <HAL_GetTick>
 8004d32:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d34:	e009      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d36:	f7fc fe55 	bl	80019e4 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d902      	bls.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	74fb      	strb	r3, [r7, #19]
        break;
 8004d48:	e005      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d4a:	4b31      	ldr	r3, [pc, #196]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ef      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d15b      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d5c:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d66:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01f      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d019      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d86:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8c:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d96:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004da6:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d016      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fc fe14 	bl	80019e4 <HAL_GetTick>
 8004dbc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dbe:	e00b      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc0:	f7fc fe10 	bl	80019e4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d902      	bls.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	74fb      	strb	r3, [r7, #19]
            break;
 8004dd6:	e006      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0ec      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004de6:	7cfb      	ldrb	r3, [r7, #19]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10c      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfc:	4903      	ldr	r1, [pc, #12]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e04:	e008      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e06:	7cfb      	ldrb	r3, [r7, #19]
 8004e08:	74bb      	strb	r3, [r7, #18]
 8004e0a:	e005      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e14:	7cfb      	ldrb	r3, [r7, #19]
 8004e16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e18:	7c7b      	ldrb	r3, [r7, #17]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1e:	4ba0      	ldr	r3, [pc, #640]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	4a9f      	ldr	r2, [pc, #636]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e36:	4b9a      	ldr	r3, [pc, #616]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f023 0203 	bic.w	r2, r3, #3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	4996      	ldr	r1, [pc, #600]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e58:	4b91      	ldr	r3, [pc, #580]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 020c 	bic.w	r2, r3, #12
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	498e      	ldr	r1, [pc, #568]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e7a:	4b89      	ldr	r3, [pc, #548]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e88:	4985      	ldr	r1, [pc, #532]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e9c:	4b80      	ldr	r3, [pc, #512]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eaa:	497d      	ldr	r1, [pc, #500]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ebe:	4b78      	ldr	r3, [pc, #480]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ecc:	4974      	ldr	r1, [pc, #464]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ee0:	4b6f      	ldr	r3, [pc, #444]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	496c      	ldr	r1, [pc, #432]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f02:	4b67      	ldr	r3, [pc, #412]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f10:	4963      	ldr	r1, [pc, #396]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f24:	4b5e      	ldr	r3, [pc, #376]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f32:	495b      	ldr	r1, [pc, #364]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f46:	4b56      	ldr	r3, [pc, #344]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f54:	4952      	ldr	r1, [pc, #328]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f68:	4b4d      	ldr	r3, [pc, #308]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f76:	494a      	ldr	r1, [pc, #296]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f8a:	4b45      	ldr	r3, [pc, #276]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f98:	4941      	ldr	r1, [pc, #260]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fac:	4b3c      	ldr	r3, [pc, #240]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fb2:	f023 0203 	bic.w	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fba:	4939      	ldr	r1, [pc, #228]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d028      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fce:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fdc:	4930      	ldr	r1, [pc, #192]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fec:	d106      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fee:	4b2c      	ldr	r3, [pc, #176]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	4a2b      	ldr	r2, [pc, #172]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ff8:	60d3      	str	r3, [r2, #12]
 8004ffa:	e011      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005004:	d10c      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	2101      	movs	r1, #1
 800500c:	4618      	mov	r0, r3
 800500e:	f000 f909 	bl	8005224 <RCCEx_PLLSAI1_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d04d      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005034:	d108      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005036:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800503c:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800503e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005042:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005046:	e012      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005048:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800504a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800504e:	4a14      	ldr	r2, [pc, #80]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005054:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005058:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005066:	490e      	ldr	r1, [pc, #56]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005076:	d106      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005078:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4a08      	ldr	r2, [pc, #32]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800507e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005082:	60d3      	str	r3, [r2, #12]
 8005084:	e020      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800508e:	d109      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4a02      	ldr	r2, [pc, #8]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800509a:	60d3      	str	r3, [r2, #12]
 800509c:	e014      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3304      	adds	r3, #4
 80050b2:	2101      	movs	r1, #1
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f8b5 	bl	8005224 <RCCEx_PLLSAI1_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050be:	7cfb      	ldrb	r3, [r7, #19]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80050c4:	7cfb      	ldrb	r3, [r7, #19]
 80050c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d028      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050d4:	4b4a      	ldr	r3, [pc, #296]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e2:	4947      	ldr	r1, [pc, #284]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f2:	d106      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050f4:	4b42      	ldr	r3, [pc, #264]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	4a41      	ldr	r2, [pc, #260]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050fe:	60d3      	str	r3, [r2, #12]
 8005100:	e011      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005106:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800510a:	d10c      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3304      	adds	r3, #4
 8005110:	2101      	movs	r1, #1
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f886 	bl	8005224 <RCCEx_PLLSAI1_Config>
 8005118:	4603      	mov	r3, r0
 800511a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800511c:	7cfb      	ldrb	r3, [r7, #19]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01e      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005132:	4b33      	ldr	r3, [pc, #204]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005142:	492f      	ldr	r1, [pc, #188]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005154:	d10c      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	2102      	movs	r1, #2
 800515c:	4618      	mov	r0, r3
 800515e:	f000 f861 	bl	8005224 <RCCEx_PLLSAI1_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00b      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800517c:	4b20      	ldr	r3, [pc, #128]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800517e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005182:	f023 0204 	bic.w	r2, r3, #4
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518c:	491c      	ldr	r1, [pc, #112]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00b      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051a0:	4b17      	ldr	r3, [pc, #92]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051a6:	f023 0218 	bic.w	r2, r3, #24
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	4913      	ldr	r1, [pc, #76]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d017      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80051c4:	4b0e      	ldr	r3, [pc, #56]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d4:	490a      	ldr	r1, [pc, #40]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051e6:	d105      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4a04      	ldr	r2, [pc, #16]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3718      	adds	r7, #24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40021000 	.word	0x40021000

08005204 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a04      	ldr	r2, [pc, #16]	; (8005220 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800520e:	f043 0304 	orr.w	r3, r3, #4
 8005212:	6013      	str	r3, [r2, #0]
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000

08005224 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005232:	4b72      	ldr	r3, [pc, #456]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00e      	beq.n	800525c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800523e:	4b6f      	ldr	r3, [pc, #444]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0203 	and.w	r2, r3, #3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d103      	bne.n	8005256 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
       ||
 8005252:	2b00      	cmp	r3, #0
 8005254:	d142      	bne.n	80052dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	e03f      	b.n	80052dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b03      	cmp	r3, #3
 8005262:	d018      	beq.n	8005296 <RCCEx_PLLSAI1_Config+0x72>
 8005264:	2b03      	cmp	r3, #3
 8005266:	d825      	bhi.n	80052b4 <RCCEx_PLLSAI1_Config+0x90>
 8005268:	2b01      	cmp	r3, #1
 800526a:	d002      	beq.n	8005272 <RCCEx_PLLSAI1_Config+0x4e>
 800526c:	2b02      	cmp	r3, #2
 800526e:	d009      	beq.n	8005284 <RCCEx_PLLSAI1_Config+0x60>
 8005270:	e020      	b.n	80052b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005272:	4b62      	ldr	r3, [pc, #392]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d11d      	bne.n	80052ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005282:	e01a      	b.n	80052ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005284:	4b5d      	ldr	r3, [pc, #372]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528c:	2b00      	cmp	r3, #0
 800528e:	d116      	bne.n	80052be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005294:	e013      	b.n	80052be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005296:	4b59      	ldr	r3, [pc, #356]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10f      	bne.n	80052c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052a2:	4b56      	ldr	r3, [pc, #344]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052b2:	e006      	b.n	80052c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
      break;
 80052b8:	e004      	b.n	80052c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052ba:	bf00      	nop
 80052bc:	e002      	b.n	80052c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80052c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d108      	bne.n	80052dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80052ca:	4b4c      	ldr	r3, [pc, #304]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f023 0203 	bic.w	r2, r3, #3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4949      	ldr	r1, [pc, #292]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 8086 	bne.w	80053f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052e4:	4b45      	ldr	r3, [pc, #276]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a44      	ldr	r2, [pc, #272]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f0:	f7fc fb78 	bl	80019e4 <HAL_GetTick>
 80052f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052f6:	e009      	b.n	800530c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052f8:	f7fc fb74 	bl	80019e4 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d902      	bls.n	800530c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	73fb      	strb	r3, [r7, #15]
        break;
 800530a:	e005      	b.n	8005318 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800530c:	4b3b      	ldr	r3, [pc, #236]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1ef      	bne.n	80052f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d168      	bne.n	80053f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d113      	bne.n	800534c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005324:	4b35      	ldr	r3, [pc, #212]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	4b35      	ldr	r3, [pc, #212]	; (8005400 <RCCEx_PLLSAI1_Config+0x1dc>)
 800532a:	4013      	ands	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6892      	ldr	r2, [r2, #8]
 8005330:	0211      	lsls	r1, r2, #8
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68d2      	ldr	r2, [r2, #12]
 8005336:	06d2      	lsls	r2, r2, #27
 8005338:	4311      	orrs	r1, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6852      	ldr	r2, [r2, #4]
 800533e:	3a01      	subs	r2, #1
 8005340:	0112      	lsls	r2, r2, #4
 8005342:	430a      	orrs	r2, r1
 8005344:	492d      	ldr	r1, [pc, #180]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005346:	4313      	orrs	r3, r2
 8005348:	610b      	str	r3, [r1, #16]
 800534a:	e02d      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d115      	bne.n	800537e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005352:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	4b2b      	ldr	r3, [pc, #172]	; (8005404 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6892      	ldr	r2, [r2, #8]
 800535e:	0211      	lsls	r1, r2, #8
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6912      	ldr	r2, [r2, #16]
 8005364:	0852      	lsrs	r2, r2, #1
 8005366:	3a01      	subs	r2, #1
 8005368:	0552      	lsls	r2, r2, #21
 800536a:	4311      	orrs	r1, r2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6852      	ldr	r2, [r2, #4]
 8005370:	3a01      	subs	r2, #1
 8005372:	0112      	lsls	r2, r2, #4
 8005374:	430a      	orrs	r2, r1
 8005376:	4921      	ldr	r1, [pc, #132]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005378:	4313      	orrs	r3, r2
 800537a:	610b      	str	r3, [r1, #16]
 800537c:	e014      	b.n	80053a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800537e:	4b1f      	ldr	r3, [pc, #124]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	4b21      	ldr	r3, [pc, #132]	; (8005408 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005384:	4013      	ands	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6892      	ldr	r2, [r2, #8]
 800538a:	0211      	lsls	r1, r2, #8
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6952      	ldr	r2, [r2, #20]
 8005390:	0852      	lsrs	r2, r2, #1
 8005392:	3a01      	subs	r2, #1
 8005394:	0652      	lsls	r2, r2, #25
 8005396:	4311      	orrs	r1, r2
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6852      	ldr	r2, [r2, #4]
 800539c:	3a01      	subs	r2, #1
 800539e:	0112      	lsls	r2, r2, #4
 80053a0:	430a      	orrs	r2, r1
 80053a2:	4916      	ldr	r1, [pc, #88]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053a8:	4b14      	ldr	r3, [pc, #80]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a13      	ldr	r2, [pc, #76]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fc fb16 	bl	80019e4 <HAL_GetTick>
 80053b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053ba:	e009      	b.n	80053d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053bc:	f7fc fb12 	bl	80019e4 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d902      	bls.n	80053d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	73fb      	strb	r3, [r7, #15]
          break;
 80053ce:	e005      	b.n	80053dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053d0:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ef      	beq.n	80053bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	4904      	ldr	r1, [pc, #16]	; (80053fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
 8005400:	07ff800f 	.word	0x07ff800f
 8005404:	ff9f800f 	.word	0xff9f800f
 8005408:	f9ff800f 	.word	0xf9ff800f

0800540c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800541a:	4b72      	ldr	r3, [pc, #456]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00e      	beq.n	8005444 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005426:	4b6f      	ldr	r3, [pc, #444]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0203 	and.w	r2, r3, #3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d103      	bne.n	800543e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
       ||
 800543a:	2b00      	cmp	r3, #0
 800543c:	d142      	bne.n	80054c4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	73fb      	strb	r3, [r7, #15]
 8005442:	e03f      	b.n	80054c4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b03      	cmp	r3, #3
 800544a:	d018      	beq.n	800547e <RCCEx_PLLSAI2_Config+0x72>
 800544c:	2b03      	cmp	r3, #3
 800544e:	d825      	bhi.n	800549c <RCCEx_PLLSAI2_Config+0x90>
 8005450:	2b01      	cmp	r3, #1
 8005452:	d002      	beq.n	800545a <RCCEx_PLLSAI2_Config+0x4e>
 8005454:	2b02      	cmp	r3, #2
 8005456:	d009      	beq.n	800546c <RCCEx_PLLSAI2_Config+0x60>
 8005458:	e020      	b.n	800549c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800545a:	4b62      	ldr	r3, [pc, #392]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d11d      	bne.n	80054a2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800546a:	e01a      	b.n	80054a2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800546c:	4b5d      	ldr	r3, [pc, #372]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005474:	2b00      	cmp	r3, #0
 8005476:	d116      	bne.n	80054a6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800547c:	e013      	b.n	80054a6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800547e:	4b59      	ldr	r3, [pc, #356]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10f      	bne.n	80054aa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800548a:	4b56      	ldr	r3, [pc, #344]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800549a:	e006      	b.n	80054aa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
      break;
 80054a0:	e004      	b.n	80054ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054a2:	bf00      	nop
 80054a4:	e002      	b.n	80054ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054a6:	bf00      	nop
 80054a8:	e000      	b.n	80054ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80054aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d108      	bne.n	80054c4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80054b2:	4b4c      	ldr	r3, [pc, #304]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f023 0203 	bic.w	r2, r3, #3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4949      	ldr	r1, [pc, #292]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f040 8086 	bne.w	80055d8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80054cc:	4b45      	ldr	r3, [pc, #276]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a44      	ldr	r2, [pc, #272]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d8:	f7fc fa84 	bl	80019e4 <HAL_GetTick>
 80054dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054de:	e009      	b.n	80054f4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054e0:	f7fc fa80 	bl	80019e4 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d902      	bls.n	80054f4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	73fb      	strb	r3, [r7, #15]
        break;
 80054f2:	e005      	b.n	8005500 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054f4:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ef      	bne.n	80054e0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d168      	bne.n	80055d8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d113      	bne.n	8005534 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800550c:	4b35      	ldr	r3, [pc, #212]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005512:	4013      	ands	r3, r2
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6892      	ldr	r2, [r2, #8]
 8005518:	0211      	lsls	r1, r2, #8
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	68d2      	ldr	r2, [r2, #12]
 800551e:	06d2      	lsls	r2, r2, #27
 8005520:	4311      	orrs	r1, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6852      	ldr	r2, [r2, #4]
 8005526:	3a01      	subs	r2, #1
 8005528:	0112      	lsls	r2, r2, #4
 800552a:	430a      	orrs	r2, r1
 800552c:	492d      	ldr	r1, [pc, #180]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800552e:	4313      	orrs	r3, r2
 8005530:	614b      	str	r3, [r1, #20]
 8005532:	e02d      	b.n	8005590 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d115      	bne.n	8005566 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800553a:	4b2a      	ldr	r3, [pc, #168]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800553c:	695a      	ldr	r2, [r3, #20]
 800553e:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <RCCEx_PLLSAI2_Config+0x1e0>)
 8005540:	4013      	ands	r3, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6892      	ldr	r2, [r2, #8]
 8005546:	0211      	lsls	r1, r2, #8
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6912      	ldr	r2, [r2, #16]
 800554c:	0852      	lsrs	r2, r2, #1
 800554e:	3a01      	subs	r2, #1
 8005550:	0552      	lsls	r2, r2, #21
 8005552:	4311      	orrs	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6852      	ldr	r2, [r2, #4]
 8005558:	3a01      	subs	r2, #1
 800555a:	0112      	lsls	r2, r2, #4
 800555c:	430a      	orrs	r2, r1
 800555e:	4921      	ldr	r1, [pc, #132]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005560:	4313      	orrs	r3, r2
 8005562:	614b      	str	r3, [r1, #20]
 8005564:	e014      	b.n	8005590 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005566:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800556c:	4013      	ands	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6892      	ldr	r2, [r2, #8]
 8005572:	0211      	lsls	r1, r2, #8
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6952      	ldr	r2, [r2, #20]
 8005578:	0852      	lsrs	r2, r2, #1
 800557a:	3a01      	subs	r2, #1
 800557c:	0652      	lsls	r2, r2, #25
 800557e:	4311      	orrs	r1, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6852      	ldr	r2, [r2, #4]
 8005584:	3a01      	subs	r2, #1
 8005586:	0112      	lsls	r2, r2, #4
 8005588:	430a      	orrs	r2, r1
 800558a:	4916      	ldr	r1, [pc, #88]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800558c:	4313      	orrs	r3, r2
 800558e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005590:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fc fa22 	bl	80019e4 <HAL_GetTick>
 80055a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055a2:	e009      	b.n	80055b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055a4:	f7fc fa1e 	bl	80019e4 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d902      	bls.n	80055b8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	73fb      	strb	r3, [r7, #15]
          break;
 80055b6:	e005      	b.n	80055c4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0ef      	beq.n	80055a4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	4904      	ldr	r1, [pc, #16]	; (80055e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000
 80055e8:	07ff800f 	.word	0x07ff800f
 80055ec:	ff9f800f 	.word	0xff9f800f
 80055f0:	f9ff800f 	.word	0xf9ff800f

080055f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e095      	b.n	8005732 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b00      	cmp	r3, #0
 800560c:	d108      	bne.n	8005620 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005616:	d009      	beq.n	800562c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	61da      	str	r2, [r3, #28]
 800561e:	e005      	b.n	800562c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fb fee2 	bl	8001410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005662:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800566c:	d902      	bls.n	8005674 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	e002      	b.n	800567a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005678:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005682:	d007      	beq.n	8005694 <HAL_SPI_Init+0xa0>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800568c:	d002      	beq.n	8005694 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	ea42 0103 	orr.w	r1, r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	f003 0204 	and.w	r2, r3, #4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005710:	ea42 0103 	orr.w	r1, r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e049      	b.n	80057e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d106      	bne.n	8005766 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fb fecb 	bl	80014fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2202      	movs	r2, #2
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f000 fdbf 	bl	80062fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e049      	b.n	800588e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f841 	bl	8005896 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3304      	adds	r3, #4
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f000 fd68 	bl	80062fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <HAL_TIM_PWM_Start+0x24>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	bf14      	ite	ne
 80058c8:	2301      	movne	r3, #1
 80058ca:	2300      	moveq	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	e03c      	b.n	800594a <HAL_TIM_PWM_Start+0x9e>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d109      	bne.n	80058ea <HAL_TIM_PWM_Start+0x3e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	bf14      	ite	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	2300      	moveq	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	e02f      	b.n	800594a <HAL_TIM_PWM_Start+0x9e>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d109      	bne.n	8005904 <HAL_TIM_PWM_Start+0x58>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e022      	b.n	800594a <HAL_TIM_PWM_Start+0x9e>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b0c      	cmp	r3, #12
 8005908:	d109      	bne.n	800591e <HAL_TIM_PWM_Start+0x72>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	bf14      	ite	ne
 8005916:	2301      	movne	r3, #1
 8005918:	2300      	moveq	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	e015      	b.n	800594a <HAL_TIM_PWM_Start+0x9e>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b10      	cmp	r3, #16
 8005922:	d109      	bne.n	8005938 <HAL_TIM_PWM_Start+0x8c>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e008      	b.n	800594a <HAL_TIM_PWM_Start+0x9e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e09c      	b.n	8005a8c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <HAL_TIM_PWM_Start+0xb6>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005960:	e023      	b.n	80059aa <HAL_TIM_PWM_Start+0xfe>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b04      	cmp	r3, #4
 8005966:	d104      	bne.n	8005972 <HAL_TIM_PWM_Start+0xc6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005970:	e01b      	b.n	80059aa <HAL_TIM_PWM_Start+0xfe>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d104      	bne.n	8005982 <HAL_TIM_PWM_Start+0xd6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005980:	e013      	b.n	80059aa <HAL_TIM_PWM_Start+0xfe>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b0c      	cmp	r3, #12
 8005986:	d104      	bne.n	8005992 <HAL_TIM_PWM_Start+0xe6>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005990:	e00b      	b.n	80059aa <HAL_TIM_PWM_Start+0xfe>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b10      	cmp	r3, #16
 8005996:	d104      	bne.n	80059a2 <HAL_TIM_PWM_Start+0xf6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a0:	e003      	b.n	80059aa <HAL_TIM_PWM_Start+0xfe>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2201      	movs	r2, #1
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f9d0 	bl	8006d58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a35      	ldr	r2, [pc, #212]	; (8005a94 <HAL_TIM_PWM_Start+0x1e8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_TIM_PWM_Start+0x13e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a34      	ldr	r2, [pc, #208]	; (8005a98 <HAL_TIM_PWM_Start+0x1ec>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <HAL_TIM_PWM_Start+0x13e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a32      	ldr	r2, [pc, #200]	; (8005a9c <HAL_TIM_PWM_Start+0x1f0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_TIM_PWM_Start+0x13e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a31      	ldr	r2, [pc, #196]	; (8005aa0 <HAL_TIM_PWM_Start+0x1f4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_TIM_PWM_Start+0x13e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2f      	ldr	r2, [pc, #188]	; (8005aa4 <HAL_TIM_PWM_Start+0x1f8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_PWM_Start+0x142>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_TIM_PWM_Start+0x144>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a22      	ldr	r2, [pc, #136]	; (8005a94 <HAL_TIM_PWM_Start+0x1e8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d01d      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x19e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a16:	d018      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x19e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <HAL_TIM_PWM_Start+0x1fc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x19e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a21      	ldr	r2, [pc, #132]	; (8005aac <HAL_TIM_PWM_Start+0x200>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x19e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <HAL_TIM_PWM_Start+0x204>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x19e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <HAL_TIM_PWM_Start+0x1ec>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x19e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a15      	ldr	r2, [pc, #84]	; (8005a9c <HAL_TIM_PWM_Start+0x1f0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d115      	bne.n	8005a76 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	4b18      	ldr	r3, [pc, #96]	; (8005ab4 <HAL_TIM_PWM_Start+0x208>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b06      	cmp	r3, #6
 8005a5a:	d015      	beq.n	8005a88 <HAL_TIM_PWM_Start+0x1dc>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a62:	d011      	beq.n	8005a88 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a74:	e008      	b.n	8005a88 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e000      	b.n	8005a8a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40013400 	.word	0x40013400
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40014400 	.word	0x40014400
 8005aa4:	40014800 	.word	0x40014800
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800
 8005ab0:	40000c00 	.word	0x40000c00
 8005ab4:	00010007 	.word	0x00010007

08005ab8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e049      	b.n	8005b5e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fb fd4c 	bl	800157c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f000 fc00 	bl	80062fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b082      	sub	sp, #8
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d122      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d11b      	bne.n	8005bc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f06f 0202 	mvn.w	r2, #2
 8005b92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f003 0303 	and.w	r3, r3, #3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fb88 	bl	80062be <HAL_TIM_IC_CaptureCallback>
 8005bae:	e005      	b.n	8005bbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fb7a 	bl	80062aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fb8b 	bl	80062d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d122      	bne.n	8005c16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d11b      	bne.n	8005c16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f06f 0204 	mvn.w	r2, #4
 8005be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fb5e 	bl	80062be <HAL_TIM_IC_CaptureCallback>
 8005c02:	e005      	b.n	8005c10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fb50 	bl	80062aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fb61 	bl	80062d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d122      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d11b      	bne.n	8005c6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f06f 0208 	mvn.w	r2, #8
 8005c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2204      	movs	r2, #4
 8005c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fb34 	bl	80062be <HAL_TIM_IC_CaptureCallback>
 8005c56:	e005      	b.n	8005c64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fb26 	bl	80062aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fb37 	bl	80062d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d122      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d11b      	bne.n	8005cbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f06f 0210 	mvn.w	r2, #16
 8005c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2208      	movs	r2, #8
 8005c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fb0a 	bl	80062be <HAL_TIM_IC_CaptureCallback>
 8005caa:	e005      	b.n	8005cb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fafc 	bl	80062aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fb0d 	bl	80062d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d10e      	bne.n	8005cea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d107      	bne.n	8005cea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0201 	mvn.w	r2, #1
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fad6 	bl	8006296 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf4:	2b80      	cmp	r3, #128	; 0x80
 8005cf6:	d10e      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b80      	cmp	r3, #128	; 0x80
 8005d04:	d107      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 f8d9 	bl	8006ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d24:	d10e      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	2b80      	cmp	r3, #128	; 0x80
 8005d32:	d107      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f001 f8cc 	bl	8006edc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b40      	cmp	r3, #64	; 0x40
 8005d50:	d10e      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fabb 	bl	80062e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d10e      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d107      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0220 	mvn.w	r2, #32
 8005d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 f88c 	bl	8006eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e088      	b.n	8005ed4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d11b      	bne.n	8005e08 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	6819      	ldr	r1, [r3, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f000 fdfc 	bl	80069dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 020c 	bic.w	r2, r2, #12
 8005df2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6999      	ldr	r1, [r3, #24]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	619a      	str	r2, [r3, #24]
 8005e06:	e060      	b.n	8005eca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d11c      	bne.n	8005e48 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6819      	ldr	r1, [r3, #0]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f000 fe7a 	bl	8006b16 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699a      	ldr	r2, [r3, #24]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e30:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6999      	ldr	r1, [r3, #24]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	021a      	lsls	r2, r3, #8
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	619a      	str	r2, [r3, #24]
 8005e46:	e040      	b.n	8005eca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d11b      	bne.n	8005e86 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6819      	ldr	r1, [r3, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f000 fec7 	bl	8006bf0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 020c 	bic.w	r2, r2, #12
 8005e70:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69d9      	ldr	r1, [r3, #28]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	61da      	str	r2, [r3, #28]
 8005e84:	e021      	b.n	8005eca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b0c      	cmp	r3, #12
 8005e8a:	d11c      	bne.n	8005ec6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	6819      	ldr	r1, [r3, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f000 fee4 	bl	8006c68 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69da      	ldr	r2, [r3, #28]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005eae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69d9      	ldr	r1, [r3, #28]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	021a      	lsls	r2, r3, #8
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	61da      	str	r2, [r3, #28]
 8005ec4:	e001      	b.n	8005eca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e0ff      	b.n	80060fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b14      	cmp	r3, #20
 8005f06:	f200 80f0 	bhi.w	80060ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f65 	.word	0x08005f65
 8005f14:	080060eb 	.word	0x080060eb
 8005f18:	080060eb 	.word	0x080060eb
 8005f1c:	080060eb 	.word	0x080060eb
 8005f20:	08005fa5 	.word	0x08005fa5
 8005f24:	080060eb 	.word	0x080060eb
 8005f28:	080060eb 	.word	0x080060eb
 8005f2c:	080060eb 	.word	0x080060eb
 8005f30:	08005fe7 	.word	0x08005fe7
 8005f34:	080060eb 	.word	0x080060eb
 8005f38:	080060eb 	.word	0x080060eb
 8005f3c:	080060eb 	.word	0x080060eb
 8005f40:	08006027 	.word	0x08006027
 8005f44:	080060eb 	.word	0x080060eb
 8005f48:	080060eb 	.word	0x080060eb
 8005f4c:	080060eb 	.word	0x080060eb
 8005f50:	08006069 	.word	0x08006069
 8005f54:	080060eb 	.word	0x080060eb
 8005f58:	080060eb 	.word	0x080060eb
 8005f5c:	080060eb 	.word	0x080060eb
 8005f60:	080060a9 	.word	0x080060a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fa60 	bl	8006430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0208 	orr.w	r2, r2, #8
 8005f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0204 	bic.w	r2, r2, #4
 8005f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6999      	ldr	r1, [r3, #24]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	619a      	str	r2, [r3, #24]
      break;
 8005fa2:	e0a5      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fad0 	bl	8006550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6999      	ldr	r1, [r3, #24]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	021a      	lsls	r2, r3, #8
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	619a      	str	r2, [r3, #24]
      break;
 8005fe4:	e084      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fb39 	bl	8006664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0208 	orr.w	r2, r2, #8
 8006000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0204 	bic.w	r2, r2, #4
 8006010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69d9      	ldr	r1, [r3, #28]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	61da      	str	r2, [r3, #28]
      break;
 8006024:	e064      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fba1 	bl	8006774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69d9      	ldr	r1, [r3, #28]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	021a      	lsls	r2, r3, #8
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	61da      	str	r2, [r3, #28]
      break;
 8006066:	e043      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fbea 	bl	8006848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0208 	orr.w	r2, r2, #8
 8006082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0204 	bic.w	r2, r2, #4
 8006092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	691a      	ldr	r2, [r3, #16]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060a6:	e023      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fc2e 	bl	8006910 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	021a      	lsls	r2, r3, #8
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060e8:	e002      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	75fb      	strb	r3, [r7, #23]
      break;
 80060ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop

08006104 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_TIM_ConfigClockSource+0x1c>
 800611c:	2302      	movs	r3, #2
 800611e:	e0b6      	b.n	800628e <HAL_TIM_ConfigClockSource+0x18a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800614a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615c:	d03e      	beq.n	80061dc <HAL_TIM_ConfigClockSource+0xd8>
 800615e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006162:	f200 8087 	bhi.w	8006274 <HAL_TIM_ConfigClockSource+0x170>
 8006166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616a:	f000 8086 	beq.w	800627a <HAL_TIM_ConfigClockSource+0x176>
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006172:	d87f      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x170>
 8006174:	2b70      	cmp	r3, #112	; 0x70
 8006176:	d01a      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0xaa>
 8006178:	2b70      	cmp	r3, #112	; 0x70
 800617a:	d87b      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x170>
 800617c:	2b60      	cmp	r3, #96	; 0x60
 800617e:	d050      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0x11e>
 8006180:	2b60      	cmp	r3, #96	; 0x60
 8006182:	d877      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x170>
 8006184:	2b50      	cmp	r3, #80	; 0x50
 8006186:	d03c      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0xfe>
 8006188:	2b50      	cmp	r3, #80	; 0x50
 800618a:	d873      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x170>
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d058      	beq.n	8006242 <HAL_TIM_ConfigClockSource+0x13e>
 8006190:	2b40      	cmp	r3, #64	; 0x40
 8006192:	d86f      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x170>
 8006194:	2b30      	cmp	r3, #48	; 0x30
 8006196:	d064      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x15e>
 8006198:	2b30      	cmp	r3, #48	; 0x30
 800619a:	d86b      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x170>
 800619c:	2b20      	cmp	r3, #32
 800619e:	d060      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x15e>
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d867      	bhi.n	8006274 <HAL_TIM_ConfigClockSource+0x170>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d05c      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x15e>
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	d05a      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0x15e>
 80061ac:	e062      	b.n	8006274 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6899      	ldr	r1, [r3, #8]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f000 fdab 	bl	8006d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	609a      	str	r2, [r3, #8]
      break;
 80061da:	e04f      	b.n	800627c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	6899      	ldr	r1, [r3, #8]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f000 fd94 	bl	8006d18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689a      	ldr	r2, [r3, #8]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061fe:	609a      	str	r2, [r3, #8]
      break;
 8006200:	e03c      	b.n	800627c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	461a      	mov	r2, r3
 8006210:	f000 fc52 	bl	8006ab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2150      	movs	r1, #80	; 0x50
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fd61 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 8006220:	e02c      	b.n	800627c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6859      	ldr	r1, [r3, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	461a      	mov	r2, r3
 8006230:	f000 fcae 	bl	8006b90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2160      	movs	r1, #96	; 0x60
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fd51 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 8006240:	e01c      	b.n	800627c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6859      	ldr	r1, [r3, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	461a      	mov	r2, r3
 8006250:	f000 fc32 	bl	8006ab8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2140      	movs	r1, #64	; 0x40
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fd41 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 8006260:	e00c      	b.n	800627c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f000 fd38 	bl	8006ce2 <TIM_ITRx_SetConfig>
      break;
 8006272:	e003      	b.n	800627c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
      break;
 8006278:	e000      	b.n	800627c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800627a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
	...

080062fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a40      	ldr	r2, [pc, #256]	; (8006410 <TIM_Base_SetConfig+0x114>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d013      	beq.n	800633c <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631a:	d00f      	beq.n	800633c <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a3d      	ldr	r2, [pc, #244]	; (8006414 <TIM_Base_SetConfig+0x118>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00b      	beq.n	800633c <TIM_Base_SetConfig+0x40>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a3c      	ldr	r2, [pc, #240]	; (8006418 <TIM_Base_SetConfig+0x11c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d007      	beq.n	800633c <TIM_Base_SetConfig+0x40>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a3b      	ldr	r2, [pc, #236]	; (800641c <TIM_Base_SetConfig+0x120>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_Base_SetConfig+0x40>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a3a      	ldr	r2, [pc, #232]	; (8006420 <TIM_Base_SetConfig+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d108      	bne.n	800634e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2f      	ldr	r2, [pc, #188]	; (8006410 <TIM_Base_SetConfig+0x114>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d01f      	beq.n	8006396 <TIM_Base_SetConfig+0x9a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635c:	d01b      	beq.n	8006396 <TIM_Base_SetConfig+0x9a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a2c      	ldr	r2, [pc, #176]	; (8006414 <TIM_Base_SetConfig+0x118>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d017      	beq.n	8006396 <TIM_Base_SetConfig+0x9a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2b      	ldr	r2, [pc, #172]	; (8006418 <TIM_Base_SetConfig+0x11c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <TIM_Base_SetConfig+0x9a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a2a      	ldr	r2, [pc, #168]	; (800641c <TIM_Base_SetConfig+0x120>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00f      	beq.n	8006396 <TIM_Base_SetConfig+0x9a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a29      	ldr	r2, [pc, #164]	; (8006420 <TIM_Base_SetConfig+0x124>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00b      	beq.n	8006396 <TIM_Base_SetConfig+0x9a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a28      	ldr	r2, [pc, #160]	; (8006424 <TIM_Base_SetConfig+0x128>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d007      	beq.n	8006396 <TIM_Base_SetConfig+0x9a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a27      	ldr	r2, [pc, #156]	; (8006428 <TIM_Base_SetConfig+0x12c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_Base_SetConfig+0x9a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a26      	ldr	r2, [pc, #152]	; (800642c <TIM_Base_SetConfig+0x130>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a10      	ldr	r2, [pc, #64]	; (8006410 <TIM_Base_SetConfig+0x114>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00f      	beq.n	80063f4 <TIM_Base_SetConfig+0xf8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a12      	ldr	r2, [pc, #72]	; (8006420 <TIM_Base_SetConfig+0x124>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00b      	beq.n	80063f4 <TIM_Base_SetConfig+0xf8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a11      	ldr	r2, [pc, #68]	; (8006424 <TIM_Base_SetConfig+0x128>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d007      	beq.n	80063f4 <TIM_Base_SetConfig+0xf8>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a10      	ldr	r2, [pc, #64]	; (8006428 <TIM_Base_SetConfig+0x12c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_Base_SetConfig+0xf8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a0f      	ldr	r2, [pc, #60]	; (800642c <TIM_Base_SetConfig+0x130>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d103      	bne.n	80063fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	615a      	str	r2, [r3, #20]
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40000c00 	.word	0x40000c00
 8006420:	40013400 	.word	0x40013400
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800

08006430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	f023 0201 	bic.w	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f023 0302 	bic.w	r3, r3, #2
 800647c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a2c      	ldr	r2, [pc, #176]	; (800653c <TIM_OC1_SetConfig+0x10c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00f      	beq.n	80064b0 <TIM_OC1_SetConfig+0x80>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a2b      	ldr	r2, [pc, #172]	; (8006540 <TIM_OC1_SetConfig+0x110>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00b      	beq.n	80064b0 <TIM_OC1_SetConfig+0x80>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a2a      	ldr	r2, [pc, #168]	; (8006544 <TIM_OC1_SetConfig+0x114>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d007      	beq.n	80064b0 <TIM_OC1_SetConfig+0x80>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a29      	ldr	r2, [pc, #164]	; (8006548 <TIM_OC1_SetConfig+0x118>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d003      	beq.n	80064b0 <TIM_OC1_SetConfig+0x80>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a28      	ldr	r2, [pc, #160]	; (800654c <TIM_OC1_SetConfig+0x11c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d10c      	bne.n	80064ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f023 0308 	bic.w	r3, r3, #8
 80064b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f023 0304 	bic.w	r3, r3, #4
 80064c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a1b      	ldr	r2, [pc, #108]	; (800653c <TIM_OC1_SetConfig+0x10c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00f      	beq.n	80064f2 <TIM_OC1_SetConfig+0xc2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1a      	ldr	r2, [pc, #104]	; (8006540 <TIM_OC1_SetConfig+0x110>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00b      	beq.n	80064f2 <TIM_OC1_SetConfig+0xc2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a19      	ldr	r2, [pc, #100]	; (8006544 <TIM_OC1_SetConfig+0x114>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d007      	beq.n	80064f2 <TIM_OC1_SetConfig+0xc2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a18      	ldr	r2, [pc, #96]	; (8006548 <TIM_OC1_SetConfig+0x118>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d003      	beq.n	80064f2 <TIM_OC1_SetConfig+0xc2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a17      	ldr	r2, [pc, #92]	; (800654c <TIM_OC1_SetConfig+0x11c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d111      	bne.n	8006516 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	621a      	str	r2, [r3, #32]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40013400 	.word	0x40013400
 8006544:	40014000 	.word	0x40014000
 8006548:	40014400 	.word	0x40014400
 800654c:	40014800 	.word	0x40014800

08006550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f023 0210 	bic.w	r2, r3, #16
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0320 	bic.w	r3, r3, #32
 800659e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a28      	ldr	r2, [pc, #160]	; (8006650 <TIM_OC2_SetConfig+0x100>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_OC2_SetConfig+0x6c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a27      	ldr	r2, [pc, #156]	; (8006654 <TIM_OC2_SetConfig+0x104>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d10d      	bne.n	80065d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a1d      	ldr	r2, [pc, #116]	; (8006650 <TIM_OC2_SetConfig+0x100>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d00f      	beq.n	8006600 <TIM_OC2_SetConfig+0xb0>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a1c      	ldr	r2, [pc, #112]	; (8006654 <TIM_OC2_SetConfig+0x104>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00b      	beq.n	8006600 <TIM_OC2_SetConfig+0xb0>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a1b      	ldr	r2, [pc, #108]	; (8006658 <TIM_OC2_SetConfig+0x108>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d007      	beq.n	8006600 <TIM_OC2_SetConfig+0xb0>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a1a      	ldr	r2, [pc, #104]	; (800665c <TIM_OC2_SetConfig+0x10c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_OC2_SetConfig+0xb0>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a19      	ldr	r2, [pc, #100]	; (8006660 <TIM_OC2_SetConfig+0x110>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d113      	bne.n	8006628 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800660e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	621a      	str	r2, [r3, #32]
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40013400 	.word	0x40013400
 8006658:	40014000 	.word	0x40014000
 800665c:	40014400 	.word	0x40014400
 8006660:	40014800 	.word	0x40014800

08006664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a27      	ldr	r2, [pc, #156]	; (8006760 <TIM_OC3_SetConfig+0xfc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d003      	beq.n	80066ce <TIM_OC3_SetConfig+0x6a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a26      	ldr	r2, [pc, #152]	; (8006764 <TIM_OC3_SetConfig+0x100>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d10d      	bne.n	80066ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	021b      	lsls	r3, r3, #8
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a1c      	ldr	r2, [pc, #112]	; (8006760 <TIM_OC3_SetConfig+0xfc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00f      	beq.n	8006712 <TIM_OC3_SetConfig+0xae>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a1b      	ldr	r2, [pc, #108]	; (8006764 <TIM_OC3_SetConfig+0x100>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00b      	beq.n	8006712 <TIM_OC3_SetConfig+0xae>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1a      	ldr	r2, [pc, #104]	; (8006768 <TIM_OC3_SetConfig+0x104>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d007      	beq.n	8006712 <TIM_OC3_SetConfig+0xae>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a19      	ldr	r2, [pc, #100]	; (800676c <TIM_OC3_SetConfig+0x108>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d003      	beq.n	8006712 <TIM_OC3_SetConfig+0xae>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a18      	ldr	r2, [pc, #96]	; (8006770 <TIM_OC3_SetConfig+0x10c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d113      	bne.n	800673a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	40012c00 	.word	0x40012c00
 8006764:	40013400 	.word	0x40013400
 8006768:	40014000 	.word	0x40014000
 800676c:	40014400 	.word	0x40014400
 8006770:	40014800 	.word	0x40014800

08006774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	031b      	lsls	r3, r3, #12
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a18      	ldr	r2, [pc, #96]	; (8006834 <TIM_OC4_SetConfig+0xc0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00f      	beq.n	80067f8 <TIM_OC4_SetConfig+0x84>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a17      	ldr	r2, [pc, #92]	; (8006838 <TIM_OC4_SetConfig+0xc4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00b      	beq.n	80067f8 <TIM_OC4_SetConfig+0x84>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a16      	ldr	r2, [pc, #88]	; (800683c <TIM_OC4_SetConfig+0xc8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d007      	beq.n	80067f8 <TIM_OC4_SetConfig+0x84>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a15      	ldr	r2, [pc, #84]	; (8006840 <TIM_OC4_SetConfig+0xcc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_OC4_SetConfig+0x84>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a14      	ldr	r2, [pc, #80]	; (8006844 <TIM_OC4_SetConfig+0xd0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d109      	bne.n	800680c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	019b      	lsls	r3, r3, #6
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40013400 	.word	0x40013400
 800683c:	40014000 	.word	0x40014000
 8006840:	40014400 	.word	0x40014400
 8006844:	40014800 	.word	0x40014800

08006848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800688c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a17      	ldr	r2, [pc, #92]	; (80068fc <TIM_OC5_SetConfig+0xb4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00f      	beq.n	80068c2 <TIM_OC5_SetConfig+0x7a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a16      	ldr	r2, [pc, #88]	; (8006900 <TIM_OC5_SetConfig+0xb8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00b      	beq.n	80068c2 <TIM_OC5_SetConfig+0x7a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a15      	ldr	r2, [pc, #84]	; (8006904 <TIM_OC5_SetConfig+0xbc>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d007      	beq.n	80068c2 <TIM_OC5_SetConfig+0x7a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a14      	ldr	r2, [pc, #80]	; (8006908 <TIM_OC5_SetConfig+0xc0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d003      	beq.n	80068c2 <TIM_OC5_SetConfig+0x7a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a13      	ldr	r2, [pc, #76]	; (800690c <TIM_OC5_SetConfig+0xc4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d109      	bne.n	80068d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	621a      	str	r2, [r3, #32]
}
 80068f0:	bf00      	nop
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	40012c00 	.word	0x40012c00
 8006900:	40013400 	.word	0x40013400
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800

08006910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800693e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	051b      	lsls	r3, r3, #20
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <TIM_OC6_SetConfig+0xb8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00f      	beq.n	800698c <TIM_OC6_SetConfig+0x7c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a17      	ldr	r2, [pc, #92]	; (80069cc <TIM_OC6_SetConfig+0xbc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00b      	beq.n	800698c <TIM_OC6_SetConfig+0x7c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a16      	ldr	r2, [pc, #88]	; (80069d0 <TIM_OC6_SetConfig+0xc0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d007      	beq.n	800698c <TIM_OC6_SetConfig+0x7c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a15      	ldr	r2, [pc, #84]	; (80069d4 <TIM_OC6_SetConfig+0xc4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_OC6_SetConfig+0x7c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a14      	ldr	r2, [pc, #80]	; (80069d8 <TIM_OC6_SetConfig+0xc8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d109      	bne.n	80069a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006992:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	40013400 	.word	0x40013400
 80069d0:	40014000 	.word	0x40014000
 80069d4:	40014400 	.word	0x40014400
 80069d8:	40014800 	.word	0x40014800

080069dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	f023 0201 	bic.w	r2, r3, #1
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4a26      	ldr	r2, [pc, #152]	; (8006aa0 <TIM_TI1_SetConfig+0xc4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d017      	beq.n	8006a3a <TIM_TI1_SetConfig+0x5e>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a10:	d013      	beq.n	8006a3a <TIM_TI1_SetConfig+0x5e>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a23      	ldr	r2, [pc, #140]	; (8006aa4 <TIM_TI1_SetConfig+0xc8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00f      	beq.n	8006a3a <TIM_TI1_SetConfig+0x5e>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4a22      	ldr	r2, [pc, #136]	; (8006aa8 <TIM_TI1_SetConfig+0xcc>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <TIM_TI1_SetConfig+0x5e>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4a21      	ldr	r2, [pc, #132]	; (8006aac <TIM_TI1_SetConfig+0xd0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <TIM_TI1_SetConfig+0x5e>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4a20      	ldr	r2, [pc, #128]	; (8006ab0 <TIM_TI1_SetConfig+0xd4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d003      	beq.n	8006a3a <TIM_TI1_SetConfig+0x5e>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a1f      	ldr	r2, [pc, #124]	; (8006ab4 <TIM_TI1_SetConfig+0xd8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d101      	bne.n	8006a3e <TIM_TI1_SetConfig+0x62>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <TIM_TI1_SetConfig+0x64>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d008      	beq.n	8006a56 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0303 	bic.w	r3, r3, #3
 8006a4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	e003      	b.n	8006a5e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f043 0301 	orr.w	r3, r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f023 030a 	bic.w	r3, r3, #10
 8006a78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f003 030a 	and.w	r3, r3, #10
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	621a      	str	r2, [r3, #32]
}
 8006a92:	bf00      	nop
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40000800 	.word	0x40000800
 8006aac:	40000c00 	.word	0x40000c00
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40014000 	.word	0x40014000

08006ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	f023 0201 	bic.w	r2, r3, #1
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f023 030a 	bic.w	r3, r3, #10
 8006af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	621a      	str	r2, [r3, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b087      	sub	sp, #28
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	60b9      	str	r1, [r7, #8]
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	f023 0210 	bic.w	r2, r3, #16
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	031b      	lsls	r3, r3, #12
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	621a      	str	r2, [r3, #32]
}
 8006b84:	bf00      	nop
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f023 0210 	bic.w	r2, r3, #16
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	031b      	lsls	r3, r3, #12
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	621a      	str	r2, [r3, #32]
}
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f023 0303 	bic.w	r3, r3, #3
 8006c1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	621a      	str	r2, [r3, #32]
}
 8006c5c:	bf00      	nop
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	031b      	lsls	r3, r3, #12
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006cba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	031b      	lsls	r3, r3, #12
 8006cc0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	f043 0307 	orr.w	r3, r3, #7
 8006d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	609a      	str	r2, [r3, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	021a      	lsls	r2, r3, #8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	609a      	str	r2, [r3, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a1a      	ldr	r2, [r3, #32]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	401a      	ands	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1a      	ldr	r2, [r3, #32]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f003 031f 	and.w	r3, r3, #31
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d90:	431a      	orrs	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e068      	b.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a2e      	ldr	r2, [pc, #184]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d004      	beq.n	8006df0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a2d      	ldr	r2, [pc, #180]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d108      	bne.n	8006e02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006df6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d01d      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2e:	d018      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1b      	ldr	r2, [pc, #108]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d013      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00e      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a18      	ldr	r2, [pc, #96]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d009      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a13      	ldr	r2, [pc, #76]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d004      	beq.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a14      	ldr	r2, [pc, #80]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d10c      	bne.n	8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40013400 	.word	0x40013400
 8006ea4:	40000400 	.word	0x40000400
 8006ea8:	40000800 	.word	0x40000800
 8006eac:	40000c00 	.word	0x40000c00
 8006eb0:	40014000 	.word	0x40014000

08006eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e042      	b.n	8006f88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d106      	bne.n	8006f1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7fa fbcf 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2224      	movs	r2, #36	; 0x24
 8006f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0201 	bic.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f82c 	bl	8006f90 <UART_SetConfig>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e022      	b.n	8006f88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fae8 	bl	8007520 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f042 0201 	orr.w	r2, r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fb6f 	bl	8007664 <UART_CheckIdleState>
 8006f86:	4603      	mov	r3, r0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f90:	b5b0      	push	{r4, r5, r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4bb1      	ldr	r3, [pc, #708]	; (8007280 <UART_SetConfig+0x2f0>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	69f9      	ldr	r1, [r7, #28]
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4aa6      	ldr	r2, [pc, #664]	; (8007284 <UART_SetConfig+0x2f4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007002:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	69f9      	ldr	r1, [r7, #28]
 800700c:	430b      	orrs	r3, r1
 800700e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007016:	f023 010f 	bic.w	r1, r3, #15
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a97      	ldr	r2, [pc, #604]	; (8007288 <UART_SetConfig+0x2f8>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d120      	bne.n	8007072 <UART_SetConfig+0xe2>
 8007030:	4b96      	ldr	r3, [pc, #600]	; (800728c <UART_SetConfig+0x2fc>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b03      	cmp	r3, #3
 800703c:	d816      	bhi.n	800706c <UART_SetConfig+0xdc>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <UART_SetConfig+0xb4>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007055 	.word	0x08007055
 8007048:	08007061 	.word	0x08007061
 800704c:	0800705b 	.word	0x0800705b
 8007050:	08007067 	.word	0x08007067
 8007054:	2301      	movs	r3, #1
 8007056:	76fb      	strb	r3, [r7, #27]
 8007058:	e0e7      	b.n	800722a <UART_SetConfig+0x29a>
 800705a:	2302      	movs	r3, #2
 800705c:	76fb      	strb	r3, [r7, #27]
 800705e:	e0e4      	b.n	800722a <UART_SetConfig+0x29a>
 8007060:	2304      	movs	r3, #4
 8007062:	76fb      	strb	r3, [r7, #27]
 8007064:	e0e1      	b.n	800722a <UART_SetConfig+0x29a>
 8007066:	2308      	movs	r3, #8
 8007068:	76fb      	strb	r3, [r7, #27]
 800706a:	e0de      	b.n	800722a <UART_SetConfig+0x29a>
 800706c:	2310      	movs	r3, #16
 800706e:	76fb      	strb	r3, [r7, #27]
 8007070:	e0db      	b.n	800722a <UART_SetConfig+0x29a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a86      	ldr	r2, [pc, #536]	; (8007290 <UART_SetConfig+0x300>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d132      	bne.n	80070e2 <UART_SetConfig+0x152>
 800707c:	4b83      	ldr	r3, [pc, #524]	; (800728c <UART_SetConfig+0x2fc>)
 800707e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007082:	f003 030c 	and.w	r3, r3, #12
 8007086:	2b0c      	cmp	r3, #12
 8007088:	d828      	bhi.n	80070dc <UART_SetConfig+0x14c>
 800708a:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <UART_SetConfig+0x100>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	080070c5 	.word	0x080070c5
 8007094:	080070dd 	.word	0x080070dd
 8007098:	080070dd 	.word	0x080070dd
 800709c:	080070dd 	.word	0x080070dd
 80070a0:	080070d1 	.word	0x080070d1
 80070a4:	080070dd 	.word	0x080070dd
 80070a8:	080070dd 	.word	0x080070dd
 80070ac:	080070dd 	.word	0x080070dd
 80070b0:	080070cb 	.word	0x080070cb
 80070b4:	080070dd 	.word	0x080070dd
 80070b8:	080070dd 	.word	0x080070dd
 80070bc:	080070dd 	.word	0x080070dd
 80070c0:	080070d7 	.word	0x080070d7
 80070c4:	2300      	movs	r3, #0
 80070c6:	76fb      	strb	r3, [r7, #27]
 80070c8:	e0af      	b.n	800722a <UART_SetConfig+0x29a>
 80070ca:	2302      	movs	r3, #2
 80070cc:	76fb      	strb	r3, [r7, #27]
 80070ce:	e0ac      	b.n	800722a <UART_SetConfig+0x29a>
 80070d0:	2304      	movs	r3, #4
 80070d2:	76fb      	strb	r3, [r7, #27]
 80070d4:	e0a9      	b.n	800722a <UART_SetConfig+0x29a>
 80070d6:	2308      	movs	r3, #8
 80070d8:	76fb      	strb	r3, [r7, #27]
 80070da:	e0a6      	b.n	800722a <UART_SetConfig+0x29a>
 80070dc:	2310      	movs	r3, #16
 80070de:	76fb      	strb	r3, [r7, #27]
 80070e0:	e0a3      	b.n	800722a <UART_SetConfig+0x29a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a6b      	ldr	r2, [pc, #428]	; (8007294 <UART_SetConfig+0x304>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d120      	bne.n	800712e <UART_SetConfig+0x19e>
 80070ec:	4b67      	ldr	r3, [pc, #412]	; (800728c <UART_SetConfig+0x2fc>)
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80070f6:	2b30      	cmp	r3, #48	; 0x30
 80070f8:	d013      	beq.n	8007122 <UART_SetConfig+0x192>
 80070fa:	2b30      	cmp	r3, #48	; 0x30
 80070fc:	d814      	bhi.n	8007128 <UART_SetConfig+0x198>
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d009      	beq.n	8007116 <UART_SetConfig+0x186>
 8007102:	2b20      	cmp	r3, #32
 8007104:	d810      	bhi.n	8007128 <UART_SetConfig+0x198>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <UART_SetConfig+0x180>
 800710a:	2b10      	cmp	r3, #16
 800710c:	d006      	beq.n	800711c <UART_SetConfig+0x18c>
 800710e:	e00b      	b.n	8007128 <UART_SetConfig+0x198>
 8007110:	2300      	movs	r3, #0
 8007112:	76fb      	strb	r3, [r7, #27]
 8007114:	e089      	b.n	800722a <UART_SetConfig+0x29a>
 8007116:	2302      	movs	r3, #2
 8007118:	76fb      	strb	r3, [r7, #27]
 800711a:	e086      	b.n	800722a <UART_SetConfig+0x29a>
 800711c:	2304      	movs	r3, #4
 800711e:	76fb      	strb	r3, [r7, #27]
 8007120:	e083      	b.n	800722a <UART_SetConfig+0x29a>
 8007122:	2308      	movs	r3, #8
 8007124:	76fb      	strb	r3, [r7, #27]
 8007126:	e080      	b.n	800722a <UART_SetConfig+0x29a>
 8007128:	2310      	movs	r3, #16
 800712a:	76fb      	strb	r3, [r7, #27]
 800712c:	e07d      	b.n	800722a <UART_SetConfig+0x29a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a59      	ldr	r2, [pc, #356]	; (8007298 <UART_SetConfig+0x308>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d120      	bne.n	800717a <UART_SetConfig+0x1ea>
 8007138:	4b54      	ldr	r3, [pc, #336]	; (800728c <UART_SetConfig+0x2fc>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007142:	2bc0      	cmp	r3, #192	; 0xc0
 8007144:	d013      	beq.n	800716e <UART_SetConfig+0x1de>
 8007146:	2bc0      	cmp	r3, #192	; 0xc0
 8007148:	d814      	bhi.n	8007174 <UART_SetConfig+0x1e4>
 800714a:	2b80      	cmp	r3, #128	; 0x80
 800714c:	d009      	beq.n	8007162 <UART_SetConfig+0x1d2>
 800714e:	2b80      	cmp	r3, #128	; 0x80
 8007150:	d810      	bhi.n	8007174 <UART_SetConfig+0x1e4>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d002      	beq.n	800715c <UART_SetConfig+0x1cc>
 8007156:	2b40      	cmp	r3, #64	; 0x40
 8007158:	d006      	beq.n	8007168 <UART_SetConfig+0x1d8>
 800715a:	e00b      	b.n	8007174 <UART_SetConfig+0x1e4>
 800715c:	2300      	movs	r3, #0
 800715e:	76fb      	strb	r3, [r7, #27]
 8007160:	e063      	b.n	800722a <UART_SetConfig+0x29a>
 8007162:	2302      	movs	r3, #2
 8007164:	76fb      	strb	r3, [r7, #27]
 8007166:	e060      	b.n	800722a <UART_SetConfig+0x29a>
 8007168:	2304      	movs	r3, #4
 800716a:	76fb      	strb	r3, [r7, #27]
 800716c:	e05d      	b.n	800722a <UART_SetConfig+0x29a>
 800716e:	2308      	movs	r3, #8
 8007170:	76fb      	strb	r3, [r7, #27]
 8007172:	e05a      	b.n	800722a <UART_SetConfig+0x29a>
 8007174:	2310      	movs	r3, #16
 8007176:	76fb      	strb	r3, [r7, #27]
 8007178:	e057      	b.n	800722a <UART_SetConfig+0x29a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a47      	ldr	r2, [pc, #284]	; (800729c <UART_SetConfig+0x30c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d125      	bne.n	80071d0 <UART_SetConfig+0x240>
 8007184:	4b41      	ldr	r3, [pc, #260]	; (800728c <UART_SetConfig+0x2fc>)
 8007186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007192:	d017      	beq.n	80071c4 <UART_SetConfig+0x234>
 8007194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007198:	d817      	bhi.n	80071ca <UART_SetConfig+0x23a>
 800719a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800719e:	d00b      	beq.n	80071b8 <UART_SetConfig+0x228>
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a4:	d811      	bhi.n	80071ca <UART_SetConfig+0x23a>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <UART_SetConfig+0x222>
 80071aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ae:	d006      	beq.n	80071be <UART_SetConfig+0x22e>
 80071b0:	e00b      	b.n	80071ca <UART_SetConfig+0x23a>
 80071b2:	2300      	movs	r3, #0
 80071b4:	76fb      	strb	r3, [r7, #27]
 80071b6:	e038      	b.n	800722a <UART_SetConfig+0x29a>
 80071b8:	2302      	movs	r3, #2
 80071ba:	76fb      	strb	r3, [r7, #27]
 80071bc:	e035      	b.n	800722a <UART_SetConfig+0x29a>
 80071be:	2304      	movs	r3, #4
 80071c0:	76fb      	strb	r3, [r7, #27]
 80071c2:	e032      	b.n	800722a <UART_SetConfig+0x29a>
 80071c4:	2308      	movs	r3, #8
 80071c6:	76fb      	strb	r3, [r7, #27]
 80071c8:	e02f      	b.n	800722a <UART_SetConfig+0x29a>
 80071ca:	2310      	movs	r3, #16
 80071cc:	76fb      	strb	r3, [r7, #27]
 80071ce:	e02c      	b.n	800722a <UART_SetConfig+0x29a>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2b      	ldr	r2, [pc, #172]	; (8007284 <UART_SetConfig+0x2f4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d125      	bne.n	8007226 <UART_SetConfig+0x296>
 80071da:	4b2c      	ldr	r3, [pc, #176]	; (800728c <UART_SetConfig+0x2fc>)
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071e8:	d017      	beq.n	800721a <UART_SetConfig+0x28a>
 80071ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071ee:	d817      	bhi.n	8007220 <UART_SetConfig+0x290>
 80071f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f4:	d00b      	beq.n	800720e <UART_SetConfig+0x27e>
 80071f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fa:	d811      	bhi.n	8007220 <UART_SetConfig+0x290>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <UART_SetConfig+0x278>
 8007200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007204:	d006      	beq.n	8007214 <UART_SetConfig+0x284>
 8007206:	e00b      	b.n	8007220 <UART_SetConfig+0x290>
 8007208:	2300      	movs	r3, #0
 800720a:	76fb      	strb	r3, [r7, #27]
 800720c:	e00d      	b.n	800722a <UART_SetConfig+0x29a>
 800720e:	2302      	movs	r3, #2
 8007210:	76fb      	strb	r3, [r7, #27]
 8007212:	e00a      	b.n	800722a <UART_SetConfig+0x29a>
 8007214:	2304      	movs	r3, #4
 8007216:	76fb      	strb	r3, [r7, #27]
 8007218:	e007      	b.n	800722a <UART_SetConfig+0x29a>
 800721a:	2308      	movs	r3, #8
 800721c:	76fb      	strb	r3, [r7, #27]
 800721e:	e004      	b.n	800722a <UART_SetConfig+0x29a>
 8007220:	2310      	movs	r3, #16
 8007222:	76fb      	strb	r3, [r7, #27]
 8007224:	e001      	b.n	800722a <UART_SetConfig+0x29a>
 8007226:	2310      	movs	r3, #16
 8007228:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a15      	ldr	r2, [pc, #84]	; (8007284 <UART_SetConfig+0x2f4>)
 8007230:	4293      	cmp	r3, r2
 8007232:	f040 809f 	bne.w	8007374 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007236:	7efb      	ldrb	r3, [r7, #27]
 8007238:	2b08      	cmp	r3, #8
 800723a:	d837      	bhi.n	80072ac <UART_SetConfig+0x31c>
 800723c:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <UART_SetConfig+0x2b4>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007269 	.word	0x08007269
 8007248:	080072ad 	.word	0x080072ad
 800724c:	08007271 	.word	0x08007271
 8007250:	080072ad 	.word	0x080072ad
 8007254:	08007277 	.word	0x08007277
 8007258:	080072ad 	.word	0x080072ad
 800725c:	080072ad 	.word	0x080072ad
 8007260:	080072ad 	.word	0x080072ad
 8007264:	080072a5 	.word	0x080072a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007268:	f7fd fbae 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 800726c:	6178      	str	r0, [r7, #20]
        break;
 800726e:	e022      	b.n	80072b6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <UART_SetConfig+0x310>)
 8007272:	617b      	str	r3, [r7, #20]
        break;
 8007274:	e01f      	b.n	80072b6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007276:	f7fd fb0f 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 800727a:	6178      	str	r0, [r7, #20]
        break;
 800727c:	e01b      	b.n	80072b6 <UART_SetConfig+0x326>
 800727e:	bf00      	nop
 8007280:	cfff69f3 	.word	0xcfff69f3
 8007284:	40008000 	.word	0x40008000
 8007288:	40013800 	.word	0x40013800
 800728c:	40021000 	.word	0x40021000
 8007290:	40004400 	.word	0x40004400
 8007294:	40004800 	.word	0x40004800
 8007298:	40004c00 	.word	0x40004c00
 800729c:	40005000 	.word	0x40005000
 80072a0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072a8:	617b      	str	r3, [r7, #20]
        break;
 80072aa:	e004      	b.n	80072b6 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	76bb      	strb	r3, [r7, #26]
        break;
 80072b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8119 	beq.w	80074f0 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	4a95      	ldr	r2, [pc, #596]	; (8007518 <UART_SetConfig+0x588>)
 80072c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c8:	461a      	mov	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80072d0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	4413      	add	r3, r2
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d305      	bcc.n	80072ee <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d902      	bls.n	80072f4 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	76bb      	strb	r3, [r7, #26]
 80072f2:	e0fd      	b.n	80074f0 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f04f 0100 	mov.w	r1, #0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	4a85      	ldr	r2, [pc, #532]	; (8007518 <UART_SetConfig+0x588>)
 8007302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007306:	b29a      	uxth	r2, r3
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	f7f8 ff76 	bl	80001fc <__aeabi_uldivmod>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4610      	mov	r0, r2
 8007316:	4619      	mov	r1, r3
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	020b      	lsls	r3, r1, #8
 8007322:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007326:	0202      	lsls	r2, r0, #8
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	6849      	ldr	r1, [r1, #4]
 800732c:	0849      	lsrs	r1, r1, #1
 800732e:	4608      	mov	r0, r1
 8007330:	f04f 0100 	mov.w	r1, #0
 8007334:	1814      	adds	r4, r2, r0
 8007336:	eb43 0501 	adc.w	r5, r3, r1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	461a      	mov	r2, r3
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	4620      	mov	r0, r4
 8007346:	4629      	mov	r1, r5
 8007348:	f7f8 ff58 	bl	80001fc <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4613      	mov	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800735a:	d308      	bcc.n	800736e <UART_SetConfig+0x3de>
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007362:	d204      	bcs.n	800736e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	60da      	str	r2, [r3, #12]
 800736c:	e0c0      	b.n	80074f0 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	76bb      	strb	r3, [r7, #26]
 8007372:	e0bd      	b.n	80074f0 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737c:	d164      	bne.n	8007448 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 800737e:	7efb      	ldrb	r3, [r7, #27]
 8007380:	2b08      	cmp	r3, #8
 8007382:	d828      	bhi.n	80073d6 <UART_SetConfig+0x446>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0x3fc>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073c1 	.word	0x080073c1
 8007398:	080073d7 	.word	0x080073d7
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	080073d7 	.word	0x080073d7
 80073a4:	080073d7 	.word	0x080073d7
 80073a8:	080073d7 	.word	0x080073d7
 80073ac:	080073cf 	.word	0x080073cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b0:	f7fd fb0a 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 80073b4:	6178      	str	r0, [r7, #20]
        break;
 80073b6:	e013      	b.n	80073e0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b8:	f7fd fb1c 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 80073bc:	6178      	str	r0, [r7, #20]
        break;
 80073be:	e00f      	b.n	80073e0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c0:	4b56      	ldr	r3, [pc, #344]	; (800751c <UART_SetConfig+0x58c>)
 80073c2:	617b      	str	r3, [r7, #20]
        break;
 80073c4:	e00c      	b.n	80073e0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073c6:	f7fd fa67 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 80073ca:	6178      	str	r0, [r7, #20]
        break;
 80073cc:	e008      	b.n	80073e0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d2:	617b      	str	r3, [r7, #20]
        break;
 80073d4:	e004      	b.n	80073e0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	76bb      	strb	r3, [r7, #26]
        break;
 80073de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8084 	beq.w	80074f0 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	4a4a      	ldr	r2, [pc, #296]	; (8007518 <UART_SetConfig+0x588>)
 80073ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f2:	461a      	mov	r2, r3
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80073fa:	005a      	lsls	r2, r3, #1
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	085b      	lsrs	r3, r3, #1
 8007402:	441a      	add	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	fbb2 f3f3 	udiv	r3, r2, r3
 800740c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b0f      	cmp	r3, #15
 8007412:	d916      	bls.n	8007442 <UART_SetConfig+0x4b2>
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800741a:	d212      	bcs.n	8007442 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	b29b      	uxth	r3, r3
 8007420:	f023 030f 	bic.w	r3, r3, #15
 8007424:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	085b      	lsrs	r3, r3, #1
 800742a:	b29b      	uxth	r3, r3
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	b29a      	uxth	r2, r3
 8007432:	89fb      	ldrh	r3, [r7, #14]
 8007434:	4313      	orrs	r3, r2
 8007436:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	89fa      	ldrh	r2, [r7, #14]
 800743e:	60da      	str	r2, [r3, #12]
 8007440:	e056      	b.n	80074f0 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	76bb      	strb	r3, [r7, #26]
 8007446:	e053      	b.n	80074f0 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007448:	7efb      	ldrb	r3, [r7, #27]
 800744a:	2b08      	cmp	r3, #8
 800744c:	d827      	bhi.n	800749e <UART_SetConfig+0x50e>
 800744e:	a201      	add	r2, pc, #4	; (adr r2, 8007454 <UART_SetConfig+0x4c4>)
 8007450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007454:	08007479 	.word	0x08007479
 8007458:	08007481 	.word	0x08007481
 800745c:	08007489 	.word	0x08007489
 8007460:	0800749f 	.word	0x0800749f
 8007464:	0800748f 	.word	0x0800748f
 8007468:	0800749f 	.word	0x0800749f
 800746c:	0800749f 	.word	0x0800749f
 8007470:	0800749f 	.word	0x0800749f
 8007474:	08007497 	.word	0x08007497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007478:	f7fd faa6 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 800747c:	6178      	str	r0, [r7, #20]
        break;
 800747e:	e013      	b.n	80074a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007480:	f7fd fab8 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 8007484:	6178      	str	r0, [r7, #20]
        break;
 8007486:	e00f      	b.n	80074a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007488:	4b24      	ldr	r3, [pc, #144]	; (800751c <UART_SetConfig+0x58c>)
 800748a:	617b      	str	r3, [r7, #20]
        break;
 800748c:	e00c      	b.n	80074a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800748e:	f7fd fa03 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 8007492:	6178      	str	r0, [r7, #20]
        break;
 8007494:	e008      	b.n	80074a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800749a:	617b      	str	r3, [r7, #20]
        break;
 800749c:	e004      	b.n	80074a8 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	76bb      	strb	r3, [r7, #26]
        break;
 80074a6:	bf00      	nop
    }

    if (pclk != 0U)
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d020      	beq.n	80074f0 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	4a19      	ldr	r2, [pc, #100]	; (8007518 <UART_SetConfig+0x588>)
 80074b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b8:	461a      	mov	r2, r3
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	085b      	lsrs	r3, r3, #1
 80074c6:	441a      	add	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d0:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b0f      	cmp	r3, #15
 80074d6:	d909      	bls.n	80074ec <UART_SetConfig+0x55c>
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074de:	d205      	bcs.n	80074ec <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60da      	str	r2, [r3, #12]
 80074ea:	e001      	b.n	80074f0 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800750c:	7ebb      	ldrb	r3, [r7, #26]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3720      	adds	r7, #32
 8007512:	46bd      	mov	sp, r7
 8007514:	bdb0      	pop	{r4, r5, r7, pc}
 8007516:	bf00      	nop
 8007518:	08007b48 	.word	0x08007b48
 800751c:	00f42400 	.word	0x00f42400

08007520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00a      	beq.n	800754a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01a      	beq.n	8007636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800761e:	d10a      	bne.n	8007636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	605a      	str	r2, [r3, #4]
  }
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af02      	add	r7, sp, #8
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007674:	f7fa f9b6 	bl	80019e4 <HAL_GetTick>
 8007678:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	2b08      	cmp	r3, #8
 8007686:	d10e      	bne.n	80076a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f82f 	bl	80076fa <UART_WaitOnFlagUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e025      	b.n	80076f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d10e      	bne.n	80076d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f819 	bl	80076fa <UART_WaitOnFlagUntilTimeout>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e00f      	b.n	80076f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b09c      	sub	sp, #112	; 0x70
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	4613      	mov	r3, r2
 8007708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800770a:	e0a9      	b.n	8007860 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800770c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800770e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007712:	f000 80a5 	beq.w	8007860 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007716:	f7fa f965 	bl	80019e4 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007722:	429a      	cmp	r2, r3
 8007724:	d302      	bcc.n	800772c <UART_WaitOnFlagUntilTimeout+0x32>
 8007726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007728:	2b00      	cmp	r3, #0
 800772a:	d140      	bne.n	80077ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800773a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007740:	667b      	str	r3, [r7, #100]	; 0x64
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800774c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007750:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e6      	bne.n	800772c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3308      	adds	r3, #8
 8007764:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	663b      	str	r3, [r7, #96]	; 0x60
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800777e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007780:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800778c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e5      	bne.n	800775e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2220      	movs	r2, #32
 8007796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e069      	b.n	8007882 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d051      	beq.n	8007860 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ca:	d149      	bne.n	8007860 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
 80077f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e6      	bne.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3308      	adds	r3, #8
 800780e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	613b      	str	r3, [r7, #16]
   return(result);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f023 0301 	bic.w	r3, r3, #1
 800781e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3308      	adds	r3, #8
 8007826:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007828:	623a      	str	r2, [r7, #32]
 800782a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	69f9      	ldr	r1, [r7, #28]
 800782e:	6a3a      	ldr	r2, [r7, #32]
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	61bb      	str	r3, [r7, #24]
   return(result);
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e5      	bne.n	8007808 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2220      	movs	r2, #32
 8007840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2220      	movs	r2, #32
 8007848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2220      	movs	r2, #32
 8007850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e010      	b.n	8007882 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69da      	ldr	r2, [r3, #28]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	4013      	ands	r3, r2
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	429a      	cmp	r2, r3
 800786e:	bf0c      	ite	eq
 8007870:	2301      	moveq	r3, #1
 8007872:	2300      	movne	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	79fb      	ldrb	r3, [r7, #7]
 800787a:	429a      	cmp	r2, r3
 800787c:	f43f af46 	beq.w	800770c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3770      	adds	r7, #112	; 0x70
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007898:	2b01      	cmp	r3, #1
 800789a:	d101      	bne.n	80078a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800789c:	2302      	movs	r3, #2
 800789e:	e027      	b.n	80078f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2224      	movs	r2, #36	; 0x24
 80078ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0201 	bic.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007910:	2302      	movs	r3, #2
 8007912:	e02d      	b.n	8007970 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2224      	movs	r2, #36	; 0x24
 8007920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0201 	bic.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f84f 	bl	80079f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800798c:	2302      	movs	r3, #2
 800798e:	e02d      	b.n	80079ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2224      	movs	r2, #36	; 0x24
 800799c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0201 	bic.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f811 	bl	80079f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d108      	bne.n	8007a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a14:	e031      	b.n	8007a7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a16:	2308      	movs	r3, #8
 8007a18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a1a:	2308      	movs	r3, #8
 8007a1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	0e5b      	lsrs	r3, r3, #25
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	0f5b      	lsrs	r3, r3, #29
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	7b3a      	ldrb	r2, [r7, #12]
 8007a42:	4911      	ldr	r1, [pc, #68]	; (8007a88 <UARTEx_SetNbDataToProcess+0x94>)
 8007a44:	5c8a      	ldrb	r2, [r1, r2]
 8007a46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a4a:	7b3a      	ldrb	r2, [r7, #12]
 8007a4c:	490f      	ldr	r1, [pc, #60]	; (8007a8c <UARTEx_SetNbDataToProcess+0x98>)
 8007a4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	7b7a      	ldrb	r2, [r7, #13]
 8007a60:	4909      	ldr	r1, [pc, #36]	; (8007a88 <UARTEx_SetNbDataToProcess+0x94>)
 8007a62:	5c8a      	ldrb	r2, [r1, r2]
 8007a64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a68:	7b7a      	ldrb	r2, [r7, #13]
 8007a6a:	4908      	ldr	r1, [pc, #32]	; (8007a8c <UARTEx_SetNbDataToProcess+0x98>)
 8007a6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a7a:	bf00      	nop
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	08007b60 	.word	0x08007b60
 8007a8c:	08007b68 	.word	0x08007b68

08007a90 <__libc_init_array>:
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	4d0d      	ldr	r5, [pc, #52]	; (8007ac8 <__libc_init_array+0x38>)
 8007a94:	4c0d      	ldr	r4, [pc, #52]	; (8007acc <__libc_init_array+0x3c>)
 8007a96:	1b64      	subs	r4, r4, r5
 8007a98:	10a4      	asrs	r4, r4, #2
 8007a9a:	2600      	movs	r6, #0
 8007a9c:	42a6      	cmp	r6, r4
 8007a9e:	d109      	bne.n	8007ab4 <__libc_init_array+0x24>
 8007aa0:	4d0b      	ldr	r5, [pc, #44]	; (8007ad0 <__libc_init_array+0x40>)
 8007aa2:	4c0c      	ldr	r4, [pc, #48]	; (8007ad4 <__libc_init_array+0x44>)
 8007aa4:	f000 f820 	bl	8007ae8 <_init>
 8007aa8:	1b64      	subs	r4, r4, r5
 8007aaa:	10a4      	asrs	r4, r4, #2
 8007aac:	2600      	movs	r6, #0
 8007aae:	42a6      	cmp	r6, r4
 8007ab0:	d105      	bne.n	8007abe <__libc_init_array+0x2e>
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
 8007ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab8:	4798      	blx	r3
 8007aba:	3601      	adds	r6, #1
 8007abc:	e7ee      	b.n	8007a9c <__libc_init_array+0xc>
 8007abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac2:	4798      	blx	r3
 8007ac4:	3601      	adds	r6, #1
 8007ac6:	e7f2      	b.n	8007aae <__libc_init_array+0x1e>
 8007ac8:	08007b78 	.word	0x08007b78
 8007acc:	08007b78 	.word	0x08007b78
 8007ad0:	08007b78 	.word	0x08007b78
 8007ad4:	08007b7c 	.word	0x08007b7c

08007ad8 <memset>:
 8007ad8:	4402      	add	r2, r0
 8007ada:	4603      	mov	r3, r0
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d100      	bne.n	8007ae2 <memset+0xa>
 8007ae0:	4770      	bx	lr
 8007ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ae6:	e7f9      	b.n	8007adc <memset+0x4>

08007ae8 <_init>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	bf00      	nop
 8007aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aee:	bc08      	pop	{r3}
 8007af0:	469e      	mov	lr, r3
 8007af2:	4770      	bx	lr

08007af4 <_fini>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	bf00      	nop
 8007af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afa:	bc08      	pop	{r3}
 8007afc:	469e      	mov	lr, r3
 8007afe:	4770      	bx	lr
